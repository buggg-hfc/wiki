{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 Buggg\u7684\u5c0f\u5c4b \u00b6 \u6b22\u8fce\u8bbf\u95eeBuggg\u7684B\u7ad9\u4e3b\u9875\uff1a Bug\u81ea\u52a8\u673a \u8fd9\u662f\u54ea\u91cc \u00b6 \u8fd9\u662fBuggg\u7684\u5c0f\u5c4b Buggg\u662f\u8c01 \u00b6 Buggg\u5c31\u662fBug\u54e5\u54e5\uff0c\u4e5f\u53ef\u4ee5\u79f0\u4ed6\u4e3a\u732b\u732b\u866b Buggg\u7684\u5c0f\u5c4b\u91cc\u6709\u4ec0\u4e48 \u00b6 Buggg\u4f1a\u5728\u8fd9\u91cc\u53d1\u5e03\u4e00\u4e9b\u6587\u7ae0\uff0c\u8bb0\u5f55\u4e00\u4e9b\u5b66\u4e60\u5fc3\u5f97\u7b49\u7b49","title":"\u7b80\u4ecb"},{"location":"#buggg","text":"\u6b22\u8fce\u8bbf\u95eeBuggg\u7684B\u7ad9\u4e3b\u9875\uff1a Bug\u81ea\u52a8\u673a","title":"\u6b22\u8fce\u6765\u5230 Buggg\u7684\u5c0f\u5c4b"},{"location":"#_1","text":"\u8fd9\u662fBuggg\u7684\u5c0f\u5c4b","title":"\u8fd9\u662f\u54ea\u91cc"},{"location":"#buggg_1","text":"Buggg\u5c31\u662fBug\u54e5\u54e5\uff0c\u4e5f\u53ef\u4ee5\u79f0\u4ed6\u4e3a\u732b\u732b\u866b","title":"Buggg\u662f\u8c01"},{"location":"#buggg_2","text":"Buggg\u4f1a\u5728\u8fd9\u91cc\u53d1\u5e03\u4e00\u4e9b\u6587\u7ae0\uff0c\u8bb0\u5f55\u4e00\u4e9b\u5b66\u4e60\u5fc3\u5f97\u7b49\u7b49","title":"Buggg\u7684\u5c0f\u5c4b\u91cc\u6709\u4ec0\u4e48"},{"location":"CSP/","text":"CSP\u8ba4\u8bc1\u9898\u89e3 \u00b6 NJUST\u8ba1\u7b97\u673a\u5b66\u9662\u6bd5\u4e1a\u8981\u6c42CSP\u8ba4\u8bc1\u6210\u7ee9\u8fbe\u5230100\u5206\uff0c\u4fdd\u7814\u8981\u6c42CSP\u8ba4\u8bc1\u6210\u7ee9\u8fbe\u5230200\u5206 CSP\u8ba4\u8bc1\u5b98\u7f51: https://cspro.org/ CSP\u5386\u5e74\u771f\u9898: http://118.190.20.162/ \u6b64\u5206\u7c7b\u4e0b\u8bb0\u5f55\u4e86\u5386\u5e74CSP\u8ba4\u8bc1\u8003\u8bd5\u771f\u9898\u9898\u89e3\uff0c\u7801\u98ce\u62d9\u52a3\uff0c\u6073\u8bf7\u6307\u6559\u3002","title":"\u7b80\u4ecb"},{"location":"CSP/#csp","text":"NJUST\u8ba1\u7b97\u673a\u5b66\u9662\u6bd5\u4e1a\u8981\u6c42CSP\u8ba4\u8bc1\u6210\u7ee9\u8fbe\u5230100\u5206\uff0c\u4fdd\u7814\u8981\u6c42CSP\u8ba4\u8bc1\u6210\u7ee9\u8fbe\u5230200\u5206 CSP\u8ba4\u8bc1\u5b98\u7f51: https://cspro.org/ CSP\u5386\u5e74\u771f\u9898: http://118.190.20.162/ \u6b64\u5206\u7c7b\u4e0b\u8bb0\u5f55\u4e86\u5386\u5e74CSP\u8ba4\u8bc1\u8003\u8bd5\u771f\u9898\u9898\u89e3\uff0c\u7801\u98ce\u62d9\u52a3\uff0c\u6073\u8bf7\u6307\u6559\u3002","title":"CSP\u8ba4\u8bc1\u9898\u89e3"},{"location":"CSP/%E6%A8%A1%E6%9D%BF/","text":"\u89c6\u9891\u9898\u89e3 \u6682\u65e0 \u7b2c1\u9898 xxx \u00b6 \u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0 \u7b2c2\u9898 xxx \u00b6 \u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0 \u7b2c3\u9898 xxx \u00b6 \u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0 \u7b2c4\u9898 xxx \u00b6 \u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0 \u7b2c5\u9898 xxx \u00b6 \u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: ???+ \u89c6\u9891\u9898\u89e3 \u6682\u65e0","title":"\u6a21\u677f"},{"location":"CSP/%E6%A8%A1%E6%9D%BF/#1-xxx","text":"\u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c1\u9898 xxx"},{"location":"CSP/%E6%A8%A1%E6%9D%BF/#2-xxx","text":"\u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c2\u9898 xxx"},{"location":"CSP/%E6%A8%A1%E6%9D%BF/#3-xxx","text":"\u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c3\u9898 xxx"},{"location":"CSP/%E6%A8%A1%E6%9D%BF/#4-xxx","text":"\u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c4\u9898 xxx"},{"location":"CSP/%E6%A8%A1%E6%9D%BF/#5-xxx","text":"\u9898\u76ee\u94fe\u63a5: xxx TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: ???+ \u89c6\u9891\u9898\u89e3 \u6682\u65e0","title":"\u7b2c5\u9898 xxx"},{"location":"CSP/%E7%9B%AE%E5%BD%95/","text":"\u76ee\u5f55 \u00b6 \u6ca1\u6709\u8d85\u94fe\u63a5\u7684\u9898\u9762\u4e3a\u672a\u66f4\u65b0\u9898\u89e3\u7684\u9898\u76ee 201312\u7b2c0\u6b21 \u00b6 \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570 ISBN\u53f7\u7801 \u6700\u5927\u7684\u77e9\u5f62 \u6709\u8da3\u7684\u6570 I\u2019m stuck! 201403\u7b2c1\u6b21 \u00b6 \u76f8\u53cd\u6570 \u7a97\u53e3 \u547d\u4ee4\u884c\u9009\u9879 \u65e0\u7ebf\u7f51\u7edc \u4efb\u52a1\u8c03\u5ea6 201409\u7b2c2\u6b21 \u00b6 \u76f8\u90bb\u6570\u5bf9 \u753b\u56fe \u5b57\u7b26\u4e32\u5339\u914d \u6700\u4f18\u914d\u9910 \u62fc\u56fe 201412\u7b2c3\u6b21 \u00b6 \u95e8\u7981\u7cfb\u7edf Z\u5b57\u5f62\u626b\u63cf \u96c6\u5408\u7ade\u4ef7 \u6700\u4f18\u704c\u6e89 \u8d27\u7269\u8c03\u5ea6 201503\u7b2c4\u6b21 \u00b6 \u56fe\u50cf\u65cb\u8f6c \u6570\u5b57\u6392\u5e8f \u8282\u65e5 \u7f51\u7edc\u5ef6\u65f6 \u6700\u5c0f\u82b1\u8d39 201509\u7b2c5\u6b21 \u00b6 \u6570\u5217\u5206\u6bb5 \u65e5\u671f\u8ba1\u7b97 \u6a21\u677f\u751f\u6210\u7cfb\u7edf \u9ad8\u901f\u516c\u8def \u6700\u4f73\u6587\u7ae0 201512\u7b2c6\u6b21 \u00b6 \u6570\u4f4d\u4e4b\u548c \u6d88\u9664\u7c7b\u6e38\u620f \u753b\u56fe \u9001\u8d27 \u77e9\u9635 201604\u7b2c7\u6b21 \u00b6 \u6298\u70b9\u8ba1\u6570 \u4fc4\u7f57\u65af\u65b9\u5757 \u8def\u5f84\u89e3\u6790 \u6e38\u620f \u7f51\u7edc\u8fde\u63a5 201609\u7b2c8\u6b21 \u00b6 \u6700\u5927\u6ce2\u52a8 \u706b\u8f66\u8d2d\u7968 \u7089\u77f3\u4f20\u8bf4 \u4ea4\u901a\u89c4\u5212 \u796d\u575b 201612\u7b2c9\u6b21 \u00b6 \u4e2d\u95f4\u6570 \u5de5\u8d44\u8ba1\u7b97 \u6743\u9650\u67e5\u8be2 \u538b\u7f29\u7f16\u7801 \u5361\u724c\u6e38\u620f 201703\u7b2c10\u6b21 \u00b6 \u5206\u86cb\u7cd5 \u5b66\u751f\u6392\u961f Markdown \u5730\u94c1\u4fee\u5efa \u5f15\u6c34\u5165\u57ce 201709\u7b2c11\u6b21 \u00b6 \u6253\u9171\u6cb9 \u516c\u5171\u94a5\u5319\u76d2 JSON\u67e5\u8be2 \u901a\u4fe1\u7f51\u7edc \u9664\u6cd5 201712\u7b2c12\u6b21 \u00b6 \u6700\u5c0f\u5dee\u503c \u6e38\u620f Crontab \u884c\u8f66\u8def\u7ebf \u5546\u8def 201803\u7b2c13\u6b21 \u00b6 \u8df3\u4e00\u8df3 \u78b0\u649e\u7684\u5c0f\u7403 URL\u6620\u5c04 \u68cb\u5c40\u8bc4\u4f30 \u4e8c\u6b21\u6c42\u548c 201809\u7b2c14\u6b21 \u00b6 \u5356\u83dc \u4e70\u83dc \u5143\u7d20\u9009\u62e9\u5668 \u518d\u5356\u83dc \u7ebf\u6027\u9012\u63a8\u5f0f 201812\u7b2c15\u6b21 \u00b6 \u5c0f\u660e\u4e0a\u5b66 \u5c0f\u660e\u653e\u5b66 CIDR\u5408\u5e76 \u6570\u636e\u4e2d\u5fc3 \u7ba1\u9053\u6e05\u6d01 201903\u7b2c16\u6b21 \u00b6 \u5c0f\u4e2d\u5927 \u4e8c\u5341\u56db\u70b9 \u635f\u574f\u7684RAID5 \u6d88\u606f\u4f20\u9012\u63a5\u53e3 317\u53f7\u5b50\u4efb\u52a1 201909\u7b2c17\u6b21 \u00b6 \u5c0f\u660e\u79cd\u82f9\u679c \u5c0f\u660e\u79cd\u82f9\u679c\uff08\u7eed\uff09 \u5b57\u7b26\u753b \u63a8\u8350\u7cfb\u7edf \u57ce\u5e02\u89c4\u5212 201912\u7b2c18\u6b21 \u00b6 \u62a5\u6570 \u56de\u6536\u7ad9\u9009\u5740 \u5316\u5b66\u65b9\u7a0b\u5f0f \u533a\u5757\u94fe \u9b54\u6570 202006\u7b2c19\u6b21 \u00b6 \u7ebf\u6027\u5206\u7c7b\u5668 \u7a00\u758f\u5411\u91cf Markdown\u6e32\u67d3\u5668 1246 \u4e54\u4e54\u548c\u725b\u725b\u901b\u8d85\u5e02 202009\u7b2c20\u6b21 \u00b6 \u79f0\u68c0\u6d4b\u70b9\u67e5\u8be2 \u98ce\u9669\u4eba\u7fa4\u7b5b\u67e5 \u70b9\u4eae\u6570\u5b57\u4eba\u751f \u661f\u9645\u65c5\u884c \u5bc6\u4fe1\u4e0e\u8ba1\u6570 202012\u7b2c21\u6b21 \u00b6 \u671f\u672b\u9884\u6d4b\u4e4b\u5b89\u5168\u6307\u6570 \u671f\u672b\u9884\u6d4b\u4e4b\u6700\u4f73\u9608\u503c \u5e26\u914d\u989d\u7684\u6587\u4ef6\u7cfb\u7edf \u98df\u6750\u8fd0\u8f93 \u661f\u9645\u65c5\u884c 202104\u7b2c22\u6b21 \u00b6 \u7070\u5ea6\u76f4\u65b9\u56fe \u90bb\u57df\u5747\u503c DHCP\u670d\u52a1\u5668 \u6821\u95e8\u5916\u7684\u6811 \u75ab\u82d7\u8fd0\u8f93 202109\u7b2c23\u6b21 \u00b6 \u6570\u7ec4\u63a8\u5bfc \u975e\u96f6\u6bb5\u5212\u5206 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc \u6536\u96c6\u5361\u724c \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b 202112\u7b2c24\u6b21 \u00b6 \u5e8f\u5217\u67e5\u8be2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3 \u767b\u673a\u724c\u6761\u7801 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c \u6781\u5dee\u8def\u5f84 202203\u7b2c25\u6b21 \u00b6 \u672a\u521d\u59cb\u5316\u8b66\u544a \u51fa\u884c\u8ba1\u5212 \u8ba1\u7b97\u8d44\u6e90\u8c03\u5ea6\u5668 \u901a\u4fe1\u7cfb\u7edf\u7ba1\u7406 \u535a\u5f08\u8bba\u4e0e\u77f3\u5b50\u5408\u5e76 202206\u7b2c26\u6b21 \u00b6 \u5f52\u4e00\u5316\u5904\u7406 \u5bfb\u5b9d\uff01\u5927\u5192\u9669\uff01 \u89d2\u8272\u6388\u6743 \u5149\u7ebf\u8ffd\u8e2a PS\u65e0\u9650\u7248","title":"\u76ee\u5f55"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#_1","text":"\u6ca1\u6709\u8d85\u94fe\u63a5\u7684\u9898\u9762\u4e3a\u672a\u66f4\u65b0\u9898\u89e3\u7684\u9898\u76ee","title":"\u76ee\u5f55"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2013120","text":"\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570 ISBN\u53f7\u7801 \u6700\u5927\u7684\u77e9\u5f62 \u6709\u8da3\u7684\u6570 I\u2019m stuck!","title":"201312\u7b2c0\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2014031","text":"\u76f8\u53cd\u6570 \u7a97\u53e3 \u547d\u4ee4\u884c\u9009\u9879 \u65e0\u7ebf\u7f51\u7edc \u4efb\u52a1\u8c03\u5ea6","title":"201403\u7b2c1\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2014092","text":"\u76f8\u90bb\u6570\u5bf9 \u753b\u56fe \u5b57\u7b26\u4e32\u5339\u914d \u6700\u4f18\u914d\u9910 \u62fc\u56fe","title":"201409\u7b2c2\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2014123","text":"\u95e8\u7981\u7cfb\u7edf Z\u5b57\u5f62\u626b\u63cf \u96c6\u5408\u7ade\u4ef7 \u6700\u4f18\u704c\u6e89 \u8d27\u7269\u8c03\u5ea6","title":"201412\u7b2c3\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2015034","text":"\u56fe\u50cf\u65cb\u8f6c \u6570\u5b57\u6392\u5e8f \u8282\u65e5 \u7f51\u7edc\u5ef6\u65f6 \u6700\u5c0f\u82b1\u8d39","title":"201503\u7b2c4\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2015095","text":"\u6570\u5217\u5206\u6bb5 \u65e5\u671f\u8ba1\u7b97 \u6a21\u677f\u751f\u6210\u7cfb\u7edf \u9ad8\u901f\u516c\u8def \u6700\u4f73\u6587\u7ae0","title":"201509\u7b2c5\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2015126","text":"\u6570\u4f4d\u4e4b\u548c \u6d88\u9664\u7c7b\u6e38\u620f \u753b\u56fe \u9001\u8d27 \u77e9\u9635","title":"201512\u7b2c6\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2016047","text":"\u6298\u70b9\u8ba1\u6570 \u4fc4\u7f57\u65af\u65b9\u5757 \u8def\u5f84\u89e3\u6790 \u6e38\u620f \u7f51\u7edc\u8fde\u63a5","title":"201604\u7b2c7\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2016098","text":"\u6700\u5927\u6ce2\u52a8 \u706b\u8f66\u8d2d\u7968 \u7089\u77f3\u4f20\u8bf4 \u4ea4\u901a\u89c4\u5212 \u796d\u575b","title":"201609\u7b2c8\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#2016129","text":"\u4e2d\u95f4\u6570 \u5de5\u8d44\u8ba1\u7b97 \u6743\u9650\u67e5\u8be2 \u538b\u7f29\u7f16\u7801 \u5361\u724c\u6e38\u620f","title":"201612\u7b2c9\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20170310","text":"\u5206\u86cb\u7cd5 \u5b66\u751f\u6392\u961f Markdown \u5730\u94c1\u4fee\u5efa \u5f15\u6c34\u5165\u57ce","title":"201703\u7b2c10\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20170911","text":"\u6253\u9171\u6cb9 \u516c\u5171\u94a5\u5319\u76d2 JSON\u67e5\u8be2 \u901a\u4fe1\u7f51\u7edc \u9664\u6cd5","title":"201709\u7b2c11\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20171212","text":"\u6700\u5c0f\u5dee\u503c \u6e38\u620f Crontab \u884c\u8f66\u8def\u7ebf \u5546\u8def","title":"201712\u7b2c12\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20180313","text":"\u8df3\u4e00\u8df3 \u78b0\u649e\u7684\u5c0f\u7403 URL\u6620\u5c04 \u68cb\u5c40\u8bc4\u4f30 \u4e8c\u6b21\u6c42\u548c","title":"201803\u7b2c13\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20180914","text":"\u5356\u83dc \u4e70\u83dc \u5143\u7d20\u9009\u62e9\u5668 \u518d\u5356\u83dc \u7ebf\u6027\u9012\u63a8\u5f0f","title":"201809\u7b2c14\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20181215","text":"\u5c0f\u660e\u4e0a\u5b66 \u5c0f\u660e\u653e\u5b66 CIDR\u5408\u5e76 \u6570\u636e\u4e2d\u5fc3 \u7ba1\u9053\u6e05\u6d01","title":"201812\u7b2c15\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20190316","text":"\u5c0f\u4e2d\u5927 \u4e8c\u5341\u56db\u70b9 \u635f\u574f\u7684RAID5 \u6d88\u606f\u4f20\u9012\u63a5\u53e3 317\u53f7\u5b50\u4efb\u52a1","title":"201903\u7b2c16\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20190917","text":"\u5c0f\u660e\u79cd\u82f9\u679c \u5c0f\u660e\u79cd\u82f9\u679c\uff08\u7eed\uff09 \u5b57\u7b26\u753b \u63a8\u8350\u7cfb\u7edf \u57ce\u5e02\u89c4\u5212","title":"201909\u7b2c17\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20191218","text":"\u62a5\u6570 \u56de\u6536\u7ad9\u9009\u5740 \u5316\u5b66\u65b9\u7a0b\u5f0f \u533a\u5757\u94fe \u9b54\u6570","title":"201912\u7b2c18\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20200619","text":"\u7ebf\u6027\u5206\u7c7b\u5668 \u7a00\u758f\u5411\u91cf Markdown\u6e32\u67d3\u5668 1246 \u4e54\u4e54\u548c\u725b\u725b\u901b\u8d85\u5e02","title":"202006\u7b2c19\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20200920","text":"\u79f0\u68c0\u6d4b\u70b9\u67e5\u8be2 \u98ce\u9669\u4eba\u7fa4\u7b5b\u67e5 \u70b9\u4eae\u6570\u5b57\u4eba\u751f \u661f\u9645\u65c5\u884c \u5bc6\u4fe1\u4e0e\u8ba1\u6570","title":"202009\u7b2c20\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20201221","text":"\u671f\u672b\u9884\u6d4b\u4e4b\u5b89\u5168\u6307\u6570 \u671f\u672b\u9884\u6d4b\u4e4b\u6700\u4f73\u9608\u503c \u5e26\u914d\u989d\u7684\u6587\u4ef6\u7cfb\u7edf \u98df\u6750\u8fd0\u8f93 \u661f\u9645\u65c5\u884c","title":"202012\u7b2c21\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20210422","text":"\u7070\u5ea6\u76f4\u65b9\u56fe \u90bb\u57df\u5747\u503c DHCP\u670d\u52a1\u5668 \u6821\u95e8\u5916\u7684\u6811 \u75ab\u82d7\u8fd0\u8f93","title":"202104\u7b2c22\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20210923","text":"\u6570\u7ec4\u63a8\u5bfc \u975e\u96f6\u6bb5\u5212\u5206 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc \u6536\u96c6\u5361\u724c \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b","title":"202109\u7b2c23\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20211224","text":"\u5e8f\u5217\u67e5\u8be2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3 \u767b\u673a\u724c\u6761\u7801 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c \u6781\u5dee\u8def\u5f84","title":"202112\u7b2c24\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20220325","text":"\u672a\u521d\u59cb\u5316\u8b66\u544a \u51fa\u884c\u8ba1\u5212 \u8ba1\u7b97\u8d44\u6e90\u8c03\u5ea6\u5668 \u901a\u4fe1\u7cfb\u7edf\u7ba1\u7406 \u535a\u5f08\u8bba\u4e0e\u77f3\u5b50\u5408\u5e76","title":"202203\u7b2c25\u6b21"},{"location":"CSP/%E7%9B%AE%E5%BD%95/#20220626","text":"\u5f52\u4e00\u5316\u5904\u7406 \u5bfb\u5b9d\uff01\u5927\u5192\u9669\uff01 \u89d2\u8272\u6388\u6743 \u5149\u7ebf\u8ffd\u8e2a PS\u65e0\u9650\u7248","title":"202206\u7b2c26\u6b21"},{"location":"CSP/%E7%AC%AC0%E6%AC%A1/","text":"\u89c6\u9891\u9898\u89e3 CSP\u8ba4\u8bc1\u7b2c0\u6b21\u89c6\u9891\u9898\u89e3 \u7b2c1\u9898 \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570 \u00b6 \u9898\u76ee\u94fe\u63a5: \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570 TAG: \u6876 \u54c8\u5e0c \u601d\u8def: \u6570\u7ec4\u6a21\u62df\u6876\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 10010 ; int a [ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ){ int t ; cin >> t ; a [ t ] ++ ; } int ans = 1 ; for ( int i = 1 ; i <= 10000 ; i ++ ){ if ( a [ i ] > a [ ans ]){ ans = i ; } } cout << ans ; return 0 ; } \u7b2c2\u9898 ISBN\u53f7\u7801 \u00b6 \u9898\u76ee\u94fe\u63a5: ISBN\u53f7\u7801 TAG: \u6a21\u62df \u5b57\u7b26\u4e32 \u601d\u8def: \u76f4\u63a5\u6309\u7167\u9898\u610f\u6a21\u62df\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; int main (){ string s ; cin >> s ; int sum = 0 , n = ( int ) s . size (), cnt = 1 ; for ( int i = 0 ; i < n -1 ; i ++ ){ if ( s [ i ] == '-' ) continue ; sum += ( s [ i ] - '0' ) * cnt ++ ; } sum %= 11 ; if ( sum == s [ n -1 ] - '0' || ( sum == 10 && s [ n -1 ] == 'X' )){ cout << \"Right\" ; } else { cout << s . substr ( 0 , 12 ); if ( sum == 10 ) cout << 'X' ; else cout << sum ; } return 0 ; } \u7b2c3\u9898 \u6700\u5927\u7684\u77e9\u5f62 \u00b6 \u9898\u76ee\u94fe\u63a5: \u6700\u5927\u7684\u77e9\u5f62 TAG: \u66b4\u529b \u5355\u8c03\u6808(\u4e3aO(n)\u505a\u6cd5\uff0c\u6b64\u9898\u4e0d\u9700\u8981) \u601d\u8def: \u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u76f4\u63a5\u66b4\u529b\u904d\u5386\u6bcf\u4e2a\u77e9\u5f62\u80fd\u7ec4\u6210\u7684\u6700\u5927\u77e9\u5f62\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ){ int cnt = 1 ; for ( int j = i -1 ; ~ j ; j -- ){ if ( a [ j ] < a [ i ]) break ; cnt ++ ; } for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ i ]) break ; cnt ++ ; } ans = max ( ans , cnt * a [ i ]); } cout << ans ; return 0 ; } \u7b2c4\u9898 \u6709\u8da3\u7684\u6570 \u00b6 \u9898\u76ee\u94fe\u63a5: \u6709\u8da3\u7684\u6570 TAG: \u7ec4\u5408\u6570\u5b66 \u7ec4\u5408\u6570 \u601d\u8def: \u7b80\u5355\u7684\u7ec4\u5408\u6570\u5b66\u3002\u4ee3\u7801\u4e2d\u9700\u8981\u6c42\u7ec4\u5408\u6570\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u76f4\u63a5\u9012\u63a8\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int N = 1010 , mod = 1e9 + 7 ; ll c [ N ][ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i <= n ; i ++ ){ for ( int j = 0 ; j <= i ; j ++ ){ if ( ! j ) c [ i ][ j ] = 1 ; else c [ i ][ j ] = ( c [ i -1 ][ j ] + c [ i -1 ][ j -1 ]) % mod ; } } ll ans = 0 ; for ( int x = 2 ; x <= n -2 ; x ++ ){ ans = ( ans + c [ n -1 ][ x ] * ( x -1 ) * ( n - x -1 )) % mod ; } cout << ans ; return 0 ; } \u7b2c5\u9898 I\u2019m stuck! \u00b6 \u9898\u76ee\u94fe\u63a5: I\u2019m stuck! TAG: DFS \u601d\u8def: DFS\u6a21\u677f\u9898\uff0c\u4e24\u6b21DFS\u5206\u522b\u6c42\u51fa\u8d77\u70b9\u548c\u7ec8\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 55 ; int n , m ; char g [ N ][ N ]; int dx [ 4 ] = { -1 , 0 , 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , -1 }; bool st1 [ N ][ N ], st2 [ N ][ N ]; bool check ( int x , int y , int k ){ char ch = g [ x ][ y ]; if ( ch == '+' || ch == 'S' || ch == 'T' ) return true ; if ( ch == '-' && k % 2 == 1 ) return true ; if ( ch == '|' && k % 2 == 0 ) return true ; if ( ch == '.' && k == 2 ) return true ; return false ; } void dfs1 ( int x , int y ){ st1 [ x ][ y ] = true ; for ( int i = 0 ; i < 4 ; i ++ ){ int nx = x + dx [ i ], ny = y + dy [ i ]; if ( nx < 0 || nx >= n || ny < 0 || ny >= m || g [ nx ][ ny ] == '#' || st1 [ nx ][ ny ]) continue ; if ( check ( x , y , i )) dfs1 ( nx , ny ); } } void dfs2 ( int x , int y ){ st2 [ x ][ y ] = true ; for ( int i = 0 ; i < 4 ; i ++ ){ int nx = x + dx [ i ], ny = y + dy [ i ]; if ( nx < 0 || nx >= n || ny < 0 || ny >= m || g [ nx ][ ny ] == '#' || st2 [ nx ][ ny ]) continue ; if ( check ( nx , ny , i ^ 2 )) dfs2 ( nx , ny ); } } int main (){ cin >> n >> m ; for ( int i = 0 ; i < n ; i ++ ) cin >> g [ i ]; int tx , ty ; for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < m ; j ++ ){ if ( g [ i ][ j ] == 'S' ) dfs1 ( i , j ); else if ( g [ i ][ j ] == 'T' ){ tx = i , ty = j ; dfs2 ( i , j ); } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < m ; j ++ ){ if ( st1 [ i ][ j ] &&! st2 [ i ][ j ]){ ans ++ ; } } } if ( ! st1 [ tx ][ ty ]) cout << \"I'm stuck!\" ; else cout << ans ; return 0 ; }","title":"201312\u7b2c0\u6b21"},{"location":"CSP/%E7%AC%AC0%E6%AC%A1/#1","text":"\u9898\u76ee\u94fe\u63a5: \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570 TAG: \u6876 \u54c8\u5e0c \u601d\u8def: \u6570\u7ec4\u6a21\u62df\u6876\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 10010 ; int a [ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ){ int t ; cin >> t ; a [ t ] ++ ; } int ans = 1 ; for ( int i = 1 ; i <= 10000 ; i ++ ){ if ( a [ i ] > a [ ans ]){ ans = i ; } } cout << ans ; return 0 ; }","title":"\u7b2c1\u9898 \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570"},{"location":"CSP/%E7%AC%AC0%E6%AC%A1/#2-isbn","text":"\u9898\u76ee\u94fe\u63a5: ISBN\u53f7\u7801 TAG: \u6a21\u62df \u5b57\u7b26\u4e32 \u601d\u8def: \u76f4\u63a5\u6309\u7167\u9898\u610f\u6a21\u62df\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; int main (){ string s ; cin >> s ; int sum = 0 , n = ( int ) s . size (), cnt = 1 ; for ( int i = 0 ; i < n -1 ; i ++ ){ if ( s [ i ] == '-' ) continue ; sum += ( s [ i ] - '0' ) * cnt ++ ; } sum %= 11 ; if ( sum == s [ n -1 ] - '0' || ( sum == 10 && s [ n -1 ] == 'X' )){ cout << \"Right\" ; } else { cout << s . substr ( 0 , 12 ); if ( sum == 10 ) cout << 'X' ; else cout << sum ; } return 0 ; }","title":"\u7b2c2\u9898 ISBN\u53f7\u7801"},{"location":"CSP/%E7%AC%AC0%E6%AC%A1/#3","text":"\u9898\u76ee\u94fe\u63a5: \u6700\u5927\u7684\u77e9\u5f62 TAG: \u66b4\u529b \u5355\u8c03\u6808(\u4e3aO(n)\u505a\u6cd5\uff0c\u6b64\u9898\u4e0d\u9700\u8981) \u601d\u8def: \u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u76f4\u63a5\u66b4\u529b\u904d\u5386\u6bcf\u4e2a\u77e9\u5f62\u80fd\u7ec4\u6210\u7684\u6700\u5927\u77e9\u5f62\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ]; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ){ int cnt = 1 ; for ( int j = i -1 ; ~ j ; j -- ){ if ( a [ j ] < a [ i ]) break ; cnt ++ ; } for ( int j = i + 1 ; j < n ; j ++ ){ if ( a [ j ] < a [ i ]) break ; cnt ++ ; } ans = max ( ans , cnt * a [ i ]); } cout << ans ; return 0 ; }","title":"\u7b2c3\u9898 \u6700\u5927\u7684\u77e9\u5f62"},{"location":"CSP/%E7%AC%AC0%E6%AC%A1/#4","text":"\u9898\u76ee\u94fe\u63a5: \u6709\u8da3\u7684\u6570 TAG: \u7ec4\u5408\u6570\u5b66 \u7ec4\u5408\u6570 \u601d\u8def: \u7b80\u5355\u7684\u7ec4\u5408\u6570\u5b66\u3002\u4ee3\u7801\u4e2d\u9700\u8981\u6c42\u7ec4\u5408\u6570\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u76f4\u63a5\u9012\u63a8\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int N = 1010 , mod = 1e9 + 7 ; ll c [ N ][ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i <= n ; i ++ ){ for ( int j = 0 ; j <= i ; j ++ ){ if ( ! j ) c [ i ][ j ] = 1 ; else c [ i ][ j ] = ( c [ i -1 ][ j ] + c [ i -1 ][ j -1 ]) % mod ; } } ll ans = 0 ; for ( int x = 2 ; x <= n -2 ; x ++ ){ ans = ( ans + c [ n -1 ][ x ] * ( x -1 ) * ( n - x -1 )) % mod ; } cout << ans ; return 0 ; }","title":"\u7b2c4\u9898 \u6709\u8da3\u7684\u6570"},{"location":"CSP/%E7%AC%AC0%E6%AC%A1/#5-im-stuck","text":"\u9898\u76ee\u94fe\u63a5: I\u2019m stuck! TAG: DFS \u601d\u8def: DFS\u6a21\u677f\u9898\uff0c\u4e24\u6b21DFS\u5206\u522b\u6c42\u51fa\u8d77\u70b9\u548c\u7ec8\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 55 ; int n , m ; char g [ N ][ N ]; int dx [ 4 ] = { -1 , 0 , 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , -1 }; bool st1 [ N ][ N ], st2 [ N ][ N ]; bool check ( int x , int y , int k ){ char ch = g [ x ][ y ]; if ( ch == '+' || ch == 'S' || ch == 'T' ) return true ; if ( ch == '-' && k % 2 == 1 ) return true ; if ( ch == '|' && k % 2 == 0 ) return true ; if ( ch == '.' && k == 2 ) return true ; return false ; } void dfs1 ( int x , int y ){ st1 [ x ][ y ] = true ; for ( int i = 0 ; i < 4 ; i ++ ){ int nx = x + dx [ i ], ny = y + dy [ i ]; if ( nx < 0 || nx >= n || ny < 0 || ny >= m || g [ nx ][ ny ] == '#' || st1 [ nx ][ ny ]) continue ; if ( check ( x , y , i )) dfs1 ( nx , ny ); } } void dfs2 ( int x , int y ){ st2 [ x ][ y ] = true ; for ( int i = 0 ; i < 4 ; i ++ ){ int nx = x + dx [ i ], ny = y + dy [ i ]; if ( nx < 0 || nx >= n || ny < 0 || ny >= m || g [ nx ][ ny ] == '#' || st2 [ nx ][ ny ]) continue ; if ( check ( nx , ny , i ^ 2 )) dfs2 ( nx , ny ); } } int main (){ cin >> n >> m ; for ( int i = 0 ; i < n ; i ++ ) cin >> g [ i ]; int tx , ty ; for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < m ; j ++ ){ if ( g [ i ][ j ] == 'S' ) dfs1 ( i , j ); else if ( g [ i ][ j ] == 'T' ){ tx = i , ty = j ; dfs2 ( i , j ); } } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < m ; j ++ ){ if ( st1 [ i ][ j ] &&! st2 [ i ][ j ]){ ans ++ ; } } } if ( ! st1 [ tx ][ ty ]) cout << \"I'm stuck!\" ; else cout << ans ; return 0 ; }","title":"\u7b2c5\u9898 I\u2019m stuck!"},{"location":"CSP/%E7%AC%AC1%E6%AC%A1/","text":"\u89c6\u9891\u9898\u89e3 CSP\u8ba4\u8bc1\u7b2c1\u6b21\u89c6\u9891\u9898\u89e3 \u7b2c1\u9898 \u76f8\u53cd\u6570 \u00b6 \u9898\u76ee\u94fe\u63a5: \u76f8\u53cd\u6570 TAG: \u6876 \u54c8\u5e0c \u601d\u8def: \u5f00\u4e24\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u4e24\u4e2a\u6876\u5206\u522b\u8bb0\u5f55\u6b63\u6570\u548c\u8d1f\u6570\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ], b [ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ){ int t ; cin >> t ; if ( t > 0 ) a [ t ] ++ ; else b [ - t ] ++ ; } int ans = 0 ; for ( int i = 1 ; i <= 1000 ; i ++ ){ if ( a [ i ] && b [ i ]){ ans ++ ; } } cout << ans ; return 0 ; } \u7b2c2\u9898 \u7a97\u53e3 \u00b6 \u9898\u76ee\u94fe\u63a5: \u7a97\u53e3 TAG: \u6a21\u62df \u601d\u8def: \u6570\u7ec4\u6a21\u62df\u5c4f\u5e55\u548c\u7a97\u53e3\u5373\u53ef\uff0c0\u4ee3\u8868\u6ca1\u6709\u7a97\u53e3\uff0ci\u4ee3\u8868\u7a97\u53e3\u5e8f\u53f7\u4e3ai \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 3000 ; struct Node { int id , x1 , y1 , x2 , y2 ; } node [ 11 ]; int w [ N ][ N ]; void change ( int i ){ for ( int j = node [ i ]. x1 ; j <= node [ i ]. x2 ; j ++ ){ for ( int k = node [ i ]. y1 ; k <= node [ i ]. y2 ; k ++ ){ w [ j ][ k ] = node [ i ]. id ; } } } int main (){ int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ){ cin >> node [ i ]. x1 >> node [ i ]. y1 >> node [ i ]. x2 >> node [ i ]. y2 ; node [ i ]. id = i ; change ( i ); } while ( m -- ){ int x , y ; cin >> x >> y ; if ( ! w [ x ][ y ]) cout << \"IGNORED \\n \" ; else { cout << w [ x ][ y ] << \" \\n \" ; change ( w [ x ][ y ]); } } return 0 ; } \u7b2c3\u9898 \u547d\u4ee4\u884c\u9009\u9879 \u00b6 \u9898\u76ee\u94fe\u63a5: \u547d\u4ee4\u884c\u9009\u9879 TAG: STL \u5927\u6a21\u62df \u601d\u8def: \u8bfb\u61c2\u9898\u610f\u5c31\u5bb9\u6613\u4e86\uff0c\u4f7f\u7528stringstream\u80fd\u591f\u5927\u5927\u51cf\u5c11\u4ee3\u7801\u91cf \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 30 ; bool a [ N ], b [ N ]; string ans [ N ]; int main (){ string s ; cin >> s ; for ( int i = 0 ; s [ i ]; i ++ ){ if ( i + 1 < ( int ) s . size () && s [ i + 1 ] == ':' ){ b [ s [ i ] - 'a' ] = true ; i ++ ; } else { a [ s [ i ] - 'a' ] = true ; } } int n ; cin >> n ; getchar (); for ( int i = 1 ; i <= n ; i ++ ){ cout << \"Case \" << i << \":\" ; getline ( cin , s ); stringstream ss ( s ); vector < string > ops ; while ( ss >> s ) ops . push_back ( s ); for ( int i = 0 ; i < 26 ; i ++ ) ans [ i ]. clear (); for ( int i = 1 ; i < ( int ) ops . size (); i ++ ){ if ( ops [ i ][ 0 ] != '-' || ops [ i ][ 1 ] < 'a' || ops [ i ][ 1 ] > 'z' || ( int ) ops [ i ]. size () != 2 ) break ; int k = ops [ i ][ 1 ] - 'a' ; if ( a [ k ]) ans [ k ] = \"*\" ; else if ( b [ k ] && i + 1 < ( int ) ops . size ()) ans [ k ] = ops [ i + 1 ], i ++ ; else break ; } for ( int i = 0 ; i < 26 ; i ++ ){ if ( ans [ i ]. size ()){ cout << \" -\" << ( char )( i + 'a' ); if ( b [ i ]) cout << \" \" << ans [ i ]; } } cout << \" \\n \" ; } return 0 ; } \u7b2c4\u9898 \u65e0\u7ebf\u7f51\u7edc \u00b6 \u9898\u76ee\u94fe\u63a5: \u65e0\u7ebf\u7f51\u7edc TAG: \u5355\u6e90\u6700\u77ed\u8def BFS \u601d\u8def: \u5c06\u524dn\u4e2a\u56fa\u5b9a\u70b9,m\u4e2a\u5f85\u9009\u62e9\u70b9\u5b58\u5165\u8282\u70b9\u6570\u7ec4p,\u4e4b\u540e\u8ba1\u7b97\u6570\u7ec4\u4e2d\u6bcf\u4e24\u4e2a\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u8ddd\u79bb\u5c0f\u4e8er\uff0c\u5c31\u5728\u8fd9\u4e24\u70b9\u4e4b\u95f4\u5efa\u7acb\u4e00\u6761\u65e0\u5411\u8fb9\uff1b\u5173\u7cfb\u5efa\u7acb\u540e\u8fdb\u884cbfs\uff1bdist[i][j]\u8868\u793a\u7b2ci\u4e2a\u70b9\u7684\u8def\u5f84\u4e2d\u589e\u8bbe\u8def\u7531\u5668\u7684\u6570\u91cf\u4e3aj\u7684\u6700\u77ed\u8ddd\u79bb\uff1b\u7531\u4e8e\u9898\u76ee\u8be2\u95ee\u7684\u662f\u8def\u5f84\u4e0a\u8def\u7531\u5668\u7684\u6700\u5c11\u6570\u91cf\uff0c\u5b9e\u9645\u4e0d\u7528\u8003\u8651\u8ba1\u7b97\u8def\u5f84\u957f\u5ea6\uff0c\u53ea\u9700\u8981\u628a\u70b9\u7684\u6570\u91cf\u5f53\u505a\u6240\u8c13\u7684\u957f\u5ea6\u8fdb\u884c\u8ba1\u7b97\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; typedef pair < int , int > PII ; typedef long long ll ; const int N = 210 , M = 40100 ; int n , m , k , r ; int h [ N ], e [ M ], ne [ M ], idx ; PII p [ N ]; int dist [ N ][ N ]; void add ( int a , int b ){ e [ idx ] = b , ne [ idx ] = h [ a ], h [ a ] = idx ++ ; } bool check ( PII a , PII b ){ ll x = a . first - b . first ; ll y = a . second - b . second ; return x * x + y * y <= ( ll ) r * r ; } int bfs (){ queue < PII > q ; q . push ({ 1 , 0 }); memset ( dist , 0x3f , sizeof dist ); dist [ 1 ][ 0 ] = 0 ; while ( ! q . empty ()){ PII t = q . front (); q . pop (); for ( int i = h [ t . first ]; ~ i ; i = ne [ i ]){ int x = e [ i ]; int y = t . second ; if ( x > n ) y ++ ; if ( y <= k ){ if ( dist [ x ][ y ] > dist [ t . first ][ t . second ] + 1 ){ dist [ x ][ y ] = dist [ t . first ][ t . second ] + 1 ; q . push ({ x , y }); } } } } int res = 1e8 ; for ( int i = 0 ; i <= k ; i ++ ){ res = min ( res , dist [ 2 ][ i ]); } return res -1 ; } int main (){ cin >> n >> m >> k >> r ; memset ( h , -1 , sizeof h ); for ( int i = 1 ; i <= n + m ; i ++ ) cin >> p [ i ]. first >> p [ i ]. second ; for ( int i = 1 ; i <= n + m ; i ++ ){ for ( int j = i + 1 ; j <= n + m ; j ++ ){ if ( check ( p [ i ], p [ j ])){ add ( i , j ); add ( j , i ); } } } cout << bfs (); return 0 ; } \u7b2c5\u9898 \u4efb\u52a1\u8c03\u5ea6 \u00b6 \u9898\u76ee\u94fe\u63a5: \u4efb\u52a1\u8c03\u5ea6 TAG: DP \u601d\u8def: \u5148\u4e3a\u6bcf\u4e2a\u4efb\u52a1\u57284\u79cd\u8d44\u6e90\u914d\u7f6e\u4e2d\u9009\u62e9\u4e00\u79cd\uff1b\u518d\u5b89\u6392\u6240\u6709\u4efb\u52a1\u7684\u6267\u884c\u987a\u5e8f\u5373\u53ef \u7ecf\u8fc7\u5206\u6790\u53ef\u5f97\uff1a\u4e00\u4e2a\u7a0b\u5e8f\u81f3\u5c11\u4f1a\u5360\u7528\u4e00\u4e2aCPU\uff0c\u4e00\u5171\u53ea\u6709\u4e24\u4e2aCPU\uff0c\u6240\u4ee5\u540c\u65f6\u6700\u591a\u6709\u4e24\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u3002\u4e14\u5982\u679c\u540c\u65f6\u6709\u4e24\u4e2a\u7a0b\u5e8f\u8fd0\u884c\uff0c\u90a3\u4e48\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u4f1a\u5360\u7528\u4e00\u4e2aCPU \u53ef\u4ee5\u5c06\u4e24\u4e2aCPU\u5206\u79bb\uff0c\u8ba4\u4e3a\u5176\u4e2d\u4e00\u4e2aCPU\u9644\u5e26GPU\uff0c\u4e0d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd \u63a5\u4e0b\u6765\u8003\u8651\u4efb\u52a1\u987a\u5e8f\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u5360\u7528\u5168\u90e8\u8d44\u6e90\u7684\u4efb\u52a1\uff0c\u53ef\u4ee5\u8c03\u5ea6\u5176\u5728\u6700\u5f00\u59cb\u5c31\u8fd0\u884c\u3002\u8fd9\u6837\uff0c\u5728\u5f00\u59cb\u7684\u4e00\u6bb5\u65f6\u95f4\uff0c\u8d44\u6e90\u662f\u6ee1\u8f7d\u7684\uff0c\u4e0d\u9700\u8981\u7b49\u5f85\u8d44\u6e90\u91ca\u653e\u5c31\u53ef\u4ee5\u8fd0\u884c\u3002 \u800c\u5bf9\u4e8e\u5176\u5b83\u4efb\u52a1\uff0c\u7531\u4e8e\u4efb\u52a1\u4e4b\u95f4\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u800c\u53c8\u5206\u522b\u53ea\u5360\u7528\u4e00\u4e2aCPU+GPU\u6216\u4e00\u4e2aCPU\uff0c\u4ee4\u5176\u4f9d\u6b21\u6267\u884c\u5373\u53ef\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int main (){ int n , a , b , c , d ; cin >> n ; int f [ N ][ N * 10 ]; memset ( f , 0x3f , sizeof f ); f [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ cin >> a >> b >> c >> d ; c = min ( a , c ); b = min ( min ( b , d ), c ); for ( int j = 0 ; j <= i * 10 ; j ++ ){ f [ i ][ j ] = f [ i -1 ][ j ] + a ; if ( j >= c ) f [ i ][ j ] = min ( f [ i ][ j ], f [ i -1 ][ j - c ]); if ( j >= b ) f [ i ][ j ] = min ( f [ i ][ j ], f [ i -1 ][ j - b ] + b ); } } int ans = 0x3f3f3f3f ; for ( int i = 0 ; i <= n * 10 ; i ++ ){ ans = min ( ans , max ( i , f [ n ][ i ])); } cout << ans ; return 0 ; }","title":"201403\u7b2c1\u6b21"},{"location":"CSP/%E7%AC%AC1%E6%AC%A1/#1","text":"\u9898\u76ee\u94fe\u63a5: \u76f8\u53cd\u6570 TAG: \u6876 \u54c8\u5e0c \u601d\u8def: \u5f00\u4e24\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u4e24\u4e2a\u6876\u5206\u522b\u8bb0\u5f55\u6b63\u6570\u548c\u8d1f\u6570\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ], b [ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ){ int t ; cin >> t ; if ( t > 0 ) a [ t ] ++ ; else b [ - t ] ++ ; } int ans = 0 ; for ( int i = 1 ; i <= 1000 ; i ++ ){ if ( a [ i ] && b [ i ]){ ans ++ ; } } cout << ans ; return 0 ; }","title":"\u7b2c1\u9898 \u76f8\u53cd\u6570"},{"location":"CSP/%E7%AC%AC1%E6%AC%A1/#2","text":"\u9898\u76ee\u94fe\u63a5: \u7a97\u53e3 TAG: \u6a21\u62df \u601d\u8def: \u6570\u7ec4\u6a21\u62df\u5c4f\u5e55\u548c\u7a97\u53e3\u5373\u53ef\uff0c0\u4ee3\u8868\u6ca1\u6709\u7a97\u53e3\uff0ci\u4ee3\u8868\u7a97\u53e3\u5e8f\u53f7\u4e3ai \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 3000 ; struct Node { int id , x1 , y1 , x2 , y2 ; } node [ 11 ]; int w [ N ][ N ]; void change ( int i ){ for ( int j = node [ i ]. x1 ; j <= node [ i ]. x2 ; j ++ ){ for ( int k = node [ i ]. y1 ; k <= node [ i ]. y2 ; k ++ ){ w [ j ][ k ] = node [ i ]. id ; } } } int main (){ int n , m ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ){ cin >> node [ i ]. x1 >> node [ i ]. y1 >> node [ i ]. x2 >> node [ i ]. y2 ; node [ i ]. id = i ; change ( i ); } while ( m -- ){ int x , y ; cin >> x >> y ; if ( ! w [ x ][ y ]) cout << \"IGNORED \\n \" ; else { cout << w [ x ][ y ] << \" \\n \" ; change ( w [ x ][ y ]); } } return 0 ; }","title":"\u7b2c2\u9898 \u7a97\u53e3"},{"location":"CSP/%E7%AC%AC1%E6%AC%A1/#3","text":"\u9898\u76ee\u94fe\u63a5: \u547d\u4ee4\u884c\u9009\u9879 TAG: STL \u5927\u6a21\u62df \u601d\u8def: \u8bfb\u61c2\u9898\u610f\u5c31\u5bb9\u6613\u4e86\uff0c\u4f7f\u7528stringstream\u80fd\u591f\u5927\u5927\u51cf\u5c11\u4ee3\u7801\u91cf \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 30 ; bool a [ N ], b [ N ]; string ans [ N ]; int main (){ string s ; cin >> s ; for ( int i = 0 ; s [ i ]; i ++ ){ if ( i + 1 < ( int ) s . size () && s [ i + 1 ] == ':' ){ b [ s [ i ] - 'a' ] = true ; i ++ ; } else { a [ s [ i ] - 'a' ] = true ; } } int n ; cin >> n ; getchar (); for ( int i = 1 ; i <= n ; i ++ ){ cout << \"Case \" << i << \":\" ; getline ( cin , s ); stringstream ss ( s ); vector < string > ops ; while ( ss >> s ) ops . push_back ( s ); for ( int i = 0 ; i < 26 ; i ++ ) ans [ i ]. clear (); for ( int i = 1 ; i < ( int ) ops . size (); i ++ ){ if ( ops [ i ][ 0 ] != '-' || ops [ i ][ 1 ] < 'a' || ops [ i ][ 1 ] > 'z' || ( int ) ops [ i ]. size () != 2 ) break ; int k = ops [ i ][ 1 ] - 'a' ; if ( a [ k ]) ans [ k ] = \"*\" ; else if ( b [ k ] && i + 1 < ( int ) ops . size ()) ans [ k ] = ops [ i + 1 ], i ++ ; else break ; } for ( int i = 0 ; i < 26 ; i ++ ){ if ( ans [ i ]. size ()){ cout << \" -\" << ( char )( i + 'a' ); if ( b [ i ]) cout << \" \" << ans [ i ]; } } cout << \" \\n \" ; } return 0 ; }","title":"\u7b2c3\u9898 \u547d\u4ee4\u884c\u9009\u9879"},{"location":"CSP/%E7%AC%AC1%E6%AC%A1/#4","text":"\u9898\u76ee\u94fe\u63a5: \u65e0\u7ebf\u7f51\u7edc TAG: \u5355\u6e90\u6700\u77ed\u8def BFS \u601d\u8def: \u5c06\u524dn\u4e2a\u56fa\u5b9a\u70b9,m\u4e2a\u5f85\u9009\u62e9\u70b9\u5b58\u5165\u8282\u70b9\u6570\u7ec4p,\u4e4b\u540e\u8ba1\u7b97\u6570\u7ec4\u4e2d\u6bcf\u4e24\u4e2a\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u8ddd\u79bb\u5c0f\u4e8er\uff0c\u5c31\u5728\u8fd9\u4e24\u70b9\u4e4b\u95f4\u5efa\u7acb\u4e00\u6761\u65e0\u5411\u8fb9\uff1b\u5173\u7cfb\u5efa\u7acb\u540e\u8fdb\u884cbfs\uff1bdist[i][j]\u8868\u793a\u7b2ci\u4e2a\u70b9\u7684\u8def\u5f84\u4e2d\u589e\u8bbe\u8def\u7531\u5668\u7684\u6570\u91cf\u4e3aj\u7684\u6700\u77ed\u8ddd\u79bb\uff1b\u7531\u4e8e\u9898\u76ee\u8be2\u95ee\u7684\u662f\u8def\u5f84\u4e0a\u8def\u7531\u5668\u7684\u6700\u5c11\u6570\u91cf\uff0c\u5b9e\u9645\u4e0d\u7528\u8003\u8651\u8ba1\u7b97\u8def\u5f84\u957f\u5ea6\uff0c\u53ea\u9700\u8981\u628a\u70b9\u7684\u6570\u91cf\u5f53\u505a\u6240\u8c13\u7684\u957f\u5ea6\u8fdb\u884c\u8ba1\u7b97\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; typedef pair < int , int > PII ; typedef long long ll ; const int N = 210 , M = 40100 ; int n , m , k , r ; int h [ N ], e [ M ], ne [ M ], idx ; PII p [ N ]; int dist [ N ][ N ]; void add ( int a , int b ){ e [ idx ] = b , ne [ idx ] = h [ a ], h [ a ] = idx ++ ; } bool check ( PII a , PII b ){ ll x = a . first - b . first ; ll y = a . second - b . second ; return x * x + y * y <= ( ll ) r * r ; } int bfs (){ queue < PII > q ; q . push ({ 1 , 0 }); memset ( dist , 0x3f , sizeof dist ); dist [ 1 ][ 0 ] = 0 ; while ( ! q . empty ()){ PII t = q . front (); q . pop (); for ( int i = h [ t . first ]; ~ i ; i = ne [ i ]){ int x = e [ i ]; int y = t . second ; if ( x > n ) y ++ ; if ( y <= k ){ if ( dist [ x ][ y ] > dist [ t . first ][ t . second ] + 1 ){ dist [ x ][ y ] = dist [ t . first ][ t . second ] + 1 ; q . push ({ x , y }); } } } } int res = 1e8 ; for ( int i = 0 ; i <= k ; i ++ ){ res = min ( res , dist [ 2 ][ i ]); } return res -1 ; } int main (){ cin >> n >> m >> k >> r ; memset ( h , -1 , sizeof h ); for ( int i = 1 ; i <= n + m ; i ++ ) cin >> p [ i ]. first >> p [ i ]. second ; for ( int i = 1 ; i <= n + m ; i ++ ){ for ( int j = i + 1 ; j <= n + m ; j ++ ){ if ( check ( p [ i ], p [ j ])){ add ( i , j ); add ( j , i ); } } } cout << bfs (); return 0 ; }","title":"\u7b2c4\u9898 \u65e0\u7ebf\u7f51\u7edc"},{"location":"CSP/%E7%AC%AC1%E6%AC%A1/#5","text":"\u9898\u76ee\u94fe\u63a5: \u4efb\u52a1\u8c03\u5ea6 TAG: DP \u601d\u8def: \u5148\u4e3a\u6bcf\u4e2a\u4efb\u52a1\u57284\u79cd\u8d44\u6e90\u914d\u7f6e\u4e2d\u9009\u62e9\u4e00\u79cd\uff1b\u518d\u5b89\u6392\u6240\u6709\u4efb\u52a1\u7684\u6267\u884c\u987a\u5e8f\u5373\u53ef \u7ecf\u8fc7\u5206\u6790\u53ef\u5f97\uff1a\u4e00\u4e2a\u7a0b\u5e8f\u81f3\u5c11\u4f1a\u5360\u7528\u4e00\u4e2aCPU\uff0c\u4e00\u5171\u53ea\u6709\u4e24\u4e2aCPU\uff0c\u6240\u4ee5\u540c\u65f6\u6700\u591a\u6709\u4e24\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u3002\u4e14\u5982\u679c\u540c\u65f6\u6709\u4e24\u4e2a\u7a0b\u5e8f\u8fd0\u884c\uff0c\u90a3\u4e48\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u4f1a\u5360\u7528\u4e00\u4e2aCPU \u53ef\u4ee5\u5c06\u4e24\u4e2aCPU\u5206\u79bb\uff0c\u8ba4\u4e3a\u5176\u4e2d\u4e00\u4e2aCPU\u9644\u5e26GPU\uff0c\u4e0d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd \u63a5\u4e0b\u6765\u8003\u8651\u4efb\u52a1\u987a\u5e8f\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u5360\u7528\u5168\u90e8\u8d44\u6e90\u7684\u4efb\u52a1\uff0c\u53ef\u4ee5\u8c03\u5ea6\u5176\u5728\u6700\u5f00\u59cb\u5c31\u8fd0\u884c\u3002\u8fd9\u6837\uff0c\u5728\u5f00\u59cb\u7684\u4e00\u6bb5\u65f6\u95f4\uff0c\u8d44\u6e90\u662f\u6ee1\u8f7d\u7684\uff0c\u4e0d\u9700\u8981\u7b49\u5f85\u8d44\u6e90\u91ca\u653e\u5c31\u53ef\u4ee5\u8fd0\u884c\u3002 \u800c\u5bf9\u4e8e\u5176\u5b83\u4efb\u52a1\uff0c\u7531\u4e8e\u4efb\u52a1\u4e4b\u95f4\u6ca1\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u800c\u53c8\u5206\u522b\u53ea\u5360\u7528\u4e00\u4e2aCPU+GPU\u6216\u4e00\u4e2aCPU\uff0c\u4ee4\u5176\u4f9d\u6b21\u6267\u884c\u5373\u53ef\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int main (){ int n , a , b , c , d ; cin >> n ; int f [ N ][ N * 10 ]; memset ( f , 0x3f , sizeof f ); f [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ cin >> a >> b >> c >> d ; c = min ( a , c ); b = min ( min ( b , d ), c ); for ( int j = 0 ; j <= i * 10 ; j ++ ){ f [ i ][ j ] = f [ i -1 ][ j ] + a ; if ( j >= c ) f [ i ][ j ] = min ( f [ i ][ j ], f [ i -1 ][ j - c ]); if ( j >= b ) f [ i ][ j ] = min ( f [ i ][ j ], f [ i -1 ][ j - b ] + b ); } } int ans = 0x3f3f3f3f ; for ( int i = 0 ; i <= n * 10 ; i ++ ){ ans = min ( ans , max ( i , f [ n ][ i ])); } cout << ans ; return 0 ; }","title":"\u7b2c5\u9898 \u4efb\u52a1\u8c03\u5ea6"},{"location":"CSP/%E7%AC%AC2%E6%AC%A1/","text":"\u89c6\u9891\u9898\u89e3 \u6682\u65e0 \u7b2c1\u9898 \u76f8\u90bb\u6570\u5bf9 \u00b6 \u9898\u76ee\u94fe\u63a5: \u76f8\u90bb\u6570\u5bf9 TAG: \u6876 \u54c8\u5e0c \u601d\u8def: \u5f00\u4e00\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u6876\u5373\u53ef \u4ee3\u7801: #include <iostream> using namespace std ; const int N = 10010 ; int a [ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ){ int t ; cin >> t ; a [ t ] ++ ; } int ans = 0 ; for ( int i = 1 ; i < 10000 ; i ++ ){ if ( a [ i ] && a [ i + 1 ]){ ans ++ ; } } cout << ans ; return 0 ; } \u7b2c2\u9898 \u753b\u56fe \u00b6 \u9898\u76ee\u94fe\u63a5: \u753b\u56fe TAG: \u6a21\u62df \u601d\u8def: \u4e8c\u7ef4\u6570\u636ea[i][j]\u8868\u793a\u5de6\u4e0b\u89d2\u4e0b\u6807\u4e3a(i,j)\u7684\u683c\u5b50\u662f\u5426\u88ab\u6d82\u8272\uff0c1\u4e3a\u662f\uff0c0\u4e3a\u5426\u3002\u7136\u540e\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef \u4ee3\u7801: #include <iostream> using namespace std ; const int N = 110 ; int a [ N ][ N ]; int main (){ int n ; cin >> n ; while ( n -- ){ int x1 , y1 , x2 , y2 ; cin >> x1 >> y1 >> x2 >> y2 ; for ( int i = x1 ; i < x2 ; i ++ ){ for ( int j = y1 ; j < y2 ; j ++ ){ a [ i ][ j ] = 1 ; } } } int ans = 0 ; for ( int i = 0 ; i <= 100 ; i ++ ){ for ( int j = 0 ; j <= 100 ; j ++ ){ if ( a [ i ][ j ] == 1 ){ ans ++ ; } } } cout << ans ; return 0 ; } \u7b2c3\u9898 \u5b57\u7b26\u4e32\u5339\u914d \u00b6 \u9898\u76ee\u94fe\u63a5: \u5b57\u7b26\u4e32\u5339\u914d TAG: \u6a21\u62df \u5b57\u7b26\u4e32 \u601d\u8def: \u7b80\u5355\u7684\u6a21\u62df\u9898\uff0c\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef \u4ee3\u7801: #include <iostream> using namespace std ; bool check ( char a , char b , int opt ){ if ( opt ) return a == b ; if (( a > 'Z' && b > 'Z' ) || ( a < 'a' && b < 'a' )) return a == b ; if ( a > 'Z' ) return a - 'a' + 'A' == b ; else return a - 'A' + 'a' == b ; } int main (){ string s ; int opt , q , n , m ; cin >> s >> opt >> q ; n = ( int ) s . size (); while ( q -- ){ string t ; cin >> t ; m = ( int ) t . size (); if ( m < n ) continue ; bool ok = true ; for ( int i = 0 ; i <= m - n ; i ++ ){ ok = true ; for ( int j = 0 ; j < n ; j ++ ){ if ( ! check ( s [ j ], t [ i + j ], opt )){ ok = false ; break ; } } if ( ok ) break ; } if ( ok ) cout << t << \" \\n \" ; } return 0 ; } \u7b2c4\u9898 \u6700\u4f18\u914d\u9910 \u00b6 \u9898\u76ee\u94fe\u63a5: \u6700\u4f18\u914d\u9910 TAG: \u591a\u6e90\u6700\u77ed\u8def BFS \u601d\u8def: \u5c06\u591a\u6e90\u6700\u77ed\u8def\u8f6c\u5316\u4e3a\u5355\u6e90\u6700\u77ed\u8def\uff0c\u7136\u540eBFS\u5373\u53ef\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; using ll = long long ; using PII = pair < int , int > ; const int N = 1010 ; int n , m , k , d ; bool g [ N ][ N ]; int dist [ N ][ N ]; queue < PII > q ; int dx [ 4 ] = { 0 , 1 , 0 , -1 }; int dy [ 4 ] = { 1 , 0 , -1 , 0 }; struct Node { int x , y , c ; } node [ N * N ]; void bfs (){ while ( ! q . empty ()){ PII t = q . front (); q . pop (); for ( int i = 0 ; i < 4 ; i ++ ){ int nx = t . first + dx [ i ], ny = t . second + dy [ i ]; if ( nx < 1 || nx > n || ny < 1 || ny > n || g [ nx ][ ny ]) continue ; if ( dist [ nx ][ ny ] > dist [ t . first ][ t . second ] + 1 ){ dist [ nx ][ ny ] = dist [ t . first ][ t . second ] + 1 ; q . push ({ nx , ny }); } } } } int main (){ memset ( dist , 0x3f , sizeof dist ); cin >> n >> m >> k >> d ; while ( m -- ){ int x , y ; cin >> x >> y ; dist [ x ][ y ] = 0 ; q . push ({ x , y }); } for ( int i = 0 ; i < k ; i ++ ){ cin >> node [ i ]. x >> node [ i ]. y >> node [ i ]. c ; } while ( d -- ){ int x , y ; cin >> x >> y ; g [ x ][ y ] = true ; } bfs (); ll ans = 0 ; for ( int i = 0 ; i < k ; i ++ ){ ans += dist [ node [ i ]. x ][ node [ i ]. y ] * node [ i ]. c ; } cout << ans ; return 0 ; } \u7b2c5\u9898 \u62fc\u56fe \u00b6 \u9898\u76ee\u94fe\u63a5: \u62fc\u56fe TAG: \u72b6\u538bDP \u5feb\u901f\u5e42 \u77e9\u9635\u4e58\u6cd5 \u601d\u8def: \u4f7f\u7528\u77e9\u9635\u4e58\u6cd5\u4f18\u5316\u5feb\u901f\u5e42\u6c42\u89e3\u5373\u53ef\u3002 \u4ee3\u7801: \u6682\u65e0","title":"201409\u7b2c2\u6b21"},{"location":"CSP/%E7%AC%AC2%E6%AC%A1/#1","text":"\u9898\u76ee\u94fe\u63a5: \u76f8\u90bb\u6570\u5bf9 TAG: \u6876 \u54c8\u5e0c \u601d\u8def: \u5f00\u4e00\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u6876\u5373\u53ef \u4ee3\u7801: #include <iostream> using namespace std ; const int N = 10010 ; int a [ N ]; int main (){ int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ){ int t ; cin >> t ; a [ t ] ++ ; } int ans = 0 ; for ( int i = 1 ; i < 10000 ; i ++ ){ if ( a [ i ] && a [ i + 1 ]){ ans ++ ; } } cout << ans ; return 0 ; }","title":"\u7b2c1\u9898 \u76f8\u90bb\u6570\u5bf9"},{"location":"CSP/%E7%AC%AC2%E6%AC%A1/#2","text":"\u9898\u76ee\u94fe\u63a5: \u753b\u56fe TAG: \u6a21\u62df \u601d\u8def: \u4e8c\u7ef4\u6570\u636ea[i][j]\u8868\u793a\u5de6\u4e0b\u89d2\u4e0b\u6807\u4e3a(i,j)\u7684\u683c\u5b50\u662f\u5426\u88ab\u6d82\u8272\uff0c1\u4e3a\u662f\uff0c0\u4e3a\u5426\u3002\u7136\u540e\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef \u4ee3\u7801: #include <iostream> using namespace std ; const int N = 110 ; int a [ N ][ N ]; int main (){ int n ; cin >> n ; while ( n -- ){ int x1 , y1 , x2 , y2 ; cin >> x1 >> y1 >> x2 >> y2 ; for ( int i = x1 ; i < x2 ; i ++ ){ for ( int j = y1 ; j < y2 ; j ++ ){ a [ i ][ j ] = 1 ; } } } int ans = 0 ; for ( int i = 0 ; i <= 100 ; i ++ ){ for ( int j = 0 ; j <= 100 ; j ++ ){ if ( a [ i ][ j ] == 1 ){ ans ++ ; } } } cout << ans ; return 0 ; }","title":"\u7b2c2\u9898 \u753b\u56fe"},{"location":"CSP/%E7%AC%AC2%E6%AC%A1/#3","text":"\u9898\u76ee\u94fe\u63a5: \u5b57\u7b26\u4e32\u5339\u914d TAG: \u6a21\u62df \u5b57\u7b26\u4e32 \u601d\u8def: \u7b80\u5355\u7684\u6a21\u62df\u9898\uff0c\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef \u4ee3\u7801: #include <iostream> using namespace std ; bool check ( char a , char b , int opt ){ if ( opt ) return a == b ; if (( a > 'Z' && b > 'Z' ) || ( a < 'a' && b < 'a' )) return a == b ; if ( a > 'Z' ) return a - 'a' + 'A' == b ; else return a - 'A' + 'a' == b ; } int main (){ string s ; int opt , q , n , m ; cin >> s >> opt >> q ; n = ( int ) s . size (); while ( q -- ){ string t ; cin >> t ; m = ( int ) t . size (); if ( m < n ) continue ; bool ok = true ; for ( int i = 0 ; i <= m - n ; i ++ ){ ok = true ; for ( int j = 0 ; j < n ; j ++ ){ if ( ! check ( s [ j ], t [ i + j ], opt )){ ok = false ; break ; } } if ( ok ) break ; } if ( ok ) cout << t << \" \\n \" ; } return 0 ; }","title":"\u7b2c3\u9898 \u5b57\u7b26\u4e32\u5339\u914d"},{"location":"CSP/%E7%AC%AC2%E6%AC%A1/#4","text":"\u9898\u76ee\u94fe\u63a5: \u6700\u4f18\u914d\u9910 TAG: \u591a\u6e90\u6700\u77ed\u8def BFS \u601d\u8def: \u5c06\u591a\u6e90\u6700\u77ed\u8def\u8f6c\u5316\u4e3a\u5355\u6e90\u6700\u77ed\u8def\uff0c\u7136\u540eBFS\u5373\u53ef\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; using ll = long long ; using PII = pair < int , int > ; const int N = 1010 ; int n , m , k , d ; bool g [ N ][ N ]; int dist [ N ][ N ]; queue < PII > q ; int dx [ 4 ] = { 0 , 1 , 0 , -1 }; int dy [ 4 ] = { 1 , 0 , -1 , 0 }; struct Node { int x , y , c ; } node [ N * N ]; void bfs (){ while ( ! q . empty ()){ PII t = q . front (); q . pop (); for ( int i = 0 ; i < 4 ; i ++ ){ int nx = t . first + dx [ i ], ny = t . second + dy [ i ]; if ( nx < 1 || nx > n || ny < 1 || ny > n || g [ nx ][ ny ]) continue ; if ( dist [ nx ][ ny ] > dist [ t . first ][ t . second ] + 1 ){ dist [ nx ][ ny ] = dist [ t . first ][ t . second ] + 1 ; q . push ({ nx , ny }); } } } } int main (){ memset ( dist , 0x3f , sizeof dist ); cin >> n >> m >> k >> d ; while ( m -- ){ int x , y ; cin >> x >> y ; dist [ x ][ y ] = 0 ; q . push ({ x , y }); } for ( int i = 0 ; i < k ; i ++ ){ cin >> node [ i ]. x >> node [ i ]. y >> node [ i ]. c ; } while ( d -- ){ int x , y ; cin >> x >> y ; g [ x ][ y ] = true ; } bfs (); ll ans = 0 ; for ( int i = 0 ; i < k ; i ++ ){ ans += dist [ node [ i ]. x ][ node [ i ]. y ] * node [ i ]. c ; } cout << ans ; return 0 ; }","title":"\u7b2c4\u9898 \u6700\u4f18\u914d\u9910"},{"location":"CSP/%E7%AC%AC2%E6%AC%A1/#5","text":"\u9898\u76ee\u94fe\u63a5: \u62fc\u56fe TAG: \u72b6\u538bDP \u5feb\u901f\u5e42 \u77e9\u9635\u4e58\u6cd5 \u601d\u8def: \u4f7f\u7528\u77e9\u9635\u4e58\u6cd5\u4f18\u5316\u5feb\u901f\u5e42\u6c42\u89e3\u5373\u53ef\u3002 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c5\u9898 \u62fc\u56fe"},{"location":"CSP/%E7%AC%AC3%E6%AC%A1/","text":"\u89c6\u9891\u9898\u89e3 \u6682\u65e0 \u7b2c1\u9898 \u95e8\u7981\u7cfb\u7edf \u00b6 \u9898\u76ee\u94fe\u63a5: \u95e8\u7981\u7cfb\u7edf TAG: \u6a21\u62df STL \u601d\u8def: \u7528map\u6216\u8005\u6570\u7ec4\u8bb0\u5f55\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ]; // a[i]\u8868\u793a\u7b2ci\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u521d\u59cb\u4e3a0 int main (){ int n ; cin >> n ; while ( n -- ){ int t ; cin >> t ; cout <<++ a [ t ] << \" \" ; } return 0 ; } \u7b2c2\u9898 Z\u5b57\u5f62\u626b\u63cf \u00b6 \u9898\u76ee\u94fe\u63a5: Z\u5b57\u5f62\u626b\u63cf TAG: \u6a21\u62df \u5faa\u73af \u601d\u8def: \u5206\u5947\u5076\u5206\u6bb5\u6a21\u62df\u5373\u53ef\uff0c\u53ef\u4ee5\u770b\u770b\u6ce8\u91ca \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 510 ; int a [ N ][ N ]; int main (){ int n ; cin >> n ; // \u8bfb\u5165n\u884cn\u5217\u7684\u6570\u7ec4 for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ){ cin >> a [ i ][ j ]; } } // \u5148\u8f93\u51fa\u659c\u7740\u7684\u524dn\u5217 for ( int i = 1 ; i <= n ; i ++ ){ if ( i & 1 ){ // \u5217\u6570\u662f\u5947\u6570\u7684\u60c5\u51b5 for ( int j = i ; j >= 1 ; j -- ){ cout << a [ j ][ i + 1 - j ] << \" \" ; } } else { // \u5217\u6570\u662f\u5076\u6570\u7684\u60c5\u51b5 for ( int j = 1 ; j <= i ; j ++ ){ cout << a [ j ][ i + 1 - j ] << \" \" ; } } } // \u518d\u8f93\u51fa\u659c\u7740\u7684\u540en-1\u5217\uff0c\u5177\u4f53\u5b9e\u73b0\u7c7b\u4f3c\u4e0a\u9762 for ( int i = n + 1 ; i <= 2 * n -1 ; i ++ ){ if ( i & 1 ){ for ( int j = n ; j >= i - n + 1 ; j -- ){ cout << a [ j ][ i + 1 - j ] << \" \" ; } } else { for ( int j = i - n + 1 ; j <= n ; j ++ ){ cout << a [ j ][ i + 1 - j ] << \" \" ; } } } return 0 ; } \u7b2c3\u9898 \u96c6\u5408\u7ade\u4ef7 \u00b6 \u9898\u76ee\u94fe\u63a5: \u96c6\u5408\u7ade\u4ef7 TAG: \u5927\u6a21\u62df \u601d\u8def: \u6309\u9898\u610f\u8fdb\u884c\u6a21\u62df\u5373\u53ef\uff0c\u9700\u8981\u5904\u7406\u7684\u60c5\u51b5\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u70b9\uff0c\u4ee3\u7801\u6ce8\u91ca\u4e2d\u6709\u8be6\u7ec6\u89e3\u91ca\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; using ll = long long ; const int N = 5010 ; // \u4f7f\u7528\u7ed3\u6784\u4f53\u5b58\u50a8\u6bcf\u4e00\u7b14\u4ea4\u6613\u7684\u4fe1\u606f struct Node { string type ; // \u4ea4\u6613\u7c7b\u578b double price ; // \u4ea4\u6613\u4ef7\u683c int num ; // \u4ea4\u6613\u6570\u91cf bool status ; // \u4ea4\u6613\u72b6\u6001\uff0c\u5373\u662f\u5426\u88ab\u64a4\u9500\uff0ctrue\u4e3a\u88ab\u64a4\u9500 } node [ N ]; int main (){ int cnt = 1 ; // \u7b2c\u51e0\u884c\u6570\u636e while ( cin >> node [ cnt ]. type >> node [ cnt ]. price ){ if ( node [ cnt ]. type == \"cancel\" ){ node [ cnt ]. status = true ; // cancel\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u88ab\u64a4\u9500\u7684\u4ea4\u6613 node [( int ) node [ cnt ]. price ]. status = true ; // \u5c06\u76f8\u5bf9\u5e94\u7684\u4ea4\u6613\u64a4\u9500 cnt ++ ; continue ; } cin >> node [ cnt ]. num ; // \u4e0d\u662f\u64a4\u9500\u64cd\u4f5c\u7684\u8bdd\u8fd8\u9700\u8981\u518d\u8bfb\u5165\u4ea4\u6613\u6570\u91cf cnt ++ ; } cnt -- ; // \u7531\u4e8e\u6700\u540e\u591a\u52a0\u4e86\u4e00\u6b21cnt\uff0c\u8fd9\u91cc\u9700\u8981\u5c06\u5176\u51cf\u56de\u6765 ll ans = 0 ; // \u8bb0\u5f55\u6700\u7ec8\u7b54\u6848\u7684\u4ea4\u6613\u91cf double ansp = 0 ; // \u8bb0\u5f55\u6700\u7ec8\u7b54\u6848\u7684\u4ea4\u6613\u4ef7\u683c for ( int i = 1 ; i <= cnt ; i ++ ){ // \u5bf9\u4e8e\u53ef\u80fd\u51fa\u73b0\u7684\u6bcf\u4e00\u79cd\u4ef7\u683c\u8fdb\u884c\u679a\u4e3e if ( node [ i ]. status ){ // \u5982\u679c\u8be5\u4ea4\u6613\u88ab\u64a4\u9500\u76f4\u63a5\u8df3\u8fc7\u5373\u53ef continue ; } double tmp = node [ i ]. price ; // \u8bb0\u5f55\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u5f00\u76d8\u4ef7 ll sum1 = 0 , sum2 = 0 ; // \u5206\u522b\u8bb0\u5f55buy\u548csell\u7684\u6570\u91cf for ( int j = 1 ; j <= cnt ; j ++ ){ // \u679a\u4e3e\u6bcf\u4e00\u7b14\u4ea4\u6613 if ( node [ j ]. status ){ // \u5982\u679c\u8be5\u4ea4\u6613\u88ab\u64a4\u9500\u76f4\u63a5\u8df3\u8fc7\u5373\u53ef continue ; } if ( node [ j ]. type == \"buy\" && node [ j ]. price >= tmp ){ // \u7d2f\u52a0\u5230buy\u4e2d sum1 += node [ j ]. num ; } else if ( node [ j ]. type == \"sell\" && node [ j ]. price <= tmp ){ // \u7d2f\u52a0\u5230sell\u4e2d sum2 += node [ j ]. num ; } } ll sum = min ( sum1 , sum2 ); // \u53d6\u8f83\u5c0f\u503c // \u66f4\u65b0\u7b54\u6848 if ( sum == ans && tmp > ansp ){ ansp = tmp ; } else if ( sum > ans ){ ans = sum ; ansp = tmp ; } } // \u6309\u683c\u5f0f\u8f93\u51fa\uff0c\u5373\u4ef7\u683c\u4fdd\u75592\u4f4d\u5c0f\u6570\uff0c\u4ea4\u6613\u91cf\u4e3a\u6574\u6570 cout << fixed << setprecision ( 2 ) << ansp << setprecision ( 0 ) << \" \" << ans ; return 0 ; } \u7b2c4\u9898 \u6700\u4f18\u704c\u6e89 \u00b6 \u9898\u76ee\u94fe\u63a5: \u6700\u4f18\u704c\u6e89 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0 \u7b2c5\u9898 \u8d27\u7269\u8c03\u5ea6 \u00b6 \u9898\u76ee\u94fe\u63a5: \u8d27\u7269\u8c03\u5ea6 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"201412\u7b2c3\u6b21"},{"location":"CSP/%E7%AC%AC3%E6%AC%A1/#1","text":"\u9898\u76ee\u94fe\u63a5: \u95e8\u7981\u7cfb\u7edf TAG: \u6a21\u62df STL \u601d\u8def: \u7528map\u6216\u8005\u6570\u7ec4\u8bb0\u5f55\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ]; // a[i]\u8868\u793a\u7b2ci\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u521d\u59cb\u4e3a0 int main (){ int n ; cin >> n ; while ( n -- ){ int t ; cin >> t ; cout <<++ a [ t ] << \" \" ; } return 0 ; }","title":"\u7b2c1\u9898 \u95e8\u7981\u7cfb\u7edf"},{"location":"CSP/%E7%AC%AC3%E6%AC%A1/#2-z","text":"\u9898\u76ee\u94fe\u63a5: Z\u5b57\u5f62\u626b\u63cf TAG: \u6a21\u62df \u5faa\u73af \u601d\u8def: \u5206\u5947\u5076\u5206\u6bb5\u6a21\u62df\u5373\u53ef\uff0c\u53ef\u4ee5\u770b\u770b\u6ce8\u91ca \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 510 ; int a [ N ][ N ]; int main (){ int n ; cin >> n ; // \u8bfb\u5165n\u884cn\u5217\u7684\u6570\u7ec4 for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ){ cin >> a [ i ][ j ]; } } // \u5148\u8f93\u51fa\u659c\u7740\u7684\u524dn\u5217 for ( int i = 1 ; i <= n ; i ++ ){ if ( i & 1 ){ // \u5217\u6570\u662f\u5947\u6570\u7684\u60c5\u51b5 for ( int j = i ; j >= 1 ; j -- ){ cout << a [ j ][ i + 1 - j ] << \" \" ; } } else { // \u5217\u6570\u662f\u5076\u6570\u7684\u60c5\u51b5 for ( int j = 1 ; j <= i ; j ++ ){ cout << a [ j ][ i + 1 - j ] << \" \" ; } } } // \u518d\u8f93\u51fa\u659c\u7740\u7684\u540en-1\u5217\uff0c\u5177\u4f53\u5b9e\u73b0\u7c7b\u4f3c\u4e0a\u9762 for ( int i = n + 1 ; i <= 2 * n -1 ; i ++ ){ if ( i & 1 ){ for ( int j = n ; j >= i - n + 1 ; j -- ){ cout << a [ j ][ i + 1 - j ] << \" \" ; } } else { for ( int j = i - n + 1 ; j <= n ; j ++ ){ cout << a [ j ][ i + 1 - j ] << \" \" ; } } } return 0 ; }","title":"\u7b2c2\u9898 Z\u5b57\u5f62\u626b\u63cf"},{"location":"CSP/%E7%AC%AC3%E6%AC%A1/#3","text":"\u9898\u76ee\u94fe\u63a5: \u96c6\u5408\u7ade\u4ef7 TAG: \u5927\u6a21\u62df \u601d\u8def: \u6309\u9898\u610f\u8fdb\u884c\u6a21\u62df\u5373\u53ef\uff0c\u9700\u8981\u5904\u7406\u7684\u60c5\u51b5\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u70b9\uff0c\u4ee3\u7801\u6ce8\u91ca\u4e2d\u6709\u8be6\u7ec6\u89e3\u91ca\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; using ll = long long ; const int N = 5010 ; // \u4f7f\u7528\u7ed3\u6784\u4f53\u5b58\u50a8\u6bcf\u4e00\u7b14\u4ea4\u6613\u7684\u4fe1\u606f struct Node { string type ; // \u4ea4\u6613\u7c7b\u578b double price ; // \u4ea4\u6613\u4ef7\u683c int num ; // \u4ea4\u6613\u6570\u91cf bool status ; // \u4ea4\u6613\u72b6\u6001\uff0c\u5373\u662f\u5426\u88ab\u64a4\u9500\uff0ctrue\u4e3a\u88ab\u64a4\u9500 } node [ N ]; int main (){ int cnt = 1 ; // \u7b2c\u51e0\u884c\u6570\u636e while ( cin >> node [ cnt ]. type >> node [ cnt ]. price ){ if ( node [ cnt ]. type == \"cancel\" ){ node [ cnt ]. status = true ; // cancel\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u8ba4\u4e3a\u662f\u88ab\u64a4\u9500\u7684\u4ea4\u6613 node [( int ) node [ cnt ]. price ]. status = true ; // \u5c06\u76f8\u5bf9\u5e94\u7684\u4ea4\u6613\u64a4\u9500 cnt ++ ; continue ; } cin >> node [ cnt ]. num ; // \u4e0d\u662f\u64a4\u9500\u64cd\u4f5c\u7684\u8bdd\u8fd8\u9700\u8981\u518d\u8bfb\u5165\u4ea4\u6613\u6570\u91cf cnt ++ ; } cnt -- ; // \u7531\u4e8e\u6700\u540e\u591a\u52a0\u4e86\u4e00\u6b21cnt\uff0c\u8fd9\u91cc\u9700\u8981\u5c06\u5176\u51cf\u56de\u6765 ll ans = 0 ; // \u8bb0\u5f55\u6700\u7ec8\u7b54\u6848\u7684\u4ea4\u6613\u91cf double ansp = 0 ; // \u8bb0\u5f55\u6700\u7ec8\u7b54\u6848\u7684\u4ea4\u6613\u4ef7\u683c for ( int i = 1 ; i <= cnt ; i ++ ){ // \u5bf9\u4e8e\u53ef\u80fd\u51fa\u73b0\u7684\u6bcf\u4e00\u79cd\u4ef7\u683c\u8fdb\u884c\u679a\u4e3e if ( node [ i ]. status ){ // \u5982\u679c\u8be5\u4ea4\u6613\u88ab\u64a4\u9500\u76f4\u63a5\u8df3\u8fc7\u5373\u53ef continue ; } double tmp = node [ i ]. price ; // \u8bb0\u5f55\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u5f00\u76d8\u4ef7 ll sum1 = 0 , sum2 = 0 ; // \u5206\u522b\u8bb0\u5f55buy\u548csell\u7684\u6570\u91cf for ( int j = 1 ; j <= cnt ; j ++ ){ // \u679a\u4e3e\u6bcf\u4e00\u7b14\u4ea4\u6613 if ( node [ j ]. status ){ // \u5982\u679c\u8be5\u4ea4\u6613\u88ab\u64a4\u9500\u76f4\u63a5\u8df3\u8fc7\u5373\u53ef continue ; } if ( node [ j ]. type == \"buy\" && node [ j ]. price >= tmp ){ // \u7d2f\u52a0\u5230buy\u4e2d sum1 += node [ j ]. num ; } else if ( node [ j ]. type == \"sell\" && node [ j ]. price <= tmp ){ // \u7d2f\u52a0\u5230sell\u4e2d sum2 += node [ j ]. num ; } } ll sum = min ( sum1 , sum2 ); // \u53d6\u8f83\u5c0f\u503c // \u66f4\u65b0\u7b54\u6848 if ( sum == ans && tmp > ansp ){ ansp = tmp ; } else if ( sum > ans ){ ans = sum ; ansp = tmp ; } } // \u6309\u683c\u5f0f\u8f93\u51fa\uff0c\u5373\u4ef7\u683c\u4fdd\u75592\u4f4d\u5c0f\u6570\uff0c\u4ea4\u6613\u91cf\u4e3a\u6574\u6570 cout << fixed << setprecision ( 2 ) << ansp << setprecision ( 0 ) << \" \" << ans ; return 0 ; }","title":"\u7b2c3\u9898 \u96c6\u5408\u7ade\u4ef7"},{"location":"CSP/%E7%AC%AC3%E6%AC%A1/#4","text":"\u9898\u76ee\u94fe\u63a5: \u6700\u4f18\u704c\u6e89 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c4\u9898 \u6700\u4f18\u704c\u6e89"},{"location":"CSP/%E7%AC%AC3%E6%AC%A1/#5","text":"\u9898\u76ee\u94fe\u63a5: \u8d27\u7269\u8c03\u5ea6 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c5\u9898   \u8d27\u7269\u8c03\u5ea6"},{"location":"CSP/%E7%AC%AC4%E6%AC%A1/","text":"\u89c6\u9891\u9898\u89e3 \u6682\u65e0 \u7b2c1\u9898 \u56fe\u50cf\u65cb\u8f6c \u00b6 \u9898\u76ee\u94fe\u63a5: \u56fe\u50cf\u65cb\u8f6c TAG: \u6a21\u62df \u601d\u8def: \u89c2\u5bdf\u53ef\u5f97\uff0c\u65cb\u8f6c\u540e\u7684\u56fe\u50cf\u76f8\u5f53\u4e8e\u539f\u6570\u7ec4\u4ece\u53f3\u5f80\u5de6\uff0c\u4ece\u4e0a\u5f80\u4e0b\u8f93\u51fa\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ][ N ]; int main (){ int n , m ; cin >> n >> m ; // \u8f93\u5165\u6570\u636e for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= m ; j ++ ){ cin >> a [ i ][ j ]; } } // \u4ece\u53f3\u5f80\u5de6\uff0c\u4ece\u4e0a\u5f80\u4e0b\u4f9d\u6b21\u8f93\u51fa\u6bcf\u4e00\u5217\u7684\u6570\u636e for ( int j = m ; j >= 1 ; j -- ){ for ( int i = 1 ; i <= n ; i ++ ){ cout << a [ i ][ j ] << \" \" ; } cout << \" \\n \" ; } return 0 ; } \u7b2c2\u9898 \u6570\u5b57\u6392\u5e8f \u00b6 \u9898\u76ee\u94fe\u63a5: \u6570\u5b57\u6392\u5e8f TAG: STL \u6392\u5e8f \u601d\u8def: \u4f7f\u7528\u7ed3\u6784\u4f53\u5b58\u6570\u5b57\u548c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u6392\u5e8f\u51fd\u6570\uff0c\u4f7f\u7528STL\u81ea\u5e26\u7684sort()\u51fd\u6570\u5373\u53ef\u5feb\u901f\u5b9e\u73b0\u6392\u5e8f\u64cd\u4f5c\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ]; // a[i]\u8868\u793ai\u51fa\u73b0\u7684\u6b21\u6570 struct Node { int num , cnt ; // \u5206\u522b\u8868\u793a\u6570\u5b57\u548c\u5bf9\u5e94\u7684\u51fa\u73b0\u6b21\u6570 }; // \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 bool cmp ( const Node & a , const Node & b ){ if ( a . cnt != b . cnt ) return a . cnt > b . cnt ; // \u5982\u679c\u51fa\u73b0\u6b21\u6570\u4e0d\u540c\uff0c\u628a\u6b21\u6570\u591a\u7684\u6392\u5728\u524d\u9762 return a . num < b . num ; // \u5426\u5219\u628a\u6570\u5b57\u5c0f\u7684\u6392\u5728\u524d\u9762 } int main (){ int n ; cin >> n ; while ( n -- ){ int t ; cin >> t ; a [ t ] ++ ; } vector < Node > p ; for ( int i = 0 ; i <= 1000 ; i ++ ){ if ( a [ i ]){ p . push_back ({ i , a [ i ]}); // \u5c06\u4e4b\u524d\u8bb0\u5f55\u7684\u6570\u636e\u653e\u5165vector\u4e2d } } sort ( p . begin (), p . end (), cmp ); for ( auto & e : p ){ cout << e . num << \" \" << e . cnt << \" \\n \" ; } return 0 ; } \u7b2c3\u9898 \u8282\u65e5 \u00b6 \u9898\u76ee\u94fe\u63a5: \u8282\u65e5 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0 \u7b2c4\u9898 \u7f51\u7edc\u5ef6\u65f6 \u00b6 \u9898\u76ee\u94fe\u63a5: \u7f51\u7edc\u5ef6\u65f6 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0 \u7b2c5\u9898 \u6700\u5c0f\u82b1\u8d39 \u00b6 \u9898\u76ee\u94fe\u63a5: \u6700\u5c0f\u82b1\u8d39 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"201503\u7b2c4\u6b21"},{"location":"CSP/%E7%AC%AC4%E6%AC%A1/#1","text":"\u9898\u76ee\u94fe\u63a5: \u56fe\u50cf\u65cb\u8f6c TAG: \u6a21\u62df \u601d\u8def: \u89c2\u5bdf\u53ef\u5f97\uff0c\u65cb\u8f6c\u540e\u7684\u56fe\u50cf\u76f8\u5f53\u4e8e\u539f\u6570\u7ec4\u4ece\u53f3\u5f80\u5de6\uff0c\u4ece\u4e0a\u5f80\u4e0b\u8f93\u51fa\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ][ N ]; int main (){ int n , m ; cin >> n >> m ; // \u8f93\u5165\u6570\u636e for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= m ; j ++ ){ cin >> a [ i ][ j ]; } } // \u4ece\u53f3\u5f80\u5de6\uff0c\u4ece\u4e0a\u5f80\u4e0b\u4f9d\u6b21\u8f93\u51fa\u6bcf\u4e00\u5217\u7684\u6570\u636e for ( int j = m ; j >= 1 ; j -- ){ for ( int i = 1 ; i <= n ; i ++ ){ cout << a [ i ][ j ] << \" \" ; } cout << \" \\n \" ; } return 0 ; }","title":"\u7b2c1\u9898 \u56fe\u50cf\u65cb\u8f6c"},{"location":"CSP/%E7%AC%AC4%E6%AC%A1/#2","text":"\u9898\u76ee\u94fe\u63a5: \u6570\u5b57\u6392\u5e8f TAG: STL \u6392\u5e8f \u601d\u8def: \u4f7f\u7528\u7ed3\u6784\u4f53\u5b58\u6570\u5b57\u548c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u6392\u5e8f\u51fd\u6570\uff0c\u4f7f\u7528STL\u81ea\u5e26\u7684sort()\u51fd\u6570\u5373\u53ef\u5feb\u901f\u5b9e\u73b0\u6392\u5e8f\u64cd\u4f5c\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 1010 ; int a [ N ]; // a[i]\u8868\u793ai\u51fa\u73b0\u7684\u6b21\u6570 struct Node { int num , cnt ; // \u5206\u522b\u8868\u793a\u6570\u5b57\u548c\u5bf9\u5e94\u7684\u51fa\u73b0\u6b21\u6570 }; // \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 bool cmp ( const Node & a , const Node & b ){ if ( a . cnt != b . cnt ) return a . cnt > b . cnt ; // \u5982\u679c\u51fa\u73b0\u6b21\u6570\u4e0d\u540c\uff0c\u628a\u6b21\u6570\u591a\u7684\u6392\u5728\u524d\u9762 return a . num < b . num ; // \u5426\u5219\u628a\u6570\u5b57\u5c0f\u7684\u6392\u5728\u524d\u9762 } int main (){ int n ; cin >> n ; while ( n -- ){ int t ; cin >> t ; a [ t ] ++ ; } vector < Node > p ; for ( int i = 0 ; i <= 1000 ; i ++ ){ if ( a [ i ]){ p . push_back ({ i , a [ i ]}); // \u5c06\u4e4b\u524d\u8bb0\u5f55\u7684\u6570\u636e\u653e\u5165vector\u4e2d } } sort ( p . begin (), p . end (), cmp ); for ( auto & e : p ){ cout << e . num << \" \" << e . cnt << \" \\n \" ; } return 0 ; }","title":"\u7b2c2\u9898 \u6570\u5b57\u6392\u5e8f"},{"location":"CSP/%E7%AC%AC4%E6%AC%A1/#3","text":"\u9898\u76ee\u94fe\u63a5: \u8282\u65e5 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c3\u9898 \u8282\u65e5"},{"location":"CSP/%E7%AC%AC4%E6%AC%A1/#4","text":"\u9898\u76ee\u94fe\u63a5: \u7f51\u7edc\u5ef6\u65f6 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c4\u9898 \u7f51\u7edc\u5ef6\u65f6"},{"location":"CSP/%E7%AC%AC4%E6%AC%A1/#5","text":"\u9898\u76ee\u94fe\u63a5: \u6700\u5c0f\u82b1\u8d39 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c5\u9898 \u6700\u5c0f\u82b1\u8d39"},{"location":"CSP/%E7%AC%AC5%E6%AC%A1/","text":"\u89c6\u9891\u9898\u89e3 \u6682\u65e0 \u7b2c1\u9898 \u6570\u5217\u5206\u6bb5 \u00b6 \u9898\u76ee\u94fe\u63a5: \u6570\u5217\u5206\u6bb5 TAG: \u57fa\u7840\u8bed\u6cd5 \u601d\u8def: \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u82e5\u76f8\u90bb\u4e24\u4e2a\u6570\u4e0d\u540c\u5219\u7b54\u6848\u6570\u52a01 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; int main (){ int n ; cin >> n ; vector < int > a ( n ); // vector\u4e3a\u53ef\u53d8\u957f\u6570\u7ec4\uff0c\u4f7f\u7528\u666e\u901a\u6570\u7ec4\u4e5f\u53ef\u4ee5 for ( int i = 0 ; i < n ; i ++ ){ cin >> a [ i ]; } int ans = 1 ; // \u521d\u59cb\u957f\u5ea6\u4e3a1 for ( int i = 1 ; i < n ; i ++ ){ // \u904d\u5386\u6570\u7ec4 if ( a [ i ] != a [ i -1 ]){ // \u9047\u5230\u9700\u8981\u5206\u6bb5\u7684\u60c5\u51b5 ans ++ ; // \u6570\u5217\u6bb5\u957f\u5ea6\u52a01 } } cout << ans ; return 0 ; } \u7b2c2\u9898 \u65e5\u671f\u8ba1\u7b97 \u00b6 \u9898\u76ee\u94fe\u63a5: \u65e5\u671f\u8ba1\u7b97 TAG: \u57fa\u7840\u8bed\u6cd5 \u6a21\u62df \u601d\u8def: \u8bb0\u5f55\u5230\u6bcf\u4e2a\u6708\u7ed3\u675f\u4f4d\u7f6e\u8fc7\u53bb\u4e86\u591a\u5c11\u5929\uff0c\u7136\u540e\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e\u9898\u76ee\u7ed9\u5b9a\u5929\u6570\u7684\u6708\u4efd\u518d\u52a0\u4e00\u4e2a\u6708\u5c31\u662f\u7b54\u6848\u7684\u6708\u4efd\uff0c\u7b54\u6848\u7684\u5929\u6570\u5c31\u662f\u603b\u5929\u6570-\u5230\u627e\u5230\u7684\u6708\u4efd\u7ed3\u675f\u4e3a\u6b62\u8fc7\u53bb\u7684\u5929\u6570 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; // \u5224\u65ad\u662f\u5426\u4e3a\u95f0\u5e74 bool is_leap_year ( int y ){ return y % 400 == 0 || ( y % 4 == 0 && y % 100 != 0 ); } int main (){ int y , d ; cin >> y >> d ; // \u8bb0\u5f55\u5404\u6708\u7684\u5929\u6570 int m [] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 }; // \u5982\u679c\u662f\u95f0\u5e74\uff0c\u4e8c\u6708\u5929\u6570\u52a01 if ( is_leap_year ( y )){ m [ 2 ] ++ ; } // s[i]\u8868\u793a\u5230\u7b2ci\u4e2a\u6708\u7ed3\u675f\u4e3a\u6b62\uff0c\u4e00\u5171\u8fc7\u4e86\u591a\u5c11\u5929 int s [ 15 ] = { 0 }; for ( int i = 1 ; i <= 12 ; i ++ ){ s [ i ] = s [ i -1 ] + m [ i ]; } // id\u8bb0\u5f55\u7b54\u6848\u7684\u6708\u4efd int id = 1 ; for ( int i = 1 ; i <= 12 ; i ++ ){ if ( d <= s [ i ]){ // \u627e\u5230\u7b54\u6848\u7684\u6708\u4efd id = i ; break ; } } // \u5929\u6570\u4e3a\u5b9e\u9645\u8fc7\u53bb\u7684\u5929\u6570-\u5df2\u7ecf\u7ecf\u8fc7\u7684\u5929\u6570 cout << id << \" \\n \" << d - s [ id -1 ]; return 0 ; } \u7b2c3\u9898 \u6a21\u677f\u751f\u6210\u7cfb\u7edf \u00b6 \u9898\u76ee\u94fe\u63a5: \u6a21\u677f\u751f\u6210\u7cfb\u7edf TAG: \u5927\u6a21\u62df \u5b57\u7b26\u4e32 \u601d\u8def: \u7ecf\u5178\u7b2c\u4e09\u9898\u5927\u6a21\u62df\u9898\uff0c\u8fd9\u9898\u76f8\u5bf9\u4e8e\u8fd1\u51e0\u5e74\u7684\u5927\u6a21\u62df\u9898\u53cb\u5584\u4e86\u5f88\u591a\uff0c\u9898\u9762\u4e5f\u6bd4\u8f83\u7b80\u77ed\u3002\u4f46\u662f\u9898\u76ee\u4e2d\u7531\u4e8e\u683c\u5f0f\u95ee\u9898\uff0c\u8f93\u5165\u6570\u636e\u770b\u8d77\u6765\u6709\u4e9b\u5947\u602a\uff0c\u7406\u8bba\u4e0a\u7684\u8f93\u5165\u6570\u636e\u5982\u4e0b\uff1a 11 2 <! DOCTYPE html > < html > < head > < title > User {{ name }} </ title > </ head > < body > < h1 > David Beckham </ h1 > < p > Email : < a href = \"mailto:{{ email }}\" > {{ email }} </ a ></ p > < p > Address : {{ address }} </ p > </ body > </ html > name \"David Beckham\" email \"david@beckham.com\" \u53ea\u9700\u8981\u6839\u636e\u9898\u610f\u8fdb\u884c\u6a21\u62df\u5373\u53ef\uff0c\u719f\u7ec3\u4f7f\u7528string\u81ea\u5e26\u7684\u4e00\u4e9b\u51fd\u6570\u4f8b\u5982substr(), find(), size()\u7b49\u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 110 ; string s [ N ]; // \u4f7f\u7528\u5b57\u7b26\u4e32\u6570\u7ec4\u5b58\u6570\u636e\uff0c\u6bd4\u4e8c\u7ef4\u5b57\u7b26\u6570\u7ec4\u6765\u5f97\u7b80\u5355\u4e00\u4e9b struct Node { // \u4f7f\u7528\u7ed3\u6784\u4f53\u5b58\u6a21\u677f\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f7f\u7528map<string,string>\u4e5f\u53ef\u4ee5 string s1 , s2 ; } temp [ N ]; int main (){ int n , m ; cin >> n >> m ; getchar (); // \u540e\u9762\u7684\u6570\u636e\u7531\u4e8e\u5b58\u5728\u7a7a\u683c\uff0c\u9700\u8981\u4f7f\u7528getline\u8bfb\u5165\u6570\u636e\uff0c\u524d\u9762\u7528\u7684cin\u8bfb\u5165\uff0c\u4f1a\u5ffd\u7565\u7a7a\u683c\u548c\u6362\u884c\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u4f7f\u7528getchar()\u8bfb\u5165\u4e0a\u4e00\u884ccin\u8bfb\u5165\u65f6\u5ffd\u7565\u7684\u6362\u884c\u7b26 for ( int i = 1 ; i <= n ; i ++ ){ getline ( cin , s [ i ]); // getline()\u7684\u4e00\u79cd\u7528\u6cd5\uff0c\u4f7f\u7528cin.getline()\u4e5f\u53ef\u4ee5 } for ( int i = 1 ; i <= m ; i ++ ){ cin >> temp [ i ]. s1 ; getchar (); // \u7406\u7531\u540c\u4e0a\uff0c\u8bfb\u5165cin\u5ffd\u7565\u7684\u7a7a\u683c getline ( cin , temp [ i ]. s2 ); temp [ i ]. s2 = temp [ i ]. s2 . substr ( 1 ,( int ) temp [ i ]. s2 . size () -2 ); // \u53bb\u9664\u6a21\u677f\u9996\u5c3e\u7684\"\" } for ( int i = 1 ; i <= n ; i ++ ){ int pos = 0 ; while (( pos = s [ i ]. find ( \"{{ \" , pos )) != ( int ) string :: npos ){ // \u5faa\u73af\u5bfb\u627e\u53ef\u66ff\u6362\u7684\u6a21\u677f\u5f00\u59cb\u4e0b\u6807 int endpos = s [ i ]. find ( \" }}\" , pos ); // \u5bfb\u627e\u6a21\u677f\u7ed3\u675f\u4e0b\u6807 string tt = s [ i ]. substr ( pos + 3 , endpos - ( pos + 3 )); // \u83b7\u53d6\u6a21\u677f\u540d bool ok = false ; // \u6807\u8bb0 for ( int j = 1 ; j <= m ; j ++ ){ // \u904d\u5386\u6bcf\u4e00\u4e2a\u5df2\u77e5\u7684\u6a21\u677f\uff0c\u4f7f\u7528map\u7684\u8bdd\u53ef\u4ee5\u4e0d\u9700\u8981\u5faa\u73af if ( tt == temp [ j ]. s1 ){ // \u5982\u679c\u548c\u5f53\u524d\u6a21\u677f\u5339\u914d\u4e0a s [ i ] = s [ i ]. substr ( 0 , pos ) + temp [ j ]. s2 + s [ i ]. substr ( endpos + 3 ,( int ) s [ i ]. size () - ( endpos + 3 )); // \u66ff\u6362 ok = true ; // \u6253\u4e0a\u6807\u8bb0 break ; // \u5339\u914d\u4e0a\u4e86\u6240\u4ee5\u76f4\u63a5\u9000\u51fa\u5faa\u73af\u5373\u53ef } } if ( ! ok ){ // \u6ca1\u6709\u4e00\u4e2a\u80fd\u5339\u914d\u7684\u8bdd s [ i ] = s [ i ]. substr ( 0 , pos ) + s [ i ]. substr ( endpos + 3 ,( int ) s [ i ]. size () - ( endpos + 3 )); continue ; // \u76f4\u63a5continue\uff0c\u4e0d\u9700\u8981\u5c06pos++\uff0c\u907f\u514d\"{{ \u6a21\u677f1 }}{{ \u6a21\u677f2 }}\"\u8fd9\u79cd\u60c5\u51b5\u3002\u4f46\u5b98\u7f51\u7684\u6570\u636e\u6ca1\u6709\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e0d\u5199\u4e5f\u80fd\u8fc7\uff0c\u5f88\u79bb\u8c31 } pos ++ ; // \u5c06\u5bfb\u627e\u7684\u4e0b\u6807\u52a0\u4e00 } cout << s [ i ] << \" \\n \" ; } return 0 ; } \u7b2c4\u9898 \u9ad8\u901f\u516c\u8def \u00b6 \u9898\u76ee\u94fe\u63a5: \u9ad8\u901f\u516c\u8def TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0 \u7b2c5\u9898 \u6700\u4f73\u6587\u7ae0 \u00b6 \u9898\u76ee\u94fe\u63a5: \u6700\u4f73\u6587\u7ae0 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"201509\u7b2c5\u6b21"},{"location":"CSP/%E7%AC%AC5%E6%AC%A1/#1","text":"\u9898\u76ee\u94fe\u63a5: \u6570\u5217\u5206\u6bb5 TAG: \u57fa\u7840\u8bed\u6cd5 \u601d\u8def: \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u82e5\u76f8\u90bb\u4e24\u4e2a\u6570\u4e0d\u540c\u5219\u7b54\u6848\u6570\u52a01 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; int main (){ int n ; cin >> n ; vector < int > a ( n ); // vector\u4e3a\u53ef\u53d8\u957f\u6570\u7ec4\uff0c\u4f7f\u7528\u666e\u901a\u6570\u7ec4\u4e5f\u53ef\u4ee5 for ( int i = 0 ; i < n ; i ++ ){ cin >> a [ i ]; } int ans = 1 ; // \u521d\u59cb\u957f\u5ea6\u4e3a1 for ( int i = 1 ; i < n ; i ++ ){ // \u904d\u5386\u6570\u7ec4 if ( a [ i ] != a [ i -1 ]){ // \u9047\u5230\u9700\u8981\u5206\u6bb5\u7684\u60c5\u51b5 ans ++ ; // \u6570\u5217\u6bb5\u957f\u5ea6\u52a01 } } cout << ans ; return 0 ; }","title":"\u7b2c1\u9898 \u6570\u5217\u5206\u6bb5"},{"location":"CSP/%E7%AC%AC5%E6%AC%A1/#2","text":"\u9898\u76ee\u94fe\u63a5: \u65e5\u671f\u8ba1\u7b97 TAG: \u57fa\u7840\u8bed\u6cd5 \u6a21\u62df \u601d\u8def: \u8bb0\u5f55\u5230\u6bcf\u4e2a\u6708\u7ed3\u675f\u4f4d\u7f6e\u8fc7\u53bb\u4e86\u591a\u5c11\u5929\uff0c\u7136\u540e\u627e\u5230\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e\u9898\u76ee\u7ed9\u5b9a\u5929\u6570\u7684\u6708\u4efd\u518d\u52a0\u4e00\u4e2a\u6708\u5c31\u662f\u7b54\u6848\u7684\u6708\u4efd\uff0c\u7b54\u6848\u7684\u5929\u6570\u5c31\u662f\u603b\u5929\u6570-\u5230\u627e\u5230\u7684\u6708\u4efd\u7ed3\u675f\u4e3a\u6b62\u8fc7\u53bb\u7684\u5929\u6570 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; // \u5224\u65ad\u662f\u5426\u4e3a\u95f0\u5e74 bool is_leap_year ( int y ){ return y % 400 == 0 || ( y % 4 == 0 && y % 100 != 0 ); } int main (){ int y , d ; cin >> y >> d ; // \u8bb0\u5f55\u5404\u6708\u7684\u5929\u6570 int m [] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 }; // \u5982\u679c\u662f\u95f0\u5e74\uff0c\u4e8c\u6708\u5929\u6570\u52a01 if ( is_leap_year ( y )){ m [ 2 ] ++ ; } // s[i]\u8868\u793a\u5230\u7b2ci\u4e2a\u6708\u7ed3\u675f\u4e3a\u6b62\uff0c\u4e00\u5171\u8fc7\u4e86\u591a\u5c11\u5929 int s [ 15 ] = { 0 }; for ( int i = 1 ; i <= 12 ; i ++ ){ s [ i ] = s [ i -1 ] + m [ i ]; } // id\u8bb0\u5f55\u7b54\u6848\u7684\u6708\u4efd int id = 1 ; for ( int i = 1 ; i <= 12 ; i ++ ){ if ( d <= s [ i ]){ // \u627e\u5230\u7b54\u6848\u7684\u6708\u4efd id = i ; break ; } } // \u5929\u6570\u4e3a\u5b9e\u9645\u8fc7\u53bb\u7684\u5929\u6570-\u5df2\u7ecf\u7ecf\u8fc7\u7684\u5929\u6570 cout << id << \" \\n \" << d - s [ id -1 ]; return 0 ; }","title":"\u7b2c2\u9898 \u65e5\u671f\u8ba1\u7b97"},{"location":"CSP/%E7%AC%AC5%E6%AC%A1/#3","text":"\u9898\u76ee\u94fe\u63a5: \u6a21\u677f\u751f\u6210\u7cfb\u7edf TAG: \u5927\u6a21\u62df \u5b57\u7b26\u4e32 \u601d\u8def: \u7ecf\u5178\u7b2c\u4e09\u9898\u5927\u6a21\u62df\u9898\uff0c\u8fd9\u9898\u76f8\u5bf9\u4e8e\u8fd1\u51e0\u5e74\u7684\u5927\u6a21\u62df\u9898\u53cb\u5584\u4e86\u5f88\u591a\uff0c\u9898\u9762\u4e5f\u6bd4\u8f83\u7b80\u77ed\u3002\u4f46\u662f\u9898\u76ee\u4e2d\u7531\u4e8e\u683c\u5f0f\u95ee\u9898\uff0c\u8f93\u5165\u6570\u636e\u770b\u8d77\u6765\u6709\u4e9b\u5947\u602a\uff0c\u7406\u8bba\u4e0a\u7684\u8f93\u5165\u6570\u636e\u5982\u4e0b\uff1a 11 2 <! DOCTYPE html > < html > < head > < title > User {{ name }} </ title > </ head > < body > < h1 > David Beckham </ h1 > < p > Email : < a href = \"mailto:{{ email }}\" > {{ email }} </ a ></ p > < p > Address : {{ address }} </ p > </ body > </ html > name \"David Beckham\" email \"david@beckham.com\" \u53ea\u9700\u8981\u6839\u636e\u9898\u610f\u8fdb\u884c\u6a21\u62df\u5373\u53ef\uff0c\u719f\u7ec3\u4f7f\u7528string\u81ea\u5e26\u7684\u4e00\u4e9b\u51fd\u6570\u4f8b\u5982substr(), find(), size()\u7b49\u53ef\u4ee5\u7b80\u5316\u4ee3\u7801\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 110 ; string s [ N ]; // \u4f7f\u7528\u5b57\u7b26\u4e32\u6570\u7ec4\u5b58\u6570\u636e\uff0c\u6bd4\u4e8c\u7ef4\u5b57\u7b26\u6570\u7ec4\u6765\u5f97\u7b80\u5355\u4e00\u4e9b struct Node { // \u4f7f\u7528\u7ed3\u6784\u4f53\u5b58\u6a21\u677f\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f7f\u7528map<string,string>\u4e5f\u53ef\u4ee5 string s1 , s2 ; } temp [ N ]; int main (){ int n , m ; cin >> n >> m ; getchar (); // \u540e\u9762\u7684\u6570\u636e\u7531\u4e8e\u5b58\u5728\u7a7a\u683c\uff0c\u9700\u8981\u4f7f\u7528getline\u8bfb\u5165\u6570\u636e\uff0c\u524d\u9762\u7528\u7684cin\u8bfb\u5165\uff0c\u4f1a\u5ffd\u7565\u7a7a\u683c\u548c\u6362\u884c\uff0c\u56e0\u6b64\u8fd9\u91cc\u9700\u8981\u4f7f\u7528getchar()\u8bfb\u5165\u4e0a\u4e00\u884ccin\u8bfb\u5165\u65f6\u5ffd\u7565\u7684\u6362\u884c\u7b26 for ( int i = 1 ; i <= n ; i ++ ){ getline ( cin , s [ i ]); // getline()\u7684\u4e00\u79cd\u7528\u6cd5\uff0c\u4f7f\u7528cin.getline()\u4e5f\u53ef\u4ee5 } for ( int i = 1 ; i <= m ; i ++ ){ cin >> temp [ i ]. s1 ; getchar (); // \u7406\u7531\u540c\u4e0a\uff0c\u8bfb\u5165cin\u5ffd\u7565\u7684\u7a7a\u683c getline ( cin , temp [ i ]. s2 ); temp [ i ]. s2 = temp [ i ]. s2 . substr ( 1 ,( int ) temp [ i ]. s2 . size () -2 ); // \u53bb\u9664\u6a21\u677f\u9996\u5c3e\u7684\"\" } for ( int i = 1 ; i <= n ; i ++ ){ int pos = 0 ; while (( pos = s [ i ]. find ( \"{{ \" , pos )) != ( int ) string :: npos ){ // \u5faa\u73af\u5bfb\u627e\u53ef\u66ff\u6362\u7684\u6a21\u677f\u5f00\u59cb\u4e0b\u6807 int endpos = s [ i ]. find ( \" }}\" , pos ); // \u5bfb\u627e\u6a21\u677f\u7ed3\u675f\u4e0b\u6807 string tt = s [ i ]. substr ( pos + 3 , endpos - ( pos + 3 )); // \u83b7\u53d6\u6a21\u677f\u540d bool ok = false ; // \u6807\u8bb0 for ( int j = 1 ; j <= m ; j ++ ){ // \u904d\u5386\u6bcf\u4e00\u4e2a\u5df2\u77e5\u7684\u6a21\u677f\uff0c\u4f7f\u7528map\u7684\u8bdd\u53ef\u4ee5\u4e0d\u9700\u8981\u5faa\u73af if ( tt == temp [ j ]. s1 ){ // \u5982\u679c\u548c\u5f53\u524d\u6a21\u677f\u5339\u914d\u4e0a s [ i ] = s [ i ]. substr ( 0 , pos ) + temp [ j ]. s2 + s [ i ]. substr ( endpos + 3 ,( int ) s [ i ]. size () - ( endpos + 3 )); // \u66ff\u6362 ok = true ; // \u6253\u4e0a\u6807\u8bb0 break ; // \u5339\u914d\u4e0a\u4e86\u6240\u4ee5\u76f4\u63a5\u9000\u51fa\u5faa\u73af\u5373\u53ef } } if ( ! ok ){ // \u6ca1\u6709\u4e00\u4e2a\u80fd\u5339\u914d\u7684\u8bdd s [ i ] = s [ i ]. substr ( 0 , pos ) + s [ i ]. substr ( endpos + 3 ,( int ) s [ i ]. size () - ( endpos + 3 )); continue ; // \u76f4\u63a5continue\uff0c\u4e0d\u9700\u8981\u5c06pos++\uff0c\u907f\u514d\"{{ \u6a21\u677f1 }}{{ \u6a21\u677f2 }}\"\u8fd9\u79cd\u60c5\u51b5\u3002\u4f46\u5b98\u7f51\u7684\u6570\u636e\u6ca1\u6709\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e0d\u5199\u4e5f\u80fd\u8fc7\uff0c\u5f88\u79bb\u8c31 } pos ++ ; // \u5c06\u5bfb\u627e\u7684\u4e0b\u6807\u52a0\u4e00 } cout << s [ i ] << \" \\n \" ; } return 0 ; }","title":"\u7b2c3\u9898 \u6a21\u677f\u751f\u6210\u7cfb\u7edf"},{"location":"CSP/%E7%AC%AC5%E6%AC%A1/#4","text":"\u9898\u76ee\u94fe\u63a5: \u9ad8\u901f\u516c\u8def TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c4\u9898 \u9ad8\u901f\u516c\u8def"},{"location":"CSP/%E7%AC%AC5%E6%AC%A1/#5","text":"\u9898\u76ee\u94fe\u63a5: \u6700\u4f73\u6587\u7ae0 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c5\u9898 \u6700\u4f73\u6587\u7ae0"},{"location":"CSP/%E7%AC%AC6%E6%AC%A1/","text":"\u89c6\u9891\u9898\u89e3 \u6682\u65e0 \u7b2c1\u9898 \u6570\u4f4d\u4e4b\u548c \u00b6 \u9898\u76ee\u94fe\u63a5: \u6570\u4f4d\u4e4b\u548c TAG: \u57fa\u7840\u8bed\u6cd5 \u601d\u8def: \u4ece\u4e2a\u4f4d\u5f00\u59cb\u5c06\u6bcf\u4e00\u4f4d\u4f9d\u6b21\u7d2f\u52a0\u8fdb\u7b54\u6848\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; int main (){ int n , ans = 0 ; cin >> n ; while ( n ){ // \u5f53n\u4e0d\u4e3a0\u5219\u8fdb\u884c\u5faa\u73af ans += n % 10 ; // \u5c06\u672b\u4f4d\u6570\u5b57\u7d2f\u52a0\u8fdb\u7b54\u6848 n /= 10 ; // \u53bb\u9664\u672b\u4f4d\u6570\u5b57 } cout << ans ; return 0 ; } \u7b2c2\u9898 \u6d88\u9664\u7c7b\u6e38\u620f \u00b6 \u9898\u76ee\u94fe\u63a5: \u6d88\u9664\u7c7b\u6e38\u620f TAG: \u6a21\u62df \u601d\u8def: \u904d\u5386\u6bcf\u4e00\u4f4d\uff0c\u5224\u65ad\u662f\u5426\u88ab\u6d88\u9664\u5373\u53ef\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u88ab\u6d88\u9664\u7684\u4e0d\u80fd\u4e4b\u95f4\u6d88\u6389\uff0c\u8981\u6253\u4e0a\u6807\u8bb0\u6700\u540e\u8f93\u51fa\u7684\u65f6\u5019\u6d88\u9664\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5f71\u54cd\u540e\u9762\u7684\u5143\u7d20 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 40 ; int n , m ; int a [ N ][ N ], b [ N ][ N ]; // a\u7528\u4e8e\u5b58\u50a8\u539f\u6570\u7ec4\uff0cb\u7528\u4e8e\u5b58\u50a8\u6700\u7ec8\u662f\u5426\u88ab\u6d88\u9664 // \u5982\u679c\u6a2a\u6216\u7ad6\u8fde\u7eed3\u4e2a\u5143\u7d20\u76f8\u540c\u5219\u88ab\u6d88\u9664 void check ( int x , int y ){ if ( a [ x ][ y -1 ] == a [ x ][ y ] && a [ x ][ y ] == a [ x ][ y + 1 ]) // \u6a2a\u7740 b [ x ][ y -1 ] = b [ x ][ y ] = b [ x ][ y + 1 ] = 1 ; if ( a [ x -1 ][ y ] == a [ x ][ y ] && a [ x ][ y ] == a [ x + 1 ][ y ]) // \u7ad6\u7740 b [ x -1 ][ y ] = b [ x ][ y ] = b [ x + 1 ][ y ] = 1 ; } int main (){ cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) cin >> a [ i ][ j ]; // \u8bfb\u5165\u6570\u7ec4 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) check ( i , j ); // \u4f9d\u6b21\u5224\u65ad\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u80fd\u591f\u88ab\u6d88\u9664 for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= m ; j ++ ){ if ( b [ i ][ j ]) cout << \"0 \" ; // \u5982\u679c\u88ab\u6d88\u9664\u5219\u8f93\u51fa0 else cout << a [ i ][ j ] << \" \" ; // \u5426\u5219\u8f93\u51fa\u539f\u59cb\u503c } cout << \" \\n \" ; // \u8bb0\u5f97\u6362\u884c } return 0 ; } \u7b2c3\u9898 \u753b\u56fe \u00b6 \u9898\u76ee\u94fe\u63a5: \u753b\u56fe TAG: \u5927\u6a21\u62df \u641c\u7d22 DFS \u601d\u8def: \u672c\u9898\u6700\u5927\u7684\u5751\u70b9\u5728\u4e8e\u6a2a\u7eb5\u5750\u6807\u662f\u53cd\u8fc7\u6765\u7684\u3002\u5176\u4ed6\u7684\u6309\u8981\u6c42\u6a21\u62df\u5373\u53ef\u3002\u586b\u5145\u64cd\u4f5c\u53ef\u7528DFS\u6216\u8005BFS\u5b9e\u73b0\uff0c\u8fd9\u91cc\u91c7\u7528DFS\uff08\u592a\u83dc\u4e86\uff0c\u4e4b\u524d\u7528BFS\u5199\u70b8\u4e86\uff09\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u8bd5\u7740\u7528BFS\u5199\u4e00\u5199\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 110 ; int m , n , q ; char a [ N ][ N ]; // \u5b58\u56fe int dx [] = { 0 , 1 , 0 , -1 }; // \u65b9\u5411\u6570\u7ec4 int dy [] = { 1 , 0 , -1 , 0 }; void dfs ( int x , int y , char ch ){ a [ x ][ y ] = ch ; // \u586b\u5145\u8fd9\u4e00\u70b9 for ( int i = 0 ; i < 4 ; i ++ ){ // \u904d\u5386\u56db\u4e2a\u65b9\u5411 int nx = x + dx [ i ], ny = y + dy [ i ]; // \u4e0b\u9762\u7684\u5224\u65ad\u4f9d\u6b21\u662f\uff1a\u662f\u5426\u8d8a\u754c\uff0c\u662f\u5426\u5df2\u7ecf\u586b\u5145\u8fc7\uff0c\u662f\u5426\u78b0\u5230\u8fb9\u754c if ( nx < 0 || nx >= n || ny < 0 || ny >= m || a [ nx ][ ny ] == ch || a [ nx ][ ny ] == '|' || a [ nx ][ ny ] == '-' || a [ nx ][ ny ] == '+' ) continue ; dfs ( nx , ny , ch ); // \u6ca1\u6709\u7684\u8bdd\u7ee7\u7eed\u641c\u7d22 } } // \u672c\u9898\u9700\u8981\u6ce8\u610f\u7684\u70b9\u662f\u6a2a\u7eb5\u5750\u6807\u662f\u53cd\u8fc7\u6765\u7684 int main (){ memset ( a , '.' , sizeof a ); // \u5c06a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u521d\u59cb\u5316\u4e3a'.' cin >> m >> n >> q ; while ( q -- ){ // \u8bfb\u5165q\u6b21\u64cd\u4f5c int op ; cin >> op ; if ( op ){ // \u586b\u5145\u64cd\u4f5c int x , y ; char ch ; cin >> x >> y >> ch ; dfs ( y , x , ch ); // \u4f7f\u7528dfs\u8fdb\u884c\u586b\u5145 } else { // \u753b\u7ebf\u64cd\u4f5c int x1 , y1 , x2 , y2 ; cin >> x1 >> y1 >> x2 >> y2 ; if ( x1 == x2 ){ // \u7ad6\u7ebf if ( y1 > y2 ) swap ( y1 , y2 ); // \u786e\u4fdd\u4e0b\u4e00\u884c\u7684for\u5faa\u73af\u662f\u4ece\u5c0f\u5230\u5927\u904d\u5386 for ( int i = y1 ; i <= y2 ; i ++ ){ if ( a [ i ][ x1 ] == '+' ) continue ; if ( a [ i ][ x1 ] == '-' ) a [ i ][ x1 ] = '+' ; else a [ i ][ x1 ] = '|' ; } } else { // \u6a2a\u7ebf if ( x1 > x2 ) swap ( x1 , x2 ); for ( int i = x1 ; i <= x2 ; i ++ ){ if ( a [ y1 ][ i ] == '+' ) continue ; if ( a [ y1 ][ i ] == '|' ) a [ y1 ][ i ] = '+' ; else a [ y1 ][ i ] = '-' ; } } } } for ( int i = n -1 ; i >= 0 ; i -- ){ for ( int j = 0 ; j < m ; j ++ ){ cout << a [ i ][ j ]; } cout << \" \\n \" ; } return 0 ; } \u7b2c4\u9898 \u9001\u8d27 \u00b6 \u9898\u76ee\u94fe\u63a5: \u9001\u8d27 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0 \u7b2c5\u9898 \u77e9\u9635 \u00b6 \u9898\u76ee\u94fe\u63a5: \u77e9\u9635 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: ???+ \u89c6\u9891\u9898\u89e3 \u6682\u65e0","title":"\u7b2c6\u6b21"},{"location":"CSP/%E7%AC%AC6%E6%AC%A1/#1","text":"\u9898\u76ee\u94fe\u63a5: \u6570\u4f4d\u4e4b\u548c TAG: \u57fa\u7840\u8bed\u6cd5 \u601d\u8def: \u4ece\u4e2a\u4f4d\u5f00\u59cb\u5c06\u6bcf\u4e00\u4f4d\u4f9d\u6b21\u7d2f\u52a0\u8fdb\u7b54\u6848\u5373\u53ef \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; int main (){ int n , ans = 0 ; cin >> n ; while ( n ){ // \u5f53n\u4e0d\u4e3a0\u5219\u8fdb\u884c\u5faa\u73af ans += n % 10 ; // \u5c06\u672b\u4f4d\u6570\u5b57\u7d2f\u52a0\u8fdb\u7b54\u6848 n /= 10 ; // \u53bb\u9664\u672b\u4f4d\u6570\u5b57 } cout << ans ; return 0 ; }","title":"\u7b2c1\u9898 \u6570\u4f4d\u4e4b\u548c"},{"location":"CSP/%E7%AC%AC6%E6%AC%A1/#2","text":"\u9898\u76ee\u94fe\u63a5: \u6d88\u9664\u7c7b\u6e38\u620f TAG: \u6a21\u62df \u601d\u8def: \u904d\u5386\u6bcf\u4e00\u4f4d\uff0c\u5224\u65ad\u662f\u5426\u88ab\u6d88\u9664\u5373\u53ef\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u88ab\u6d88\u9664\u7684\u4e0d\u80fd\u4e4b\u95f4\u6d88\u6389\uff0c\u8981\u6253\u4e0a\u6807\u8bb0\u6700\u540e\u8f93\u51fa\u7684\u65f6\u5019\u6d88\u9664\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5f71\u54cd\u540e\u9762\u7684\u5143\u7d20 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 40 ; int n , m ; int a [ N ][ N ], b [ N ][ N ]; // a\u7528\u4e8e\u5b58\u50a8\u539f\u6570\u7ec4\uff0cb\u7528\u4e8e\u5b58\u50a8\u6700\u7ec8\u662f\u5426\u88ab\u6d88\u9664 // \u5982\u679c\u6a2a\u6216\u7ad6\u8fde\u7eed3\u4e2a\u5143\u7d20\u76f8\u540c\u5219\u88ab\u6d88\u9664 void check ( int x , int y ){ if ( a [ x ][ y -1 ] == a [ x ][ y ] && a [ x ][ y ] == a [ x ][ y + 1 ]) // \u6a2a\u7740 b [ x ][ y -1 ] = b [ x ][ y ] = b [ x ][ y + 1 ] = 1 ; if ( a [ x -1 ][ y ] == a [ x ][ y ] && a [ x ][ y ] == a [ x + 1 ][ y ]) // \u7ad6\u7740 b [ x -1 ][ y ] = b [ x ][ y ] = b [ x + 1 ][ y ] = 1 ; } int main (){ cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) cin >> a [ i ][ j ]; // \u8bfb\u5165\u6570\u7ec4 for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) check ( i , j ); // \u4f9d\u6b21\u5224\u65ad\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u80fd\u591f\u88ab\u6d88\u9664 for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= m ; j ++ ){ if ( b [ i ][ j ]) cout << \"0 \" ; // \u5982\u679c\u88ab\u6d88\u9664\u5219\u8f93\u51fa0 else cout << a [ i ][ j ] << \" \" ; // \u5426\u5219\u8f93\u51fa\u539f\u59cb\u503c } cout << \" \\n \" ; // \u8bb0\u5f97\u6362\u884c } return 0 ; }","title":"\u7b2c2\u9898 \u6d88\u9664\u7c7b\u6e38\u620f"},{"location":"CSP/%E7%AC%AC6%E6%AC%A1/#3","text":"\u9898\u76ee\u94fe\u63a5: \u753b\u56fe TAG: \u5927\u6a21\u62df \u641c\u7d22 DFS \u601d\u8def: \u672c\u9898\u6700\u5927\u7684\u5751\u70b9\u5728\u4e8e\u6a2a\u7eb5\u5750\u6807\u662f\u53cd\u8fc7\u6765\u7684\u3002\u5176\u4ed6\u7684\u6309\u8981\u6c42\u6a21\u62df\u5373\u53ef\u3002\u586b\u5145\u64cd\u4f5c\u53ef\u7528DFS\u6216\u8005BFS\u5b9e\u73b0\uff0c\u8fd9\u91cc\u91c7\u7528DFS\uff08\u592a\u83dc\u4e86\uff0c\u4e4b\u524d\u7528BFS\u5199\u70b8\u4e86\uff09\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u8bd5\u7740\u7528BFS\u5199\u4e00\u5199\u3002 \u4ee3\u7801: #include <bits/stdc++.h> using namespace std ; const int N = 110 ; int m , n , q ; char a [ N ][ N ]; // \u5b58\u56fe int dx [] = { 0 , 1 , 0 , -1 }; // \u65b9\u5411\u6570\u7ec4 int dy [] = { 1 , 0 , -1 , 0 }; void dfs ( int x , int y , char ch ){ a [ x ][ y ] = ch ; // \u586b\u5145\u8fd9\u4e00\u70b9 for ( int i = 0 ; i < 4 ; i ++ ){ // \u904d\u5386\u56db\u4e2a\u65b9\u5411 int nx = x + dx [ i ], ny = y + dy [ i ]; // \u4e0b\u9762\u7684\u5224\u65ad\u4f9d\u6b21\u662f\uff1a\u662f\u5426\u8d8a\u754c\uff0c\u662f\u5426\u5df2\u7ecf\u586b\u5145\u8fc7\uff0c\u662f\u5426\u78b0\u5230\u8fb9\u754c if ( nx < 0 || nx >= n || ny < 0 || ny >= m || a [ nx ][ ny ] == ch || a [ nx ][ ny ] == '|' || a [ nx ][ ny ] == '-' || a [ nx ][ ny ] == '+' ) continue ; dfs ( nx , ny , ch ); // \u6ca1\u6709\u7684\u8bdd\u7ee7\u7eed\u641c\u7d22 } } // \u672c\u9898\u9700\u8981\u6ce8\u610f\u7684\u70b9\u662f\u6a2a\u7eb5\u5750\u6807\u662f\u53cd\u8fc7\u6765\u7684 int main (){ memset ( a , '.' , sizeof a ); // \u5c06a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u521d\u59cb\u5316\u4e3a'.' cin >> m >> n >> q ; while ( q -- ){ // \u8bfb\u5165q\u6b21\u64cd\u4f5c int op ; cin >> op ; if ( op ){ // \u586b\u5145\u64cd\u4f5c int x , y ; char ch ; cin >> x >> y >> ch ; dfs ( y , x , ch ); // \u4f7f\u7528dfs\u8fdb\u884c\u586b\u5145 } else { // \u753b\u7ebf\u64cd\u4f5c int x1 , y1 , x2 , y2 ; cin >> x1 >> y1 >> x2 >> y2 ; if ( x1 == x2 ){ // \u7ad6\u7ebf if ( y1 > y2 ) swap ( y1 , y2 ); // \u786e\u4fdd\u4e0b\u4e00\u884c\u7684for\u5faa\u73af\u662f\u4ece\u5c0f\u5230\u5927\u904d\u5386 for ( int i = y1 ; i <= y2 ; i ++ ){ if ( a [ i ][ x1 ] == '+' ) continue ; if ( a [ i ][ x1 ] == '-' ) a [ i ][ x1 ] = '+' ; else a [ i ][ x1 ] = '|' ; } } else { // \u6a2a\u7ebf if ( x1 > x2 ) swap ( x1 , x2 ); for ( int i = x1 ; i <= x2 ; i ++ ){ if ( a [ y1 ][ i ] == '+' ) continue ; if ( a [ y1 ][ i ] == '|' ) a [ y1 ][ i ] = '+' ; else a [ y1 ][ i ] = '-' ; } } } } for ( int i = n -1 ; i >= 0 ; i -- ){ for ( int j = 0 ; j < m ; j ++ ){ cout << a [ i ][ j ]; } cout << \" \\n \" ; } return 0 ; }","title":"\u7b2c3\u9898 \u753b\u56fe"},{"location":"CSP/%E7%AC%AC6%E6%AC%A1/#4","text":"\u9898\u76ee\u94fe\u63a5: \u9001\u8d27 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: \u6682\u65e0","title":"\u7b2c4\u9898 \u9001\u8d27"},{"location":"CSP/%E7%AC%AC6%E6%AC%A1/#5","text":"\u9898\u76ee\u94fe\u63a5: \u77e9\u9635 TAG: \u6682\u65e0 \u601d\u8def: \u6682\u65e0 \u4ee3\u7801: ???+ \u89c6\u9891\u9898\u89e3 \u6682\u65e0","title":"\u7b2c5\u9898 \u77e9\u9635"},{"location":"%E4%B8%AD%E5%AD%A6/","text":"\u4e2d\u5b66\u7b80\u4ecb \u00b6 \u6b64\u5206\u7c7b\u4e0b\u8bb0\u5f55\u4e86\u4e2d\u5b66\u9636\u6bb5\u90e8\u5206\u79d1\u76ee\u90e8\u5206\u77e5\u8bc6\u70b9/\u516c\u5f0f","title":"\u7b80\u4ecb"},{"location":"%E4%B8%AD%E5%AD%A6/#_1","text":"\u6b64\u5206\u7c7b\u4e0b\u8bb0\u5f55\u4e86\u4e2d\u5b66\u9636\u6bb5\u90e8\u5206\u79d1\u76ee\u90e8\u5206\u77e5\u8bc6\u70b9/\u516c\u5f0f","title":"\u4e2d\u5b66\u7b80\u4ecb"},{"location":"%E4%B8%AD%E5%AD%A6/%E5%88%9D%E4%B8%AD/%E7%89%A9%E7%90%86/%E7%89%A9%E7%90%86/","text":"\u6d4b\u91cf \u00b6 \u58f0\u97f3 \u00b6 \u5149 \u00b6","title":"\u7269\u7406"},{"location":"%E4%B8%AD%E5%AD%A6/%E5%88%9D%E4%B8%AD/%E7%89%A9%E7%90%86/%E7%89%A9%E7%90%86/#_1","text":"","title":"\u6d4b\u91cf"},{"location":"%E4%B8%AD%E5%AD%A6/%E5%88%9D%E4%B8%AD/%E7%89%A9%E7%90%86/%E7%89%A9%E7%90%86/#_2","text":"","title":"\u58f0\u97f3"},{"location":"%E4%B8%AD%E5%AD%A6/%E5%88%9D%E4%B8%AD/%E7%89%A9%E7%90%86/%E7%89%A9%E7%90%86/#_3","text":"","title":"\u5149"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%98/","text":"\u4e13\u98981\uff1a\u6c14\u5019\u5206\u6790\u3001\u533a\u4f4d\u6761\u4ef6\u5206\u6790 \u00b6 \u4e13\u98982\uff1a\u7b49\u503c\u7ebf\u3001\u5730\u7406\u8ba1\u7b97 \u00b6 \u4e13\u98983\uff1a\u533a\u57df\u53d1\u5c55 \u00b6 \u4e13\u98984\uff1a\u539f\u7406\u7c7b\u95ee\u9898 \u00b6","title":"\u4e13\u9898"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%98/#1","text":"","title":"\u4e13\u98981\uff1a\u6c14\u5019\u5206\u6790\u3001\u533a\u4f4d\u6761\u4ef6\u5206\u6790"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%98/#2","text":"","title":"\u4e13\u98982\uff1a\u7b49\u503c\u7ebf\u3001\u5730\u7406\u8ba1\u7b97"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%98/#3","text":"","title":"\u4e13\u98983\uff1a\u533a\u57df\u53d1\u5c55"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%B8%93%E9%A2%98/%E4%B8%93%E9%A2%98/#4","text":"","title":"\u4e13\u98984\uff1a\u539f\u7406\u7c7b\u95ee\u9898"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/","text":"\u4eba\u53e3 \u00b6 \u57ce\u5e02 \u00b6 \u4ea7\u4e1a\u7ecf\u6d4e \u00b6 \u6587\u5316\u4e0e3S \u00b6","title":"\u4eba\u6587\u5730\u7406"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/#_1","text":"","title":"\u4eba\u53e3"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/#_2","text":"","title":"\u57ce\u5e02"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/#_3","text":"","title":"\u4ea7\u4e1a\u7ecf\u6d4e"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/%E4%BA%BA%E6%96%87%E5%9C%B0%E7%90%86/#3s","text":"","title":"\u6587\u5316\u4e0e3S"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/","text":"\u5730\u57df\u5206\u5f02\u89c4\u5f8b \u00b6 \u81ea\u7136\u8d44\u6e90\u4e0e\u81ea\u7136\u707e\u5bb3 \u00b6 \u533a\u57df\u5f00\u53d11\uff1a\u8d44\u6e90\u5f00\u53d1\u4e0e\u5229\u7528\u3001\u4ea7\u4e1a\u7ed3\u6784\u8c03\u6574 \u00b6 \u533a\u57df\u5f00\u53d12\uff1a\u751f\u6001\u73af\u5883\u6cbb\u7406 \u00b6 \u533a\u57df\u5f00\u53d13\uff1a\u6d41\u57df\u6574\u6cbb\u4e0e\u5f00\u53d1 \u00b6 \u53ef\u6301\u7eed\u53d1\u5c55 \u00b6","title":"\u62d3\u5c55\u90e8\u5206"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/#_1","text":"","title":"\u5730\u57df\u5206\u5f02\u89c4\u5f8b"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/#_2","text":"","title":"\u81ea\u7136\u8d44\u6e90\u4e0e\u81ea\u7136\u707e\u5bb3"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/#1","text":"","title":"\u533a\u57df\u5f00\u53d11\uff1a\u8d44\u6e90\u5f00\u53d1\u4e0e\u5229\u7528\u3001\u4ea7\u4e1a\u7ed3\u6784\u8c03\u6574"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/#2","text":"","title":"\u533a\u57df\u5f00\u53d12\uff1a\u751f\u6001\u73af\u5883\u6cbb\u7406"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/#3","text":"","title":"\u533a\u57df\u5f00\u53d13\uff1a\u6d41\u57df\u6574\u6cbb\u4e0e\u5f00\u53d1"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/%E6%8B%93%E5%B1%95%E9%83%A8%E5%88%86/#_3","text":"","title":"\u53ef\u6301\u7eed\u53d1\u5c55"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/","text":"\u5b87\u5b99\u4e0e\u5730\u7403 \u00b6 \u5ca9\u77f3\u4e0e\u5730\u8c8c \u00b6 \u5927\u6c14\u5708 \u00b6 \u6c34\u5708 \u00b6","title":"\u81ea\u7136\u5730\u7406"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/#_1","text":"","title":"\u5b87\u5b99\u4e0e\u5730\u7403"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/#_2","text":"","title":"\u5ca9\u77f3\u4e0e\u5730\u8c8c"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/#_3","text":"","title":"\u5927\u6c14\u5708"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/%E8%87%AA%E7%84%B6%E5%9C%B0%E7%90%86/#_4","text":"","title":"\u6c34\u5708"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/","text":"\u5b66\u4e60\u54f2\u5b66 \u8fd0\u7528\u54f2\u5b66 \u00b6 \u8ba4\u8bc6\u4e16\u754c \u5c0a\u91cd\u5b9e\u9645 \u00b6 \u63a2\u7d22\u89c4\u5f8b \u5b9e\u4e8b\u6c42\u662f \u00b6 \u628a\u63e1\u8054\u7cfb \u4fc3\u8fdb\u53d1\u5c55 \u00b6 \u5206\u6790\u77db\u76fe \u8fa9\u8bc1\u601d\u7ef4 \u00b6 \u6ce8\u91cd\u5b9e\u8df5 \u5bfb\u6c42\u771f\u77e5 \u00b6 \u638c\u63e1\u7406\u8bba \u575a\u6301\u771f\u7406 \u00b6 \u63a2\u6c42\u4ef7\u503c \u7e41\u8363\u6587\u5316 \u00b6","title":"\u54f2\u5b66\u5e38\u8bc6"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/#_1","text":"","title":"\u5b66\u4e60\u54f2\u5b66 \u8fd0\u7528\u54f2\u5b66"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/#_2","text":"","title":"\u8ba4\u8bc6\u4e16\u754c \u5c0a\u91cd\u5b9e\u9645"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/#_3","text":"","title":"\u63a2\u7d22\u89c4\u5f8b \u5b9e\u4e8b\u6c42\u662f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/#_4","text":"","title":"\u628a\u63e1\u8054\u7cfb \u4fc3\u8fdb\u53d1\u5c55"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/#_5","text":"","title":"\u5206\u6790\u77db\u76fe \u8fa9\u8bc1\u601d\u7ef4"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/#_6","text":"","title":"\u6ce8\u91cd\u5b9e\u8df5 \u5bfb\u6c42\u771f\u77e5"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/#_7","text":"","title":"\u638c\u63e1\u7406\u8bba \u575a\u6301\u771f\u7406"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/%E5%93%B2%E5%AD%A6%E5%B8%B8%E8%AF%86/#_8","text":"","title":"\u63a2\u6c42\u4ef7\u503c \u7e41\u8363\u6587\u5316"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/","text":"\u4eba\u6c11\u653f\u6743 \u4eba\u6c11\u5f53\u5bb6 \u00b6 \u56fd\u5bb6\u673a\u6784 \u670d\u52a1\u4eba\u6c11 \u00b6 \u6c11\u4e3b\u653f\u6cbb \u4f9d\u6cd5\u6cbb\u56fd \u00b6 \u56fd\u5bb6\u7edf\u4e00 \u6c11\u65cf\u56e2\u7ed3 \u00b6 \u7acb\u515a\u4e3a\u516c \u6267\u653f\u5174\u56fd \u00b6 \u5b66\u4e60\u653f\u6cbb\u53c2\u4e0e \u00b6","title":"\u653f\u6cbb\u5e38\u8bc6"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/#_1","text":"","title":"\u4eba\u6c11\u653f\u6743 \u4eba\u6c11\u5f53\u5bb6"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/#_2","text":"","title":"\u56fd\u5bb6\u673a\u6784 \u670d\u52a1\u4eba\u6c11"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/#_3","text":"","title":"\u6c11\u4e3b\u653f\u6cbb \u4f9d\u6cd5\u6cbb\u56fd"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/#_4","text":"","title":"\u56fd\u5bb6\u7edf\u4e00 \u6c11\u65cf\u56e2\u7ed3"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/#_5","text":"","title":"\u7acb\u515a\u4e3a\u516c \u6267\u653f\u5174\u56fd"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/%E6%94%BF%E6%B2%BB%E5%B8%B8%E8%AF%86/#_6","text":"","title":"\u5b66\u4e60\u653f\u6cbb\u53c2\u4e0e"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/","text":"\u53d1\u5c55\u7ecf\u6d4e \u6539\u5584\u751f\u6d3b \u00b6 \u4ea7\u4e1a\u53d1\u5c55 \u52b3\u52a8\u5c31\u4e1a \u00b6 \u5408\u7406\u6d88\u8d39 \u4f9d\u6cd5\u7ef4\u6743 \u00b6 \u56fd\u5bb6\u8d22\u653f \u4f9d\u6cd5\u7eb3\u7a0e \u00b6 \u91d1\u878d\u670d\u52a1 \u5bb6\u5ead\u7406\u8d22 \u00b6 \u7ecf\u6d4e\u5236\u5ea6_\u793e\u4f1a\u4fdd\u969c \u00b6 \u5e02\u573a\u8c03\u8282 \u5b8f\u89c2\u8c03\u63a7 \u00b6 \u5bf9\u5916\u5f00\u53d1 \u5408\u4f5c\u5171\u8d62 \u00b6 \u62d3\u5c55\u90e8\u5206\uff1a\u5b66\u70b9\u7ecf\u6d4e\u5206\u6790 \u00b6","title":"\u7ecf\u6d4e\u5e38\u8bc6"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/#_1","text":"","title":"\u53d1\u5c55\u7ecf\u6d4e \u6539\u5584\u751f\u6d3b"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/#_2","text":"","title":"\u4ea7\u4e1a\u53d1\u5c55 \u52b3\u52a8\u5c31\u4e1a"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/#_3","text":"","title":"\u5408\u7406\u6d88\u8d39 \u4f9d\u6cd5\u7ef4\u6743"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/#_4","text":"","title":"\u56fd\u5bb6\u8d22\u653f \u4f9d\u6cd5\u7eb3\u7a0e"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/#_5","text":"","title":"\u91d1\u878d\u670d\u52a1 \u5bb6\u5ead\u7406\u8d22"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/#_","text":"","title":"\u7ecf\u6d4e\u5236\u5ea6_\u793e\u4f1a\u4fdd\u969c"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/#_6","text":"","title":"\u5e02\u573a\u8c03\u8282 \u5b8f\u89c2\u8c03\u63a7"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/#_7","text":"","title":"\u5bf9\u5916\u5f00\u53d1 \u5408\u4f5c\u5171\u8d62"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%94%BF%E6%B2%BB/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/%E7%BB%8F%E6%B5%8E%E5%B8%B8%E8%AF%86/#_8","text":"","title":"\u62d3\u5c55\u90e8\u5206\uff1a\u5b66\u70b9\u7ecf\u6d4e\u5206\u6790"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/","text":"\u4e09\u89d2\u51fd\u6570 \u00b6 \u51fd\u6570\u5173\u7cfb \u00b6 \u5012\u6570\u5173\u7cfb \u00b6 tan\\alpha cot\\alpha=1 tan\\alpha cot\\alpha=1 sin\\alpha csc\\alpha=1 sin\\alpha csc\\alpha=1 cos\\alpha sec\\alpha=1 cos\\alpha sec\\alpha=1 \u5546\u6570\u5173\u7cfb \u00b6 tan\\alpha=\\frac{sin\\alpha}{cos\\alpha} tan\\alpha=\\frac{sin\\alpha}{cos\\alpha} cot\\alpha=\\frac{cos\\alpha}{sin\\alpha} cot\\alpha=\\frac{cos\\alpha}{sin\\alpha} \u5e73\u65b9\u5173\u7cfb \u00b6 sin^2\\alpha+cos^2\\alpha=1 sin^2\\alpha+cos^2\\alpha=1 1+tan^2\\alpha=sec^2\\alpha 1+tan^2\\alpha=sec^2\\alpha 1+cot^2\\alpha=csc^2\\alpha 1+cot^2\\alpha=csc^2\\alpha \u8bf1\u5bfc\u516c\u5f0f \u00b6 \u4e0d\u8981\u80cc\uff0c\u8bb0\u4f4f\u53e3\u8bc0\u5373\u53ef \u53e3\u8bc0\uff1a\u5947\u53d8\u5076\u4e0d\u53d8\uff0c\u7b26\u53f7\u770b\u8c61\u9650 \u548c\u5dee\u89d2\u516c\u5f0f \u00b6 \u4e8c\u89d2\u548c\u5dee\u516c\u5f0f \u00b6 sin(\\alpha+\\beta)=sin\\alpha cos\\beta+cos\\alpha sin\\beta sin(\\alpha+\\beta)=sin\\alpha cos\\beta+cos\\alpha sin\\beta sin(\\alpha-\\beta)=sin\\alpha cos\\beta-cos\\alpha sin\\beta sin(\\alpha-\\beta)=sin\\alpha cos\\beta-cos\\alpha sin\\beta cos(\\alpha+\\beta)=cos\\alpha cos\\beta-sin\\alpha sin\\beta cos(\\alpha+\\beta)=cos\\alpha cos\\beta-sin\\alpha sin\\beta cos(\\alpha-\\beta)=cos\\alpha cos\\beta+sin\\alpha sin\\beta cos(\\alpha-\\beta)=cos\\alpha cos\\beta+sin\\alpha sin\\beta tan(\\alpha+\\beta)=\\frac{tan\\alpha+tan\\beta}{1-tan\\alpha tan\\beta} tan(\\alpha+\\beta)=\\frac{tan\\alpha+tan\\beta}{1-tan\\alpha tan\\beta} tan(\\alpha-\\beta)=\\frac{tan\\alpha-tan\\beta}{1+tan\\alpha tan\\beta} tan(\\alpha-\\beta)=\\frac{tan\\alpha-tan\\beta}{1+tan\\alpha tan\\beta} \u548c\u5dee\u5316\u79ef\u516c\u5f0f \u00b6 sin\\alpha+sin\\beta=2sin\\frac{\\alpha+\\beta}{2}cos\\frac{\\alpha-\\beta}{2} sin\\alpha+sin\\beta=2sin\\frac{\\alpha+\\beta}{2}cos\\frac{\\alpha-\\beta}{2} sin\\alpha-sin\\beta=2cos\\frac{\\alpha+\\beta}{2}sin\\frac{\\alpha-\\beta}{2} sin\\alpha-sin\\beta=2cos\\frac{\\alpha+\\beta}{2}sin\\frac{\\alpha-\\beta}{2} cos\\alpha+cos\\beta=2cos\\frac{\\alpha+\\beta}{2}cos\\frac{\\alpha-\\beta}{2} cos\\alpha+cos\\beta=2cos\\frac{\\alpha+\\beta}{2}cos\\frac{\\alpha-\\beta}{2} cos\\alpha-cos\\beta=-2sin\\frac{\\alpha+\\beta}{2}sin\\frac{\\alpha-\\beta}{2} cos\\alpha-cos\\beta=-2sin\\frac{\\alpha+\\beta}{2}sin\\frac{\\alpha-\\beta}{2} tan\\alpha+tan\\beta=\\frac{sin(\\alpha+\\beta)}{cos\\alpha cos\\beta} tan\\alpha+tan\\beta=\\frac{sin(\\alpha+\\beta)}{cos\\alpha cos\\beta} \u53e3\u8bc0\uff1a\u6b63\u52a0\u6b63\uff0c\u6b63\u5728\u524d\uff0c\u4f59\u52a0\u4f59\uff0c\u4f59\u5e76\u80a9\uff0c\u6b63\u51cf\u6b63\uff0c\u4f59\u5728\u524d\uff0c\u4f59\u51cf\u4f59\uff0c\u8d1f\u6b63\u5f26 \u79ef\u5316\u548c\u5dee\u516c\u5f0f \u00b6 cos\\alpha sin\\beta=\\frac{1}{2}[sin(\\alpha+\\beta)-sin(\\alpha-\\beta)] cos\\alpha sin\\beta=\\frac{1}{2}[sin(\\alpha+\\beta)-sin(\\alpha-\\beta)] sin\\alpha cos\\beta=\\frac{1}{2}[sin(\\alpha+\\beta)+sin(\\alpha-\\beta)] sin\\alpha cos\\beta=\\frac{1}{2}[sin(\\alpha+\\beta)+sin(\\alpha-\\beta)] cos\\alpha cos\\beta=\\frac{1}{2}[cos(\\alpha-\\beta)+cos(\\alpha+\\beta)] cos\\alpha cos\\beta=\\frac{1}{2}[cos(\\alpha-\\beta)+cos(\\alpha+\\beta)] sin\\alpha sin\\beta=\\frac{1}{2}[cos(\\alpha-\\beta)-cos(\\alpha+\\beta)] sin\\alpha sin\\beta=\\frac{1}{2}[cos(\\alpha-\\beta)-cos(\\alpha+\\beta)] \u500d\u89d2\u516c\u5f0f \u00b6 \u4e8c\u500d\u89d2\u516c\u5f0f \u00b6 sin2\\alpha=2sin\\alpha cos\\alpha=\\frac{2tan\\alpha}{1+tan^2\\alpha} sin2\\alpha=2sin\\alpha cos\\alpha=\\frac{2tan\\alpha}{1+tan^2\\alpha} cos2\\alpha=cos^2\\alpha-sin^2\\alpha=2cos^2\\alpha-1=1-2sin^2\\alpha=\\frac{1-tan^2\\alpha}{1+tan^2\\alpha} cos2\\alpha=cos^2\\alpha-sin^2\\alpha=2cos^2\\alpha-1=1-2sin^2\\alpha=\\frac{1-tan^2\\alpha}{1+tan^2\\alpha} tan2\\alpha=\\frac{2tan\\alpha}{1-tan^2\\alpha} tan2\\alpha=\\frac{2tan\\alpha}{1-tan^2\\alpha} \u534a\u89d2\u516c\u5f0f \u00b6 sin\\frac{\\alpha}{2}=\\pm\\sqrt{\\frac{1-cos\\alpha}{2}} sin\\frac{\\alpha}{2}=\\pm\\sqrt{\\frac{1-cos\\alpha}{2}} cos\\frac{\\alpha}{2}=\\pm\\sqrt{\\frac{1+cos\\alpha}{2}} cos\\frac{\\alpha}{2}=\\pm\\sqrt{\\frac{1+cos\\alpha}{2}} tan\\frac{\\alpha}{2}=\\frac{sin\\alpha}{1+cos\\alpha}=\\frac{1-cos\\alpha}{sin\\alpha}=\\pm\\sqrt{\\frac{1-cos\\alpha}{1+cos\\alpha}} tan\\frac{\\alpha}{2}=\\frac{sin\\alpha}{1+cos\\alpha}=\\frac{1-cos\\alpha}{sin\\alpha}=\\pm\\sqrt{\\frac{1-cos\\alpha}{1+cos\\alpha}} cot\\frac{\\alpha}{2}=\\frac{1+cos\\alpha}{sin\\alpha}=\\frac{sin\\alpha}{1-cos\\alpha}=\\pm\\sqrt{\\frac{1+cos\\alpha}{1-cos\\alpha}} cot\\frac{\\alpha}{2}=\\frac{1+cos\\alpha}{sin\\alpha}=\\frac{sin\\alpha}{1-cos\\alpha}=\\pm\\sqrt{\\frac{1+cos\\alpha}{1-cos\\alpha}} \u6b63\u8d1f\u7531 \\frac{\\alpha}{2} \\frac{\\alpha}{2} \u6240\u5728\u7684\u8c61\u9650\u51b3\u5b9a \u4e07\u80fd\u516c\u5f0f \u00b6 sin\\alpha=\\frac{2tan\\frac{\\alpha}{2}}{1+tan^2\\frac{\\alpha}{2}} sin\\alpha=\\frac{2tan\\frac{\\alpha}{2}}{1+tan^2\\frac{\\alpha}{2}} cos\\alpha=\\frac{1-tan^2\\frac{\\alpha}{2}}{1+tan^2\\frac{\\alpha}{2}} cos\\alpha=\\frac{1-tan^2\\frac{\\alpha}{2}}{1+tan^2\\frac{\\alpha}{2}} tan\\alpha=\\frac{2tan\\frac{\\alpha}{2}}{1-tan^2\\frac{\\alpha}{2}} tan\\alpha=\\frac{2tan\\frac{\\alpha}{2}}{1-tan^2\\frac{\\alpha}{2}} \u8f85\u52a9\u89d2\u516c\u5f0f \u00b6 asin\\alpha+bcos\\alpha=\\sqrt{a^2+b^2}sin(\\alpha+\\varphi),tan\\varphi=\\frac{b}{a} asin\\alpha+bcos\\alpha=\\sqrt{a^2+b^2}sin(\\alpha+\\varphi),tan\\varphi=\\frac{b}{a} \u964d\u5e42\u516c\u5f0f \u00b6 sin^2\\alpha=\\frac{1-cos2\\alpha}{2} sin^2\\alpha=\\frac{1-cos2\\alpha}{2} cos^2\\alpha=\\frac{1+cos2\\alpha}{2} cos^2\\alpha=\\frac{1+cos2\\alpha}{2} tan^2\\alpha=\\frac{1-cos2\\alpha}{1+cos2\\alpha} tan^2\\alpha=\\frac{1-cos2\\alpha}{1+cos2\\alpha} \u6b63\u5f26\u5b9a\u7406 \u00b6 \\frac{a}{sinA}=\\frac{b}{sinB}=\\frac{c}{sinC}=2R \\frac{a}{sinA}=\\frac{b}{sinB}=\\frac{c}{sinC}=2R S=\\frac{1}{2}absinC=\\frac{1}{2}acsinB=\\frac{1}{2}bcsinA=\\frac{abc}{4R} S=\\frac{1}{2}absinC=\\frac{1}{2}acsinB=\\frac{1}{2}bcsinA=\\frac{abc}{4R} a=2RsinA;\\ \\ \\ b=2RsinB;\\ \\ \\ c=2RsinC a=2RsinA;\\ \\ \\ b=2RsinB;\\ \\ \\ c=2RsinC a:b:c=sinA:sinB:sinC a:b:c=sinA:sinB:sinC \u4f59\u5f26\u5b9a\u7406 \u00b6 a^2=b^2+c^2-2bccos\\alpha a^2=b^2+c^2-2bccos\\alpha cosA=\\frac{b^2+c^2-a^2}{2bc} cosA=\\frac{b^2+c^2-a^2}{2bc}","title":"\u4e09\u89d2\u51fd\u6570"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_1","text":"","title":"\u4e09\u89d2\u51fd\u6570"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_2","text":"","title":"\u51fd\u6570\u5173\u7cfb"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_3","text":"tan\\alpha cot\\alpha=1 tan\\alpha cot\\alpha=1 sin\\alpha csc\\alpha=1 sin\\alpha csc\\alpha=1 cos\\alpha sec\\alpha=1 cos\\alpha sec\\alpha=1","title":"\u5012\u6570\u5173\u7cfb"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_4","text":"tan\\alpha=\\frac{sin\\alpha}{cos\\alpha} tan\\alpha=\\frac{sin\\alpha}{cos\\alpha} cot\\alpha=\\frac{cos\\alpha}{sin\\alpha} cot\\alpha=\\frac{cos\\alpha}{sin\\alpha}","title":"\u5546\u6570\u5173\u7cfb"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_5","text":"sin^2\\alpha+cos^2\\alpha=1 sin^2\\alpha+cos^2\\alpha=1 1+tan^2\\alpha=sec^2\\alpha 1+tan^2\\alpha=sec^2\\alpha 1+cot^2\\alpha=csc^2\\alpha 1+cot^2\\alpha=csc^2\\alpha","title":"\u5e73\u65b9\u5173\u7cfb"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_6","text":"\u4e0d\u8981\u80cc\uff0c\u8bb0\u4f4f\u53e3\u8bc0\u5373\u53ef \u53e3\u8bc0\uff1a\u5947\u53d8\u5076\u4e0d\u53d8\uff0c\u7b26\u53f7\u770b\u8c61\u9650","title":"\u8bf1\u5bfc\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_7","text":"","title":"\u548c\u5dee\u89d2\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_8","text":"sin(\\alpha+\\beta)=sin\\alpha cos\\beta+cos\\alpha sin\\beta sin(\\alpha+\\beta)=sin\\alpha cos\\beta+cos\\alpha sin\\beta sin(\\alpha-\\beta)=sin\\alpha cos\\beta-cos\\alpha sin\\beta sin(\\alpha-\\beta)=sin\\alpha cos\\beta-cos\\alpha sin\\beta cos(\\alpha+\\beta)=cos\\alpha cos\\beta-sin\\alpha sin\\beta cos(\\alpha+\\beta)=cos\\alpha cos\\beta-sin\\alpha sin\\beta cos(\\alpha-\\beta)=cos\\alpha cos\\beta+sin\\alpha sin\\beta cos(\\alpha-\\beta)=cos\\alpha cos\\beta+sin\\alpha sin\\beta tan(\\alpha+\\beta)=\\frac{tan\\alpha+tan\\beta}{1-tan\\alpha tan\\beta} tan(\\alpha+\\beta)=\\frac{tan\\alpha+tan\\beta}{1-tan\\alpha tan\\beta} tan(\\alpha-\\beta)=\\frac{tan\\alpha-tan\\beta}{1+tan\\alpha tan\\beta} tan(\\alpha-\\beta)=\\frac{tan\\alpha-tan\\beta}{1+tan\\alpha tan\\beta}","title":"\u4e8c\u89d2\u548c\u5dee\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_9","text":"sin\\alpha+sin\\beta=2sin\\frac{\\alpha+\\beta}{2}cos\\frac{\\alpha-\\beta}{2} sin\\alpha+sin\\beta=2sin\\frac{\\alpha+\\beta}{2}cos\\frac{\\alpha-\\beta}{2} sin\\alpha-sin\\beta=2cos\\frac{\\alpha+\\beta}{2}sin\\frac{\\alpha-\\beta}{2} sin\\alpha-sin\\beta=2cos\\frac{\\alpha+\\beta}{2}sin\\frac{\\alpha-\\beta}{2} cos\\alpha+cos\\beta=2cos\\frac{\\alpha+\\beta}{2}cos\\frac{\\alpha-\\beta}{2} cos\\alpha+cos\\beta=2cos\\frac{\\alpha+\\beta}{2}cos\\frac{\\alpha-\\beta}{2} cos\\alpha-cos\\beta=-2sin\\frac{\\alpha+\\beta}{2}sin\\frac{\\alpha-\\beta}{2} cos\\alpha-cos\\beta=-2sin\\frac{\\alpha+\\beta}{2}sin\\frac{\\alpha-\\beta}{2} tan\\alpha+tan\\beta=\\frac{sin(\\alpha+\\beta)}{cos\\alpha cos\\beta} tan\\alpha+tan\\beta=\\frac{sin(\\alpha+\\beta)}{cos\\alpha cos\\beta} \u53e3\u8bc0\uff1a\u6b63\u52a0\u6b63\uff0c\u6b63\u5728\u524d\uff0c\u4f59\u52a0\u4f59\uff0c\u4f59\u5e76\u80a9\uff0c\u6b63\u51cf\u6b63\uff0c\u4f59\u5728\u524d\uff0c\u4f59\u51cf\u4f59\uff0c\u8d1f\u6b63\u5f26","title":"\u548c\u5dee\u5316\u79ef\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_10","text":"cos\\alpha sin\\beta=\\frac{1}{2}[sin(\\alpha+\\beta)-sin(\\alpha-\\beta)] cos\\alpha sin\\beta=\\frac{1}{2}[sin(\\alpha+\\beta)-sin(\\alpha-\\beta)] sin\\alpha cos\\beta=\\frac{1}{2}[sin(\\alpha+\\beta)+sin(\\alpha-\\beta)] sin\\alpha cos\\beta=\\frac{1}{2}[sin(\\alpha+\\beta)+sin(\\alpha-\\beta)] cos\\alpha cos\\beta=\\frac{1}{2}[cos(\\alpha-\\beta)+cos(\\alpha+\\beta)] cos\\alpha cos\\beta=\\frac{1}{2}[cos(\\alpha-\\beta)+cos(\\alpha+\\beta)] sin\\alpha sin\\beta=\\frac{1}{2}[cos(\\alpha-\\beta)-cos(\\alpha+\\beta)] sin\\alpha sin\\beta=\\frac{1}{2}[cos(\\alpha-\\beta)-cos(\\alpha+\\beta)]","title":"\u79ef\u5316\u548c\u5dee\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_11","text":"","title":"\u500d\u89d2\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_12","text":"sin2\\alpha=2sin\\alpha cos\\alpha=\\frac{2tan\\alpha}{1+tan^2\\alpha} sin2\\alpha=2sin\\alpha cos\\alpha=\\frac{2tan\\alpha}{1+tan^2\\alpha} cos2\\alpha=cos^2\\alpha-sin^2\\alpha=2cos^2\\alpha-1=1-2sin^2\\alpha=\\frac{1-tan^2\\alpha}{1+tan^2\\alpha} cos2\\alpha=cos^2\\alpha-sin^2\\alpha=2cos^2\\alpha-1=1-2sin^2\\alpha=\\frac{1-tan^2\\alpha}{1+tan^2\\alpha} tan2\\alpha=\\frac{2tan\\alpha}{1-tan^2\\alpha} tan2\\alpha=\\frac{2tan\\alpha}{1-tan^2\\alpha}","title":"\u4e8c\u500d\u89d2\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_13","text":"sin\\frac{\\alpha}{2}=\\pm\\sqrt{\\frac{1-cos\\alpha}{2}} sin\\frac{\\alpha}{2}=\\pm\\sqrt{\\frac{1-cos\\alpha}{2}} cos\\frac{\\alpha}{2}=\\pm\\sqrt{\\frac{1+cos\\alpha}{2}} cos\\frac{\\alpha}{2}=\\pm\\sqrt{\\frac{1+cos\\alpha}{2}} tan\\frac{\\alpha}{2}=\\frac{sin\\alpha}{1+cos\\alpha}=\\frac{1-cos\\alpha}{sin\\alpha}=\\pm\\sqrt{\\frac{1-cos\\alpha}{1+cos\\alpha}} tan\\frac{\\alpha}{2}=\\frac{sin\\alpha}{1+cos\\alpha}=\\frac{1-cos\\alpha}{sin\\alpha}=\\pm\\sqrt{\\frac{1-cos\\alpha}{1+cos\\alpha}} cot\\frac{\\alpha}{2}=\\frac{1+cos\\alpha}{sin\\alpha}=\\frac{sin\\alpha}{1-cos\\alpha}=\\pm\\sqrt{\\frac{1+cos\\alpha}{1-cos\\alpha}} cot\\frac{\\alpha}{2}=\\frac{1+cos\\alpha}{sin\\alpha}=\\frac{sin\\alpha}{1-cos\\alpha}=\\pm\\sqrt{\\frac{1+cos\\alpha}{1-cos\\alpha}} \u6b63\u8d1f\u7531 \\frac{\\alpha}{2} \\frac{\\alpha}{2} \u6240\u5728\u7684\u8c61\u9650\u51b3\u5b9a","title":"\u534a\u89d2\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_14","text":"sin\\alpha=\\frac{2tan\\frac{\\alpha}{2}}{1+tan^2\\frac{\\alpha}{2}} sin\\alpha=\\frac{2tan\\frac{\\alpha}{2}}{1+tan^2\\frac{\\alpha}{2}} cos\\alpha=\\frac{1-tan^2\\frac{\\alpha}{2}}{1+tan^2\\frac{\\alpha}{2}} cos\\alpha=\\frac{1-tan^2\\frac{\\alpha}{2}}{1+tan^2\\frac{\\alpha}{2}} tan\\alpha=\\frac{2tan\\frac{\\alpha}{2}}{1-tan^2\\frac{\\alpha}{2}} tan\\alpha=\\frac{2tan\\frac{\\alpha}{2}}{1-tan^2\\frac{\\alpha}{2}}","title":"\u4e07\u80fd\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_15","text":"asin\\alpha+bcos\\alpha=\\sqrt{a^2+b^2}sin(\\alpha+\\varphi),tan\\varphi=\\frac{b}{a} asin\\alpha+bcos\\alpha=\\sqrt{a^2+b^2}sin(\\alpha+\\varphi),tan\\varphi=\\frac{b}{a}","title":"\u8f85\u52a9\u89d2\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_16","text":"sin^2\\alpha=\\frac{1-cos2\\alpha}{2} sin^2\\alpha=\\frac{1-cos2\\alpha}{2} cos^2\\alpha=\\frac{1+cos2\\alpha}{2} cos^2\\alpha=\\frac{1+cos2\\alpha}{2} tan^2\\alpha=\\frac{1-cos2\\alpha}{1+cos2\\alpha} tan^2\\alpha=\\frac{1-cos2\\alpha}{1+cos2\\alpha}","title":"\u964d\u5e42\u516c\u5f0f"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_17","text":"\\frac{a}{sinA}=\\frac{b}{sinB}=\\frac{c}{sinC}=2R \\frac{a}{sinA}=\\frac{b}{sinB}=\\frac{c}{sinC}=2R S=\\frac{1}{2}absinC=\\frac{1}{2}acsinB=\\frac{1}{2}bcsinA=\\frac{abc}{4R} S=\\frac{1}{2}absinC=\\frac{1}{2}acsinB=\\frac{1}{2}bcsinA=\\frac{abc}{4R} a=2RsinA;\\ \\ \\ b=2RsinB;\\ \\ \\ c=2RsinC a=2RsinA;\\ \\ \\ b=2RsinB;\\ \\ \\ c=2RsinC a:b:c=sinA:sinB:sinC a:b:c=sinA:sinB:sinC","title":"\u6b63\u5f26\u5b9a\u7406"},{"location":"%E4%B8%AD%E5%AD%A6/%E9%AB%98%E4%B8%AD/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/#_18","text":"a^2=b^2+c^2-2bccos\\alpha a^2=b^2+c^2-2bccos\\alpha cosA=\\frac{b^2+c^2-a^2}{2bc} cosA=\\frac{b^2+c^2-a^2}{2bc}","title":"\u4f59\u5f26\u5b9a\u7406"},{"location":"%E6%A6%82%E7%BB%9F/","text":"\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u7b80\u4ecb \u00b6 \u4ece\u4fe1\u606f\u8bba\u5230\u673a\u5668\u5b66\u4e60\uff0c\u4ece\u6a21\u5f0f\u8bc6\u522b\u5230\u6570\u636e\u6316\u6398\uff0c\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u7684\u6982\u5ff5\u548c\u539f\u7406\u6d3b\u8dc3\u4e8e\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\uff0c\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002 \u6b64\u5206\u7c7b\u4e0b\u8bb0\u5f55\u4e86\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u7684\u5b66\u4e60\u7b14\u8bb0","title":"\u7b80\u4ecb"},{"location":"%E6%A6%82%E7%BB%9F/#_1","text":"\u4ece\u4fe1\u606f\u8bba\u5230\u673a\u5668\u5b66\u4e60\uff0c\u4ece\u6a21\u5f0f\u8bc6\u522b\u5230\u6570\u636e\u6316\u6398\uff0c\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u7684\u6982\u5ff5\u548c\u539f\u7406\u6d3b\u8dc3\u4e8e\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5404\u4e2a\u9886\u57df\uff0c\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002 \u6b64\u5206\u7c7b\u4e0b\u8bb0\u5f55\u4e86\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u7684\u5b66\u4e60\u7b14\u8bb0","title":"\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u7b80\u4ecb"},{"location":"%E6%A6%82%E7%BB%9F/chapter_1/","text":"\u6837\u672c\u7a7a\u95f4 \u968f\u673a\u4e8b\u4ef6 \u00b6 \u968f\u673a\u8bd5\u9a8c \u00b6 \u5728\u76f8\u540c\u6761\u4ef6\u4e0b\u5bf9\u67d0\u968f\u673a\u73b0\u8c61\u8fdb\u884c\u7684\u5927\u91cf\u91cd\u590d\u89c2\u6d4b \u968f\u673a\u8bd5\u9a8c\u7684\u7279\u6027 \u00b6 \u76f8\u540c\u6761\u4ef6\u4e0b\u53ef\u91cd\u590d\u8fdb\u884c \u4e8b\u5148\u77e5\u9053\u6240\u6709\u53ef\u80fd\u7ed3\u679c \u4e8b\u5148\u4e0d\u77e5\u9053\u54ea\u4e2a\u7ed3\u679c\u4f1a\u53d1\u751f \u6837\u672c\u7a7a\u95f4 \u00b6 \u968f\u673a\u8bd5\u9a8c\u7684\u6240\u6709\u53ef\u80fd\u7ed3\u679c\u6784\u6210\u7684\u96c6\u5408\uff0c\u8bb0\u4e3a\uff1a S=\\{e\\} S=\\{e\\} \uff0c S S \u4e2d\u7684\u5143\u7d20 e e \u79f0\u4e3a \u6837\u672c\u70b9 \u968f\u673a\u4e8b\u4ef6 \u00b6 \u6837\u672c\u7a7a\u95f4 S S \u7684\u5b50\u96c6 A A \uff0c\u7b80\u79f0 \u4e8b\u4ef6 \u5f53\u4e14\u4ec5\u5f53 A A \u4e2d\u67d0\u4e2a\u6837\u672c\u70b9\u53d1\u751f\u79f0\u4e8b\u4ef6 A A \u53d1\u751f \u51e0\u79cd\u4e8b\u4ef6 \u00b6 \u5fc5\u7136\u4e8b\u4ef6 \uff1a S S \u57fa\u672c\u4e8b\u4ef6 \uff1a\u53ea\u6709\u4e00\u4e2a\u6837\u672c\u70b9 \u4e0d\u53ef\u80fd\u4e8b\u4ef6 \uff1a \\phi \\phi","title":"\u6837\u672c\u7a7a\u95f4 \u968f\u673a\u4e8b\u4ef6"},{"location":"%E6%A6%82%E7%BB%9F/chapter_1/#_1","text":"","title":"\u6837\u672c\u7a7a\u95f4 \u968f\u673a\u4e8b\u4ef6"},{"location":"%E6%A6%82%E7%BB%9F/chapter_1/#_2","text":"\u5728\u76f8\u540c\u6761\u4ef6\u4e0b\u5bf9\u67d0\u968f\u673a\u73b0\u8c61\u8fdb\u884c\u7684\u5927\u91cf\u91cd\u590d\u89c2\u6d4b","title":"\u968f\u673a\u8bd5\u9a8c"},{"location":"%E6%A6%82%E7%BB%9F/chapter_1/#_3","text":"\u76f8\u540c\u6761\u4ef6\u4e0b\u53ef\u91cd\u590d\u8fdb\u884c \u4e8b\u5148\u77e5\u9053\u6240\u6709\u53ef\u80fd\u7ed3\u679c \u4e8b\u5148\u4e0d\u77e5\u9053\u54ea\u4e2a\u7ed3\u679c\u4f1a\u53d1\u751f","title":"\u968f\u673a\u8bd5\u9a8c\u7684\u7279\u6027"},{"location":"%E6%A6%82%E7%BB%9F/chapter_1/#_4","text":"\u968f\u673a\u8bd5\u9a8c\u7684\u6240\u6709\u53ef\u80fd\u7ed3\u679c\u6784\u6210\u7684\u96c6\u5408\uff0c\u8bb0\u4e3a\uff1a S=\\{e\\} S=\\{e\\} \uff0c S S \u4e2d\u7684\u5143\u7d20 e e \u79f0\u4e3a \u6837\u672c\u70b9","title":"\u6837\u672c\u7a7a\u95f4"},{"location":"%E6%A6%82%E7%BB%9F/chapter_1/#_5","text":"\u6837\u672c\u7a7a\u95f4 S S \u7684\u5b50\u96c6 A A \uff0c\u7b80\u79f0 \u4e8b\u4ef6 \u5f53\u4e14\u4ec5\u5f53 A A \u4e2d\u67d0\u4e2a\u6837\u672c\u70b9\u53d1\u751f\u79f0\u4e8b\u4ef6 A A \u53d1\u751f","title":"\u968f\u673a\u4e8b\u4ef6"},{"location":"%E6%A6%82%E7%BB%9F/chapter_1/#_6","text":"\u5fc5\u7136\u4e8b\u4ef6 \uff1a S S \u57fa\u672c\u4e8b\u4ef6 \uff1a\u53ea\u6709\u4e00\u4e2a\u6837\u672c\u70b9 \u4e0d\u53ef\u80fd\u4e8b\u4ef6 \uff1a \\phi \\phi","title":"\u51e0\u79cd\u4e8b\u4ef6"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/","text":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf \u00b6 0-1\u5206\u5e03 \u00b6 \u5b9a\u4e49 \u00b6 \u82e5 X X \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a X X 0 0 1 1 P P 1-p 1-p p p \u5176\u4e2d 0<p<1 0<p<1 \uff0c\u5c31\u79f0 X X \u670d\u4ece\u53c2\u6570\u4e3a p p \u7684 0-1\u5206\u5e03(\u6216\u4e24\u70b9\u5206\u5e03) \u8bb0\u4e3a X\\sim 0-1(p) X\\sim 0-1(p) \u6216 X\\sim B(1,p) X\\sim B(1,p) \u5176\u5206\u5e03\u5f8b\u8fd8\u53ef\u4ee5\u5199\u4e3a P(X=k)=p^k(1-p)^{1-k},\\ k=0,1 P(X=k)=p^k(1-p)^{1-k},\\ k=0,1 \uff08 X X \u670d\u4ece\u9000\u5316\u5206\u5e03\uff1a\u82e5 P(X=c)=1 P(X=c)=1 \uff09 \u5e94\u7528 \u00b6 \u4e00\u4e2a\u968f\u673a\u8bd5\u9a8c\uff0c\u8bbe A A \u662f\u4e00\u968f\u673a\u4e8b\u4ef6\uff0c\u4e14 P(A)=p(0<p<1) P(A)=p(0<p<1) \u3002\u82e5 \u4ec5\u8003\u8651\u4e8b\u4ef6 A A \u53d1\u751f\u4e0e\u5426 \uff0c\u5c31\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u670d\u4ece\u53c2\u6570\u4e3a p p \u76840-1\u5206\u5e03\u7684\u968f\u673a\u53d8\u91cf\uff1a X=\\begin{cases}{1\uff0c\u82e5A\u53d1\u751f}\\\\{0\uff0c\u82e5A\u4e0d\u53d1\u751f(\u5373\\overline{A}\u53d1\u751f)}\\end{cases} X=\\begin{cases}{1\uff0c\u82e5A\u53d1\u751f}\\\\{0\uff0c\u82e5A\u4e0d\u53d1\u751f(\u5373\\overline{A}\u53d1\u751f)}\\end{cases} \u6765\u63cf\u8ff0\u8fd9\u4e2a\u968f\u673a\u8bd5\u9a8c\u7684\u7ed3\u679c \u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\u7ed3\u679c\u7684\u8bd5\u9a8c\uff0c\u79f0\u4e3a \u8d1d\u52aa\u5229(Bernoulli)\u8bd5\u9a8c \uff0c\u6545\u4e24\u70b9\u5206\u5e03\u6709\u65f6\u4e5f\u79f0\u4e3a\u8d1d\u52aa\u5229\u5206\u5e03 \u7528\u9014\uff1a \u68c0\u67e5\u4ea7\u54c1\u7684\u8d28\u91cf\u662f\u5426\u5408\u683c \u5bf9\u65b0\u751f\u5a74\u513f\u7684\u6027\u522b\u8fdb\u884c\u767b\u8bb0 \u68c0\u9a8c\u79cd\u5b50\u662f\u5426\u53d1\u82bd \u8003\u8bd5\u662f\u5426\u901a\u8fc7 \u6c42\u5a5a\u662f\u5426\u6210\u529f \u9a6c\u8def\u4e71\u505c\u8f66\u662f\u5426\u4f1a\u53d7\u7f5a \u4e8c\u9879\u5206\u5e03 \u00b6 \u8bbe\u8bd5\u9a8c E E \u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c\uff1a A A \u6216 \\overline{A} \\overline{A} \uff0c\u4e14 P(A)=p,0<p<1 P(A)=p,0<p<1 \u3002\u5c06 E E \u72ec\u7acb \u5730 \u91cd\u590d \u5730\u8fdb\u884c n n \u6b21\uff0c\u5219\u79f0\u8fd9\u4e00\u4e32\u91cd\u590d\u7684\u72ec\u7acb\u8bd5\u9a8c\u4e3a n n \u91cd\u8d1d\u52aa\u5229\u8bd5\u9a8c\u3002 \u8bbe X X \u8868\u793a n n \u91cd\u8d1d\u52aa\u5229\u8bd5\u9a8c\u4e2d\u7ed3\u679c A A \u53d1\u751f\u7684\u6b21\u6570\uff0c\u5219 X X \u7684\u53ef\u80fd\u53d6\u503c\u4e3a 0,1,\\cdots,n 0,1,\\cdots,n \uff0c\u4e14 P\\{X=k\\}=C_n^kp^k(1-p)^{n-k} P\\{X=k\\}=C_n^kp^k(1-p)^{n-k} \u5b9a\u4e49 \u00b6 \u82e5 X X \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a\uff1a P\\{X=k\\}=C_n^kp^k(1-p)^{n-k},\\ k=0,1,\\cdots,n P\\{X=k\\}=C_n^kp^k(1-p)^{n-k},\\ k=0,1,\\cdots,n \u5176\u4e2d n\\geq1,\\ 0<p<1 n\\geq1,\\ 0<p<1 \uff0c\u5c31\u79f0 X X \u670d\u4ece\u53c2\u6570\u4e3a n,p n,p \u7684 \u4e8c\u9879\u5206\u5e03(Binomial) \uff0c\u8bb0\u4e3a X\\sim B(n,p) X\\sim B(n,p) \u53ef\u4ee5\u8bc1\u660e 1=(p+q)^n=\\sum_{k=0}^{n}{C_n^k}{p^k}{q^{n-k}} 1=(p+q)^n=\\sum_{k=0}^{n}{C_n^k}{p^k}{q^{n-k}} \uff0c\u5176\u4e2d q=1-p q=1-p \u6cca\u677e\u5206\u5e03 \u00b6 \u5b9a\u4e49 \u00b6 \u82e5 X X \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a P(X=k)=\\frac{\\lambda^ke^{-\\lambda}}{k!},\\ k=0,1,2,\\cdots, P(X=k)=\\frac{\\lambda^ke^{-\\lambda}}{k!},\\ k=0,1,2,\\cdots, \u5176\u4e2d \\lambda>0 \\lambda>0 \uff0c\u5c31\u79f0 X X \u670d\u4ece\u53c2\u6570\u4e3a \\lambda \\lambda \u7684 \u6cca\u677e\u5206\u5e03(Poisson) \uff0c\u8bb0\u4e3a X\\sim\\pi(\\lambda) X\\sim\\pi(\\lambda) \u6216 X\\sim P(\\lambda) X\\sim P(\\lambda) \u63d0\u793a \u6839\u636e\u6cf0\u52d2\u5c55\u5f00\u5f0f\u53ef\u5f97\uff1a e^\\lambda=\\sum_{k=0}^{+\\infty}\\frac{\\lambda^k}{k!} e^\\lambda=\\sum_{k=0}^{+\\infty}\\frac{\\lambda^k}{k!} \u5e94\u7528 \u00b6 \u67d0\u4eba\u4e00\u5929\u5185\u6536\u5230\u7684\u5fae\u4fe1\u7684\u6570\u91cf \u6765\u5230\u67d0\u516c\u5171\u6c7d\u8f66\u7ad9\u7684\u4e58\u5ba2 \u67d0\u653e\u5c04\u6027\u7269\u8d28\u53d1\u5c04\u51fa\u7684\u7c92\u5b50 \u663e\u5fae\u955c\u4e0b\u67d0\u533a\u57df\u4e2d\u7684\u767d\u8840\u7403 \u63d0\u793a \u5982\u679c\u67d0\u4e8b\u4ef6\u4ee5\u56fa\u5b9a\u5f3a\u5ea6 \\lambda \\lambda \uff0c\u968f\u673a\u4e14\u72ec\u7acb\u5730\u51fa\u73b0\uff0c\u8be5\u4e8b\u4ef6\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4e2a\u6570\uff09\u53ef\u4ee5\u770b\u6210\u662f\u670d\u4ece\u6cca\u677e\u5206\u5e03 \u6cca\u677e\u5206\u5e03\u4e0e\u4e8c\u9879\u5206\u5e03\u7684\u8fd1\u4f3c\u516c\u5f0f \u00b6 \u5f53 n>10,p<0.1 n>10,p<0.1 \u65f6\uff0c\u4e8c\u9879\u5206\u5e03 B(n,p) B(n,p) \u53ef\u4ee5\u7528\u6cca\u677e\u5206\u5e03 \\pi(np) \\pi(np) \u6765\u8fd1\u4f3c\uff1a \\boxed{C_n^kp^k(1-p)^{n-k}\\approx\\frac{e^{-\\lambda}\\lambda^k}{k!},\\ \u5176\u4e2d\\lambda=np} \\boxed{C_n^kp^k(1-p)^{n-k}\\approx\\frac{e^{-\\lambda}\\lambda^k}{k!},\\ \u5176\u4e2d\\lambda=np} \u51e0\u4f55\u5206\u5e03 \u00b6 \u5b9a\u4e49 \u00b6 \u82e5 X X \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a P(X=k)=p(1-p)^{k-1},\\ k=1,2,3,\\cdots, P(X=k)=p(1-p)^{k-1},\\ k=1,2,3,\\cdots, \u5176\u4e2d 0<p<1 0<p<1 \uff0c\u79f0 X X \u670d\u4ece\u53c2\u6570\u4e3a p p \u7684 \u51e0\u4f55\u5206\u5e03(Geometric) \uff0c\u8bb0\u4e3a X\\sim Geom(p) X\\sim Geom(p) \u5e94\u7528 \u00b6 \u5728\u91cd\u590d\u591a\u6b21\u7684\u8d1d\u52aa\u5229\u8bd5\u9a8c\u4e2d\uff0c\u8bd5\u9a8c\u8fdb\u884c\u5230\u67d0\u79cd\u7ed3\u679c\u51fa\u73b0\u7b2c\u4e00\u6b21\u4e3a\u6b62\uff0c\u6b64\u65f6\u7684\u8bd5\u9a8c\u603b\u6b21\u6570\u670d\u4ece\u51e0\u4f55\u5206\u5e03","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_1","text":"","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#0-1","text":"","title":"0-1\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_2","text":"\u82e5 X X \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a X X 0 0 1 1 P P 1-p 1-p p p \u5176\u4e2d 0<p<1 0<p<1 \uff0c\u5c31\u79f0 X X \u670d\u4ece\u53c2\u6570\u4e3a p p \u7684 0-1\u5206\u5e03(\u6216\u4e24\u70b9\u5206\u5e03) \u8bb0\u4e3a X\\sim 0-1(p) X\\sim 0-1(p) \u6216 X\\sim B(1,p) X\\sim B(1,p) \u5176\u5206\u5e03\u5f8b\u8fd8\u53ef\u4ee5\u5199\u4e3a P(X=k)=p^k(1-p)^{1-k},\\ k=0,1 P(X=k)=p^k(1-p)^{1-k},\\ k=0,1 \uff08 X X \u670d\u4ece\u9000\u5316\u5206\u5e03\uff1a\u82e5 P(X=c)=1 P(X=c)=1 \uff09","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_3","text":"\u4e00\u4e2a\u968f\u673a\u8bd5\u9a8c\uff0c\u8bbe A A \u662f\u4e00\u968f\u673a\u4e8b\u4ef6\uff0c\u4e14 P(A)=p(0<p<1) P(A)=p(0<p<1) \u3002\u82e5 \u4ec5\u8003\u8651\u4e8b\u4ef6 A A \u53d1\u751f\u4e0e\u5426 \uff0c\u5c31\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u670d\u4ece\u53c2\u6570\u4e3a p p \u76840-1\u5206\u5e03\u7684\u968f\u673a\u53d8\u91cf\uff1a X=\\begin{cases}{1\uff0c\u82e5A\u53d1\u751f}\\\\{0\uff0c\u82e5A\u4e0d\u53d1\u751f(\u5373\\overline{A}\u53d1\u751f)}\\end{cases} X=\\begin{cases}{1\uff0c\u82e5A\u53d1\u751f}\\\\{0\uff0c\u82e5A\u4e0d\u53d1\u751f(\u5373\\overline{A}\u53d1\u751f)}\\end{cases} \u6765\u63cf\u8ff0\u8fd9\u4e2a\u968f\u673a\u8bd5\u9a8c\u7684\u7ed3\u679c \u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\u7ed3\u679c\u7684\u8bd5\u9a8c\uff0c\u79f0\u4e3a \u8d1d\u52aa\u5229(Bernoulli)\u8bd5\u9a8c \uff0c\u6545\u4e24\u70b9\u5206\u5e03\u6709\u65f6\u4e5f\u79f0\u4e3a\u8d1d\u52aa\u5229\u5206\u5e03 \u7528\u9014\uff1a \u68c0\u67e5\u4ea7\u54c1\u7684\u8d28\u91cf\u662f\u5426\u5408\u683c \u5bf9\u65b0\u751f\u5a74\u513f\u7684\u6027\u522b\u8fdb\u884c\u767b\u8bb0 \u68c0\u9a8c\u79cd\u5b50\u662f\u5426\u53d1\u82bd \u8003\u8bd5\u662f\u5426\u901a\u8fc7 \u6c42\u5a5a\u662f\u5426\u6210\u529f \u9a6c\u8def\u4e71\u505c\u8f66\u662f\u5426\u4f1a\u53d7\u7f5a","title":"\u5e94\u7528"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_4","text":"\u8bbe\u8bd5\u9a8c E E \u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c\uff1a A A \u6216 \\overline{A} \\overline{A} \uff0c\u4e14 P(A)=p,0<p<1 P(A)=p,0<p<1 \u3002\u5c06 E E \u72ec\u7acb \u5730 \u91cd\u590d \u5730\u8fdb\u884c n n \u6b21\uff0c\u5219\u79f0\u8fd9\u4e00\u4e32\u91cd\u590d\u7684\u72ec\u7acb\u8bd5\u9a8c\u4e3a n n \u91cd\u8d1d\u52aa\u5229\u8bd5\u9a8c\u3002 \u8bbe X X \u8868\u793a n n \u91cd\u8d1d\u52aa\u5229\u8bd5\u9a8c\u4e2d\u7ed3\u679c A A \u53d1\u751f\u7684\u6b21\u6570\uff0c\u5219 X X \u7684\u53ef\u80fd\u53d6\u503c\u4e3a 0,1,\\cdots,n 0,1,\\cdots,n \uff0c\u4e14 P\\{X=k\\}=C_n^kp^k(1-p)^{n-k} P\\{X=k\\}=C_n^kp^k(1-p)^{n-k}","title":"\u4e8c\u9879\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_5","text":"\u82e5 X X \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a\uff1a P\\{X=k\\}=C_n^kp^k(1-p)^{n-k},\\ k=0,1,\\cdots,n P\\{X=k\\}=C_n^kp^k(1-p)^{n-k},\\ k=0,1,\\cdots,n \u5176\u4e2d n\\geq1,\\ 0<p<1 n\\geq1,\\ 0<p<1 \uff0c\u5c31\u79f0 X X \u670d\u4ece\u53c2\u6570\u4e3a n,p n,p \u7684 \u4e8c\u9879\u5206\u5e03(Binomial) \uff0c\u8bb0\u4e3a X\\sim B(n,p) X\\sim B(n,p) \u53ef\u4ee5\u8bc1\u660e 1=(p+q)^n=\\sum_{k=0}^{n}{C_n^k}{p^k}{q^{n-k}} 1=(p+q)^n=\\sum_{k=0}^{n}{C_n^k}{p^k}{q^{n-k}} \uff0c\u5176\u4e2d q=1-p q=1-p","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_6","text":"","title":"\u6cca\u677e\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_7","text":"\u82e5 X X \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a P(X=k)=\\frac{\\lambda^ke^{-\\lambda}}{k!},\\ k=0,1,2,\\cdots, P(X=k)=\\frac{\\lambda^ke^{-\\lambda}}{k!},\\ k=0,1,2,\\cdots, \u5176\u4e2d \\lambda>0 \\lambda>0 \uff0c\u5c31\u79f0 X X \u670d\u4ece\u53c2\u6570\u4e3a \\lambda \\lambda \u7684 \u6cca\u677e\u5206\u5e03(Poisson) \uff0c\u8bb0\u4e3a X\\sim\\pi(\\lambda) X\\sim\\pi(\\lambda) \u6216 X\\sim P(\\lambda) X\\sim P(\\lambda) \u63d0\u793a \u6839\u636e\u6cf0\u52d2\u5c55\u5f00\u5f0f\u53ef\u5f97\uff1a e^\\lambda=\\sum_{k=0}^{+\\infty}\\frac{\\lambda^k}{k!} e^\\lambda=\\sum_{k=0}^{+\\infty}\\frac{\\lambda^k}{k!}","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_8","text":"\u67d0\u4eba\u4e00\u5929\u5185\u6536\u5230\u7684\u5fae\u4fe1\u7684\u6570\u91cf \u6765\u5230\u67d0\u516c\u5171\u6c7d\u8f66\u7ad9\u7684\u4e58\u5ba2 \u67d0\u653e\u5c04\u6027\u7269\u8d28\u53d1\u5c04\u51fa\u7684\u7c92\u5b50 \u663e\u5fae\u955c\u4e0b\u67d0\u533a\u57df\u4e2d\u7684\u767d\u8840\u7403 \u63d0\u793a \u5982\u679c\u67d0\u4e8b\u4ef6\u4ee5\u56fa\u5b9a\u5f3a\u5ea6 \\lambda \\lambda \uff0c\u968f\u673a\u4e14\u72ec\u7acb\u5730\u51fa\u73b0\uff0c\u8be5\u4e8b\u4ef6\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4e2a\u6570\uff09\u53ef\u4ee5\u770b\u6210\u662f\u670d\u4ece\u6cca\u677e\u5206\u5e03","title":"\u5e94\u7528"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_9","text":"\u5f53 n>10,p<0.1 n>10,p<0.1 \u65f6\uff0c\u4e8c\u9879\u5206\u5e03 B(n,p) B(n,p) \u53ef\u4ee5\u7528\u6cca\u677e\u5206\u5e03 \\pi(np) \\pi(np) \u6765\u8fd1\u4f3c\uff1a \\boxed{C_n^kp^k(1-p)^{n-k}\\approx\\frac{e^{-\\lambda}\\lambda^k}{k!},\\ \u5176\u4e2d\\lambda=np} \\boxed{C_n^kp^k(1-p)^{n-k}\\approx\\frac{e^{-\\lambda}\\lambda^k}{k!},\\ \u5176\u4e2d\\lambda=np}","title":"\u6cca\u677e\u5206\u5e03\u4e0e\u4e8c\u9879\u5206\u5e03\u7684\u8fd1\u4f3c\u516c\u5f0f"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_10","text":"","title":"\u51e0\u4f55\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_11","text":"\u82e5 X X \u7684\u6982\u7387\u5206\u5e03\u5f8b\u4e3a P(X=k)=p(1-p)^{k-1},\\ k=1,2,3,\\cdots, P(X=k)=p(1-p)^{k-1},\\ k=1,2,3,\\cdots, \u5176\u4e2d 0<p<1 0<p<1 \uff0c\u79f0 X X \u670d\u4ece\u53c2\u6570\u4e3a p p \u7684 \u51e0\u4f55\u5206\u5e03(Geometric) \uff0c\u8bb0\u4e3a X\\sim Geom(p) X\\sim Geom(p)","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_10/#_12","text":"\u5728\u91cd\u590d\u591a\u6b21\u7684\u8d1d\u52aa\u5229\u8bd5\u9a8c\u4e2d\uff0c\u8bd5\u9a8c\u8fdb\u884c\u5230\u67d0\u79cd\u7ed3\u679c\u51fa\u73b0\u7b2c\u4e00\u6b21\u4e3a\u6b62\uff0c\u6b64\u65f6\u7684\u8bd5\u9a8c\u603b\u6b21\u6570\u670d\u4ece\u51e0\u4f55\u5206\u5e03","title":"\u5e94\u7528"},{"location":"%E6%A6%82%E7%BB%9F/chapter_11/","text":"\u5206\u5e03\u51fd\u6570 \u00b6 \u5b9a\u4e49 \u00b6 \u968f\u673a\u53d8\u91cf X X \uff0c\u5bf9\u4efb\u610f\u5b9e\u6570 x x \uff0c\u79f0\u51fd\u6570 F(x)=P(X\\leq x) F(x)=P(X\\leq x) \u4e3a X X \u7684\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0c\u7b80\u79f0 \u5206\u5e03\u51fd\u6570 \u8bf4\u660e \u4efb\u4f55\u968f\u673a\u53d8\u91cf\u90fd\u6709\u76f8\u5e94\u7684\u5206\u5e03\u51fd\u6570 \\\\ \\\\ F(x) F(x) \u7684\u51e0\u4f55\u610f\u4e49\uff1a F(x)=P(X\\in(-\\infty,x]) F(x)=P(X\\in(-\\infty,x]) \u7528\u9014 \u00b6 \u5206\u5e03\u51fd\u6570\u53ef\u4ee5\u7ed9\u51fa\u968f\u673a\u53d8\u91cf\u843d\u5165\u4efb\u610f\u4e00\u4e2a\u8303\u56f4\u7684\u53ef\u80fd\u6027 \u4e00\u822c\u5730\uff0c\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03\u51fd\u6570\u4e3a\u9636\u68af\u51fd\u6570 \u8bbe\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf X X \u7684\u5206\u5e03\u5f8b\u4e3a P\\{X=x_k\\}=p_k,\\ k=1,2,\\cdots P\\{X=x_k\\}=p_k,\\ k=1,2,\\cdots X X \u7684\u5206\u5e03\u51fd\u6570\u4e3a F(x)=\\sum_{x_k\\leq x}{p_k} F(x)=\\sum_{x_k\\leq x}{p_k} F(x) F(x) \u5728 x=x_k,\\ (k=1,2,\\cdots) x=x_k,\\ (k=1,2,\\cdots) \u5904\u6709\u8df3\u8dc3\uff0c\u5176\u8df3\u8dc3\u503c\u4e3a p_k=P\\{X=x_k\\} p_k=P\\{X=x_k\\} \u6027\u8d28 \u00b6 0\\leq F(x)\\leq 1 0\\leq F(x)\\leq 1 F(x) F(x) \u5355\u8c03\u4e0d\u51cf F(-\\infty)=0,\\ F(+\\infty)=1 F(-\\infty)=0,\\ F(+\\infty)=1 F(x) F(x) \u662f\u53f3\u8fde\u7eed\u51fd\u6570\uff0c\u5373 F(x+0)=F(x) F(x+0)=F(x)","title":"\u5206\u5e03\u51fd\u6570"},{"location":"%E6%A6%82%E7%BB%9F/chapter_11/#_1","text":"","title":"\u5206\u5e03\u51fd\u6570"},{"location":"%E6%A6%82%E7%BB%9F/chapter_11/#_2","text":"\u968f\u673a\u53d8\u91cf X X \uff0c\u5bf9\u4efb\u610f\u5b9e\u6570 x x \uff0c\u79f0\u51fd\u6570 F(x)=P(X\\leq x) F(x)=P(X\\leq x) \u4e3a X X \u7684\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0c\u7b80\u79f0 \u5206\u5e03\u51fd\u6570 \u8bf4\u660e \u4efb\u4f55\u968f\u673a\u53d8\u91cf\u90fd\u6709\u76f8\u5e94\u7684\u5206\u5e03\u51fd\u6570 \\\\ \\\\ F(x) F(x) \u7684\u51e0\u4f55\u610f\u4e49\uff1a F(x)=P(X\\in(-\\infty,x]) F(x)=P(X\\in(-\\infty,x])","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_11/#_3","text":"\u5206\u5e03\u51fd\u6570\u53ef\u4ee5\u7ed9\u51fa\u968f\u673a\u53d8\u91cf\u843d\u5165\u4efb\u610f\u4e00\u4e2a\u8303\u56f4\u7684\u53ef\u80fd\u6027 \u4e00\u822c\u5730\uff0c\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03\u51fd\u6570\u4e3a\u9636\u68af\u51fd\u6570 \u8bbe\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf X X \u7684\u5206\u5e03\u5f8b\u4e3a P\\{X=x_k\\}=p_k,\\ k=1,2,\\cdots P\\{X=x_k\\}=p_k,\\ k=1,2,\\cdots X X \u7684\u5206\u5e03\u51fd\u6570\u4e3a F(x)=\\sum_{x_k\\leq x}{p_k} F(x)=\\sum_{x_k\\leq x}{p_k} F(x) F(x) \u5728 x=x_k,\\ (k=1,2,\\cdots) x=x_k,\\ (k=1,2,\\cdots) \u5904\u6709\u8df3\u8dc3\uff0c\u5176\u8df3\u8dc3\u503c\u4e3a p_k=P\\{X=x_k\\} p_k=P\\{X=x_k\\}","title":"\u7528\u9014"},{"location":"%E6%A6%82%E7%BB%9F/chapter_11/#_4","text":"0\\leq F(x)\\leq 1 0\\leq F(x)\\leq 1 F(x) F(x) \u5355\u8c03\u4e0d\u51cf F(-\\infty)=0,\\ F(+\\infty)=1 F(-\\infty)=0,\\ F(+\\infty)=1 F(x) F(x) \u662f\u53f3\u8fde\u7eed\u51fd\u6570\uff0c\u5373 F(x+0)=F(x) F(x+0)=F(x)","title":"\u6027\u8d28"},{"location":"%E6%A6%82%E7%BB%9F/chapter_12/","text":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u53ca\u5176\u6982\u7387\u5bc6\u5ea6 \u00b6","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u53ca\u5176\u6982\u7387\u5bc6\u5ea6"},{"location":"%E6%A6%82%E7%BB%9F/chapter_12/#_1","text":"","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u53ca\u5176\u6982\u7387\u5bc6\u5ea6"},{"location":"%E6%A6%82%E7%BB%9F/chapter_13/","text":"\u5747\u5300\u5206\u5e03\u4e0e\u6307\u6570\u5206\u5e03 \u00b6","title":"\u5747\u5300\u5206\u5e03\u4e0e\u6307\u6570\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_13/#_1","text":"","title":"\u5747\u5300\u5206\u5e03\u4e0e\u6307\u6570\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_14/","text":"\u6b63\u6001\u5206\u5e03 \u00b6","title":"\u6b63\u6001\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_14/#_1","text":"","title":"\u6b63\u6001\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_15/","text":"\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u5206\u5e03 \u00b6","title":"\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_15/#_1","text":"","title":"\u968f\u673a\u53d8\u91cf\u51fd\u6570\u7684\u5206\u5e03"},{"location":"%E6%A6%82%E7%BB%9F/chapter_2/","text":"\u4e8b\u4ef6\u7684\u76f8\u4e92\u5173\u7cfb\u53ca\u8fd0\u7b97 \u00b6 \u4e8b\u4ef6\u7684\u5173\u7cfb \u00b6 A \\subset B A \\subset B \uff1a A A \u53d1\u751f \\to \\to B B \u53d1\u751f A=B \\Leftrightarrow \\begin{cases}A \\subset B\\\\ B \\subset A\\end{cases} A=B \\Leftrightarrow \\begin{cases}A \\subset B\\\\ B \\subset A\\end{cases} A \\cup B = \\{x|x\\in A \u6216 x\\in B\\} A \\cup B = \\{x|x\\in A \u6216 x\\in B\\} \uff1a A A \u4e0e B B \u81f3\u5c11\u6709\u4e00\u4e2a\u53d1\u751f A \\cap B = \\{x|x\\in A \u4e14 x\\in B\\} A \\cap B = \\{x|x\\in A \u4e14 x\\in B\\} \uff0c\u53c8\u4f5c A\u00b7B A\u00b7B \uff0c AB AB \uff1a A A \u4e0e B B \u540c\u65f6\u53d1\u751f AB=\\phi AB=\\phi \uff0c\u79f0\u4e3a A A \u4e0e B B \u4e0d\u76f8\u5bb9\u6216\u4e92\u65a5 A-B=\\{x|x\\in A \u4e14 x\\notin B\\} A-B=\\{x|x\\in A \u4e14 x\\notin B\\} \\overline{A} \\overline{A} A \\cup \\overline{A}=S,A\\overline{A}=\\phi,\\overline{\\overline{A}}=A A \\cup \\overline{A}=S,A\\overline{A}=\\phi,\\overline{\\overline{A}}=A A-B=A\\overline{B}=A \\cup B-B=A-AB A-B=A\\overline{B}=A \\cup B-B=A-AB \u4e8b\u4ef6\u7684\u8fd0\u7b97\u5b9a\u7406 \u00b6 \u4ea4\u6362\u5f8b\uff1a A\\cup B=B\\cup A,A\\cap B=B\\cap A A\\cup B=B\\cup A,A\\cap B=B\\cap A \u7ed3\u5408\u5f8b\uff1a A\\cup(B\\cup C)=(A\\cup B)\\cup C,A\\cap(B\\cap C)=(A\\cap B)\\cap C A\\cup(B\\cup C)=(A\\cup B)\\cup C,A\\cap(B\\cap C)=(A\\cap B)\\cap C \u5206\u914d\u5f8b\uff1a A\\cup(B\\cap C)=(A\\cup B)\\cap(A\\cup C),A\\cap(B\\cup C)=(A\\cap B)\\cup(A\\cap C) A\\cup(B\\cap C)=(A\\cup B)\\cap(A\\cup C),A\\cap(B\\cup C)=(A\\cap B)\\cup(A\\cap C) \u5bf9\u5076\u5f8b\uff1a \\overline{A\\cup B}=\\overline{A}\\cap\\overline{B},\\overline{A\\cap B}=\\overline{A}\\cup\\overline{B} \\overline{A\\cup B}=\\overline{A}\\cap\\overline{B},\\overline{A\\cap B}=\\overline{A}\\cup\\overline{B}","title":"\u4e8b\u4ef6\u7684\u76f8\u4e92\u5173\u7cfb\u53ca\u8fd0\u7b97"},{"location":"%E6%A6%82%E7%BB%9F/chapter_2/#_1","text":"","title":"\u4e8b\u4ef6\u7684\u76f8\u4e92\u5173\u7cfb\u53ca\u8fd0\u7b97"},{"location":"%E6%A6%82%E7%BB%9F/chapter_2/#_2","text":"A \\subset B A \\subset B \uff1a A A \u53d1\u751f \\to \\to B B \u53d1\u751f A=B \\Leftrightarrow \\begin{cases}A \\subset B\\\\ B \\subset A\\end{cases} A=B \\Leftrightarrow \\begin{cases}A \\subset B\\\\ B \\subset A\\end{cases} A \\cup B = \\{x|x\\in A \u6216 x\\in B\\} A \\cup B = \\{x|x\\in A \u6216 x\\in B\\} \uff1a A A \u4e0e B B \u81f3\u5c11\u6709\u4e00\u4e2a\u53d1\u751f A \\cap B = \\{x|x\\in A \u4e14 x\\in B\\} A \\cap B = \\{x|x\\in A \u4e14 x\\in B\\} \uff0c\u53c8\u4f5c A\u00b7B A\u00b7B \uff0c AB AB \uff1a A A \u4e0e B B \u540c\u65f6\u53d1\u751f AB=\\phi AB=\\phi \uff0c\u79f0\u4e3a A A \u4e0e B B \u4e0d\u76f8\u5bb9\u6216\u4e92\u65a5 A-B=\\{x|x\\in A \u4e14 x\\notin B\\} A-B=\\{x|x\\in A \u4e14 x\\notin B\\} \\overline{A} \\overline{A} A \\cup \\overline{A}=S,A\\overline{A}=\\phi,\\overline{\\overline{A}}=A A \\cup \\overline{A}=S,A\\overline{A}=\\phi,\\overline{\\overline{A}}=A A-B=A\\overline{B}=A \\cup B-B=A-AB A-B=A\\overline{B}=A \\cup B-B=A-AB","title":"\u4e8b\u4ef6\u7684\u5173\u7cfb"},{"location":"%E6%A6%82%E7%BB%9F/chapter_2/#_3","text":"\u4ea4\u6362\u5f8b\uff1a A\\cup B=B\\cup A,A\\cap B=B\\cap A A\\cup B=B\\cup A,A\\cap B=B\\cap A \u7ed3\u5408\u5f8b\uff1a A\\cup(B\\cup C)=(A\\cup B)\\cup C,A\\cap(B\\cap C)=(A\\cap B)\\cap C A\\cup(B\\cup C)=(A\\cup B)\\cup C,A\\cap(B\\cap C)=(A\\cap B)\\cap C \u5206\u914d\u5f8b\uff1a A\\cup(B\\cap C)=(A\\cup B)\\cap(A\\cup C),A\\cap(B\\cup C)=(A\\cap B)\\cup(A\\cap C) A\\cup(B\\cap C)=(A\\cup B)\\cap(A\\cup C),A\\cap(B\\cup C)=(A\\cap B)\\cup(A\\cap C) \u5bf9\u5076\u5f8b\uff1a \\overline{A\\cup B}=\\overline{A}\\cap\\overline{B},\\overline{A\\cap B}=\\overline{A}\\cup\\overline{B} \\overline{A\\cup B}=\\overline{A}\\cap\\overline{B},\\overline{A\\cap B}=\\overline{A}\\cup\\overline{B}","title":"\u4e8b\u4ef6\u7684\u8fd0\u7b97\u5b9a\u7406"},{"location":"%E6%A6%82%E7%BB%9F/chapter_3/","text":"\u9891\u7387 \u00b6 \u5b9a\u4e49 \u00b6 f_n(A)=\\frac{n_A}{n} f_n(A)=\\frac{n_A}{n} \u5176\u4e2d\uff0c n_A n_A \u662f A A \u53d1\u751f\u7684\u6b21\u6570\uff0c n n \u662f\u603b\u8bd5\u9a8c\u6b21\u6570 \u79f0 f_n(A) f_n(A) \u4e3a A A \u5728\u8fd9 n n \u6b21\u8bd5\u9a8c\u4e2d\u53d1\u751f\u7684\u9891\u7387 \u6027\u8d28 \u00b6 0\\leq f_n(A)\\leq1 0\\leq f_n(A)\\leq1 f_n(S)=1 f_n(S)=1 \u82e5 A_1,A_2,...,A_k A_1,A_2,...,A_k \u4e24\u4e24\u4e92\u4e0d\u76f8\u5bb9\uff0c\u5219 f_n(\\bigcup_{i=1}^{k}{A_i}=\\sum_{i=1}^{k}{f_n(A_i)}) f_n(\\bigcup_{i=1}^{k}{A_i}=\\sum_{i=1}^{k}{f_n(A_i)})","title":"\u9891\u7387"},{"location":"%E6%A6%82%E7%BB%9F/chapter_3/#_1","text":"","title":"\u9891\u7387"},{"location":"%E6%A6%82%E7%BB%9F/chapter_3/#_2","text":"f_n(A)=\\frac{n_A}{n} f_n(A)=\\frac{n_A}{n} \u5176\u4e2d\uff0c n_A n_A \u662f A A \u53d1\u751f\u7684\u6b21\u6570\uff0c n n \u662f\u603b\u8bd5\u9a8c\u6b21\u6570 \u79f0 f_n(A) f_n(A) \u4e3a A A \u5728\u8fd9 n n \u6b21\u8bd5\u9a8c\u4e2d\u53d1\u751f\u7684\u9891\u7387","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_3/#_3","text":"0\\leq f_n(A)\\leq1 0\\leq f_n(A)\\leq1 f_n(S)=1 f_n(S)=1 \u82e5 A_1,A_2,...,A_k A_1,A_2,...,A_k \u4e24\u4e24\u4e92\u4e0d\u76f8\u5bb9\uff0c\u5219 f_n(\\bigcup_{i=1}^{k}{A_i}=\\sum_{i=1}^{k}{f_n(A_i)}) f_n(\\bigcup_{i=1}^{k}{A_i}=\\sum_{i=1}^{k}{f_n(A_i)})","title":"\u6027\u8d28"},{"location":"%E6%A6%82%E7%BB%9F/chapter_4/","text":"\u6982\u7387 \u00b6 \u5b9a\u4e49 \u00b6 \u7edf\u8ba1\u6027\u5b9a\u4e49 \u00b6 \u5f53\u8bd5\u9a8c\u7684\u6b21\u6570\u589e\u52a0\u65f6\uff0c\u968f\u673a\u4e8b\u4ef6 A A \u9891\u7387\u7684\u7a33\u5b9a\u503c p p \u79f0\u4e3a\u6982\u7387\uff0c\u8bb0\u4e3a P(A)=p P(A)=p \u7edf\u8ba1\u6027\u5b9a\u4e49 \u00b6 \u8bbe\u968f\u673a\u8bd5\u9a8c\u5bf9\u5e94\u7684\u6837\u672c\u7a7a\u95f4\u4e3a S S \u5bf9\u6bcf\u4e2a\u4e8b\u4ef6 A A \uff0c\u5b9a\u4e49P(A)\uff0c\u6ee1\u8db3\uff1a \u975e\u8d1f\u6027\uff1a P(A)\\geq0 P(A)\\geq0 \u89c4\u8303\u6027\uff1a P(S)=1 P(S)=1 \u53ef\u5217\u53ef\u52a0\u6027\uff1a A_1,A_2,... A_1,A_2,... \u4e24\u4e24\u4e92\u65a5\uff0c\u5373 A_iA_j=\\phi,i\\neq j A_iA_j=\\phi,i\\neq j \uff0c\u5219 P(\\bigcup_{i=1}^{\\infty}{A_i}=\\sum_{i=1}^{\\infty}{P(A_i)}) P(\\bigcup_{i=1}^{\\infty}{A_i}=\\sum_{i=1}^{\\infty}{P(A_i)})","title":"\u6982\u7387"},{"location":"%E6%A6%82%E7%BB%9F/chapter_4/#_1","text":"","title":"\u6982\u7387"},{"location":"%E6%A6%82%E7%BB%9F/chapter_4/#_2","text":"","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_4/#_3","text":"\u5f53\u8bd5\u9a8c\u7684\u6b21\u6570\u589e\u52a0\u65f6\uff0c\u968f\u673a\u4e8b\u4ef6 A A \u9891\u7387\u7684\u7a33\u5b9a\u503c p p \u79f0\u4e3a\u6982\u7387\uff0c\u8bb0\u4e3a P(A)=p P(A)=p","title":"\u7edf\u8ba1\u6027\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_4/#_4","text":"\u8bbe\u968f\u673a\u8bd5\u9a8c\u5bf9\u5e94\u7684\u6837\u672c\u7a7a\u95f4\u4e3a S S \u5bf9\u6bcf\u4e2a\u4e8b\u4ef6 A A \uff0c\u5b9a\u4e49P(A)\uff0c\u6ee1\u8db3\uff1a \u975e\u8d1f\u6027\uff1a P(A)\\geq0 P(A)\\geq0 \u89c4\u8303\u6027\uff1a P(S)=1 P(S)=1 \u53ef\u5217\u53ef\u52a0\u6027\uff1a A_1,A_2,... A_1,A_2,... \u4e24\u4e24\u4e92\u65a5\uff0c\u5373 A_iA_j=\\phi,i\\neq j A_iA_j=\\phi,i\\neq j \uff0c\u5219 P(\\bigcup_{i=1}^{\\infty}{A_i}=\\sum_{i=1}^{\\infty}{P(A_i)}) P(\\bigcup_{i=1}^{\\infty}{A_i}=\\sum_{i=1}^{\\infty}{P(A_i)})","title":"\u7edf\u8ba1\u6027\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_5/","text":"\u7b49\u53ef\u80fd\u6982\u578b\uff08\u53e4\u5178\u6982\u578b\uff09 \u00b6 \u5b9a\u4e49 \u00b6 \u6837\u672c\u7a7a\u95f4 S S \u4e2d\u6837\u672c\u70b9\u6709\u9650\uff08\u6709\u9650\u6027\uff09 \u51fa\u73b0\u6bcf\u4e00\u4e2a\u6837\u672c\u70b9\u7684\u6982\u7387\u76f8\u7b49\uff08\u7b49\u53ef\u80fd\u6027\uff09 P(A)=\\frac{A\u4e2d\u6837\u672c\u70b9\u6570}{S\u4e2d\u6837\u672c\u70b9\u6570} P(A)=\\frac{A\u4e2d\u6837\u672c\u70b9\u6570}{S\u4e2d\u6837\u672c\u70b9\u6570}","title":"\u7b49\u53ef\u80fd\u6982\u578b(\u53e4\u5178\u6982\u578b)"},{"location":"%E6%A6%82%E7%BB%9F/chapter_5/#_1","text":"","title":"\u7b49\u53ef\u80fd\u6982\u578b\uff08\u53e4\u5178\u6982\u578b\uff09"},{"location":"%E6%A6%82%E7%BB%9F/chapter_5/#_2","text":"\u6837\u672c\u7a7a\u95f4 S S \u4e2d\u6837\u672c\u70b9\u6709\u9650\uff08\u6709\u9650\u6027\uff09 \u51fa\u73b0\u6bcf\u4e00\u4e2a\u6837\u672c\u70b9\u7684\u6982\u7387\u76f8\u7b49\uff08\u7b49\u53ef\u80fd\u6027\uff09 P(A)=\\frac{A\u4e2d\u6837\u672c\u70b9\u6570}{S\u4e2d\u6837\u672c\u70b9\u6570} P(A)=\\frac{A\u4e2d\u6837\u672c\u70b9\u6570}{S\u4e2d\u6837\u672c\u70b9\u6570}","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_6/","text":"\u6761\u4ef6\u6982\u7387 \u00b6 \u5b9a\u4e49 \u00b6 P(B|A) P(B|A) \u8868\u793a A A \u53d1\u751f\u65f6 B B \u53d1\u751f\u7684\u6982\u7387 P(B|A)=\\frac{P(AB)}{P(A)},P(A)>0 P(B|A)=\\frac{P(AB)}{P(A)},P(A)>0 \u6ce8\u610f P(B|A) P(B|A) \u4ecd\u662f\u6982\u7387","title":"\u6761\u4ef6\u6982\u7387"},{"location":"%E6%A6%82%E7%BB%9F/chapter_6/#_1","text":"","title":"\u6761\u4ef6\u6982\u7387"},{"location":"%E6%A6%82%E7%BB%9F/chapter_6/#_2","text":"P(B|A) P(B|A) \u8868\u793a A A \u53d1\u751f\u65f6 B B \u53d1\u751f\u7684\u6982\u7387 P(B|A)=\\frac{P(AB)}{P(A)},P(A)>0 P(B|A)=\\frac{P(AB)}{P(A)},P(A)>0 \u6ce8\u610f P(B|A) P(B|A) \u4ecd\u662f\u6982\u7387","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_7_1/","text":"\u5212\u5206 \u00b6 \u5b9a\u4e49 \u00b6 \u79f0 B_1,B_2,...,B_n B_1,B_2,...,B_n \u4e3a S S \u7684\u4e00\u4e2a \u5212\u5206 \uff0c\u82e5 \u4e0d\u6f0f\uff1a B_1\\cup B_2\\cup\\cdots\\cup B_n=S B_1\\cup B_2\\cup\\cdots\\cup B_n=S \u4e0d\u91cd\uff1a B_iB_j=\\phi,i\\neq j B_iB_j=\\phi,i\\neq j","title":"\u5212\u5206"},{"location":"%E6%A6%82%E7%BB%9F/chapter_7_1/#_1","text":"","title":"\u5212\u5206"},{"location":"%E6%A6%82%E7%BB%9F/chapter_7_1/#_2","text":"\u79f0 B_1,B_2,...,B_n B_1,B_2,...,B_n \u4e3a S S \u7684\u4e00\u4e2a \u5212\u5206 \uff0c\u82e5 \u4e0d\u6f0f\uff1a B_1\\cup B_2\\cup\\cdots\\cup B_n=S B_1\\cup B_2\\cup\\cdots\\cup B_n=S \u4e0d\u91cd\uff1a B_iB_j=\\phi,i\\neq j B_iB_j=\\phi,i\\neq j","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_7_2/","text":"\u5168\u6982\u7387\u516c\u5f0f \u00b6 \u5b9a\u7406 \u00b6 \u8bbe B_1,B_2,...,B_n B_1,B_2,...,B_n \u4e3a S S \u7684\u4e00\u4e2a\u5212\u5206\u4e14 P(B_i)>0 P(B_i)>0 \uff0c\u5219\u6709 \u5168\u6982\u7387\u516c\u5f0f \uff1a P(A)=\\sum_{j=1}^{n}{P(B_j)}\u00b7P(A|B_j) P(A)=\\sum_{j=1}^{n}{P(B_j)}\u00b7P(A|B_j) \u8bc1\u660e\uff1a A=AS=AB_1\\cup AB_2\\cup\\cdots\\cup AB_n A=AS=AB_1\\cup AB_2\\cup\\cdots\\cup AB_n (AB_i (AB_i \u4e0e AB_j AB_j \u4e0d\u76f8\u5bb9 (i\\neq j)) (i\\neq j))","title":"\u5168\u6982\u7387\u516c\u5f0f"},{"location":"%E6%A6%82%E7%BB%9F/chapter_7_2/#_1","text":"","title":"\u5168\u6982\u7387\u516c\u5f0f"},{"location":"%E6%A6%82%E7%BB%9F/chapter_7_2/#_2","text":"\u8bbe B_1,B_2,...,B_n B_1,B_2,...,B_n \u4e3a S S \u7684\u4e00\u4e2a\u5212\u5206\u4e14 P(B_i)>0 P(B_i)>0 \uff0c\u5219\u6709 \u5168\u6982\u7387\u516c\u5f0f \uff1a P(A)=\\sum_{j=1}^{n}{P(B_j)}\u00b7P(A|B_j) P(A)=\\sum_{j=1}^{n}{P(B_j)}\u00b7P(A|B_j) \u8bc1\u660e\uff1a A=AS=AB_1\\cup AB_2\\cup\\cdots\\cup AB_n A=AS=AB_1\\cup AB_2\\cup\\cdots\\cup AB_n (AB_i (AB_i \u4e0e AB_j AB_j \u4e0d\u76f8\u5bb9 (i\\neq j)) (i\\neq j))","title":"\u5b9a\u7406"},{"location":"%E6%A6%82%E7%BB%9F/chapter_7_3/","text":"\u8d1d\u53f6\u65af\u516c\u5f0f \u00b6 \u5b9a\u7406 \u00b6 \u8bbe B_1,B_2,...,B_n B_1,B_2,...,B_n \u4e3a S S \u7684\u4e00\u4e2a\u5212\u5206\u4e14 P(B_i)>0 P(B_i)>0 \uff0c\u5bf9 P(A)>0 P(A)>0 \uff0c\u6709 \u8d1d\u53f6\u65af\u516c\u5f0f(Bayes\u516c\u5f0f) \uff1a P(B_i|A)=\\frac{P(B_i)\u00b7P(A|B_i)}{\\sum_{j=1}^{n}{P(B_j)P(A|B_j)}} P(B_i|A)=\\frac{P(B_i)\u00b7P(A|B_i)}{\\sum_{j=1}^{n}{P(B_j)P(A|B_j)}}","title":"\u8d1d\u53f6\u65af\u516c\u5f0f"},{"location":"%E6%A6%82%E7%BB%9F/chapter_7_3/#_1","text":"","title":"\u8d1d\u53f6\u65af\u516c\u5f0f"},{"location":"%E6%A6%82%E7%BB%9F/chapter_7_3/#_2","text":"\u8bbe B_1,B_2,...,B_n B_1,B_2,...,B_n \u4e3a S S \u7684\u4e00\u4e2a\u5212\u5206\u4e14 P(B_i)>0 P(B_i)>0 \uff0c\u5bf9 P(A)>0 P(A)>0 \uff0c\u6709 \u8d1d\u53f6\u65af\u516c\u5f0f(Bayes\u516c\u5f0f) \uff1a P(B_i|A)=\\frac{P(B_i)\u00b7P(A|B_i)}{\\sum_{j=1}^{n}{P(B_j)P(A|B_j)}} P(B_i|A)=\\frac{P(B_i)\u00b7P(A|B_i)}{\\sum_{j=1}^{n}{P(B_j)P(A|B_j)}}","title":"\u5b9a\u7406"},{"location":"%E6%A6%82%E7%BB%9F/chapter_8/","text":"\u4e8b\u4ef6\u72ec\u7acb\u6027 \u00b6 \u653e\u56de\u62bd\u6837\u65f6\uff0c A_1 A_1 \u7684\u53d1\u751f\u5bf9 A_2 A_2 \u7684\u53d1\u751f\u6982\u7387\u4e0d\u5f71\u54cd \u5b9a\u4e49 \u00b6 \u8bbe A,B A,B \u662f\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6\uff0c\u5982\u679c P(AB)=P(A)P(B)\\Leftrightarrow P(B|A)=P(B)\\Leftrightarrow P(A|B)=P(A) P(AB)=P(A)P(B)\\Leftrightarrow P(B|A)=P(B)\\Leftrightarrow P(A|B)=P(A) \u5219\u79f0 A,B A,B \u76f8\u4e92\u72ec\u7acb \u6027\u8d28 \u00b6 A,B A,B \u76f8\u4e92\u72ec\u7acb \\Leftrightarrow\\overline{A},B \\Leftrightarrow\\overline{A},B \u76f8\u4e92\u72ec\u7acb \\Leftrightarrow A,\\overline{B} \\Leftrightarrow A,\\overline{B} \u76f8\u4e92\u72ec\u7acb \\Leftrightarrow\\overline{A},\\overline{B} \\Leftrightarrow\\overline{A},\\overline{B} \u76f8\u4e92\u72ec\u7acb \u63a8\u5e7f \u00b6 \u8bbeA_1,A_2,\\cdots,A_n \u8bbeA_1,A_2,\\cdots,A_n \u4e3a n n \u4e2a\u968f\u673a\u4e8b\u4ef6 \u82e5\u5bf9\u4e8e 2\\leq k\\leq n 2\\leq k\\leq n \u5747\u6709\uff1a P(A_{i_1}A_{i_2}\\cdots A_{i_k})=\\prod_{j=1}^{k}{P(A_{i_j})} P(A_{i_1}A_{i_2}\\cdots A_{i_k})=\\prod_{j=1}^{k}{P(A_{i_j})} \u5219\u79f0 A_1,A_2,\\cdots,A_n A_1,A_2,\\cdots,A_n \u76f8\u4e92\u72ec\u7acb \u6ce8\u610f \u4e24\u4e24\u72ec\u7acb \\not\\Rightarrow \\not\\Rightarrow \u76f8\u4e92\u72ec\u7acb","title":"\u4e8b\u4ef6\u72ec\u7acb\u6027"},{"location":"%E6%A6%82%E7%BB%9F/chapter_8/#_1","text":"\u653e\u56de\u62bd\u6837\u65f6\uff0c A_1 A_1 \u7684\u53d1\u751f\u5bf9 A_2 A_2 \u7684\u53d1\u751f\u6982\u7387\u4e0d\u5f71\u54cd","title":"\u4e8b\u4ef6\u72ec\u7acb\u6027"},{"location":"%E6%A6%82%E7%BB%9F/chapter_8/#_2","text":"\u8bbe A,B A,B \u662f\u4e24\u4e2a\u968f\u673a\u4e8b\u4ef6\uff0c\u5982\u679c P(AB)=P(A)P(B)\\Leftrightarrow P(B|A)=P(B)\\Leftrightarrow P(A|B)=P(A) P(AB)=P(A)P(B)\\Leftrightarrow P(B|A)=P(B)\\Leftrightarrow P(A|B)=P(A) \u5219\u79f0 A,B A,B \u76f8\u4e92\u72ec\u7acb","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_8/#_3","text":"A,B A,B \u76f8\u4e92\u72ec\u7acb \\Leftrightarrow\\overline{A},B \\Leftrightarrow\\overline{A},B \u76f8\u4e92\u72ec\u7acb \\Leftrightarrow A,\\overline{B} \\Leftrightarrow A,\\overline{B} \u76f8\u4e92\u72ec\u7acb \\Leftrightarrow\\overline{A},\\overline{B} \\Leftrightarrow\\overline{A},\\overline{B} \u76f8\u4e92\u72ec\u7acb","title":"\u6027\u8d28"},{"location":"%E6%A6%82%E7%BB%9F/chapter_8/#_4","text":"\u8bbeA_1,A_2,\\cdots,A_n \u8bbeA_1,A_2,\\cdots,A_n \u4e3a n n \u4e2a\u968f\u673a\u4e8b\u4ef6 \u82e5\u5bf9\u4e8e 2\\leq k\\leq n 2\\leq k\\leq n \u5747\u6709\uff1a P(A_{i_1}A_{i_2}\\cdots A_{i_k})=\\prod_{j=1}^{k}{P(A_{i_j})} P(A_{i_1}A_{i_2}\\cdots A_{i_k})=\\prod_{j=1}^{k}{P(A_{i_j})} \u5219\u79f0 A_1,A_2,\\cdots,A_n A_1,A_2,\\cdots,A_n \u76f8\u4e92\u72ec\u7acb \u6ce8\u610f \u4e24\u4e24\u72ec\u7acb \\not\\Rightarrow \\not\\Rightarrow \u76f8\u4e92\u72ec\u7acb","title":"\u63a8\u5e7f"},{"location":"%E6%A6%82%E7%BB%9F/chapter_9/","text":"\u968f\u673a\u53d8\u91cf \u00b6 \u5b9a\u4e49 \u00b6 \u8bbe\u968f\u673a\u8bd5\u9a8c\u7684\u6837\u672c\u7a7a\u95f4\u4e3a S S \uff0c\u82e5 X=X(e) X=X(e) \u4e3a\u5b9a\u4e49\u5728 S S \u4e0a\u7684\u5b9e\u503c\u5355\u503c\u51fd\u6570\uff0c\u5219\u79f0 X(e) X(e) \u4e3a \u968f\u673a\u53d8\u91cf \uff0c\u7b80\u5199\u4e3a X X \u6ce8\u610f \u968f\u673a\u53d8\u91cf\u5b9e\u9645\u4e3a\u4e00\u4e2a\u51fd\u6570 \u8bf4\u660e (1) \u968f\u673a\u53d8\u91cf X(e):S\\rightarrow R X(e):S\\rightarrow R \u4e3a\u4e00\u6620\u5c04\uff0c\u5176\u81ea\u53d8\u91cf\u5177\u6709\u968f\u673a\u6027\uff1b (2) \u968f\u673a\u4e8b\u4ef6\u53ef\u4ee5\u8868\u793a\u4e3a A=\\{e:X(e)\\in I\\}=\\{X\\in I\\},I\\subset R A=\\{e:X(e)\\in I\\}=\\{X\\in I\\},I\\subset R (3) \u5bf9\u4e8e i\\neq j i\\neq j \uff0c\u5219\u5fc5\u6709 \\{X=i\\}\\cap\\{X=j\\}=\\phi \\{X=i\\}\\cap\\{X=j\\}=\\phi (4) \u4e00\u822c\u7528\u5927\u5199\u82f1\u6587\u5b57\u6bcd X,Y,Z X,Y,Z \u6216\u5e0c\u814a\u5b57\u6bcd \\xi,\\eta \\xi,\\eta \u7b49\u6765\u8868\u793a\u968f\u673a\u53d8\u91cf \u5e38\u89c1\u7684\u4e24\u7c7b\u968f\u673a\u53d8\u91cf \u00b6 \u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf \u00b6 \u5b9a\u4e49 \u00b6 \u82e5\u968f\u673a\u53d8\u91cfX\u7684\u53d6\u503c\u4e3a\u6709\u9650\u4e2a\u6216\u53ef\u6570\u4e2a\uff0c\u5219\u79f0 X X \u4e3a \u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf \u53ef\u6570\u96c6(\u4e5f\u79f0\u4e3a\u53ef\u5217\u96c6)\uff1a\u662f\u6307\u80fd\u4e0e\u81ea\u7136\u6570\u96c6 N N \u5efa\u7acb\u4e00\u4e00\u5bf9\u5e94\u7684\u96c6\u5408\uff0c\u5373\u5176\u4e2d\u7684\u5143\u7d20\u90fd\u662f\u53ef\u4ee5\u88ab\u6570\u5230\u7684 \u4e0d\u53ef\u6570\u96c6\uff1a\u662f\u65e0\u7a77\u96c6\u5408\u4e2d\u7684\u4e00\u79cd\uff0c\u4e00\u4e2a\u65e0\u7a77\u96c6\u5408\u548c\u81ea\u7136\u6570\u96c6\u5408\u4e4b\u95f4\u5982\u679c\u4e0d\u5b58\u5728\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u4e0d\u53ef\u6570\u96c6 \u6982\u7387\u5206\u5e03\u5f8b(\u7b80\u79f0\u5206\u5e03\u5f8b) \u00b6 \u5206\u5e03\u5f8b\u7684\u5185\u5bb9\uff1a \\begin{cases}\u968f\u673a\u53d8\u91cf\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c\\\\\u53d6\u6bcf\u4e2a\u53ef\u80fd\u53d6\u503c\u76f8\u5e94\u7684\u6982\u7387\\end{cases} \\begin{cases}\u968f\u673a\u53d8\u91cf\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c\\\\\u53d6\u6bcf\u4e2a\u53ef\u80fd\u53d6\u503c\u76f8\u5e94\u7684\u6982\u7387\\end{cases} \u5206\u5e03\u5f8b\u7684\u6027\u8d28\uff1a p_k\\geq0,\\sum_{k=1}^{+\\infty}{p_k}=1 p_k\\geq0,\\sum_{k=1}^{+\\infty}{p_k}=1 \u5206\u5e03\u5f8b\u7684\u53e6\u4e00\u8868\u793a\u5f62\u5f0f\uff1a P(X=x_k)=p_k,\\ k=1,2,\\cdots P(X=x_k)=p_k,\\ k=1,2,\\cdots \u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf \u00b6 \u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u5c06\u5728 \u6982\u7387\u5bc6\u5ea6 \u4e00\u8282\u4e2d\u7ed9\u51fa\u5b9a\u4e49","title":"\u968f\u673a\u53d8\u91cf"},{"location":"%E6%A6%82%E7%BB%9F/chapter_9/#_1","text":"","title":"\u968f\u673a\u53d8\u91cf"},{"location":"%E6%A6%82%E7%BB%9F/chapter_9/#_2","text":"\u8bbe\u968f\u673a\u8bd5\u9a8c\u7684\u6837\u672c\u7a7a\u95f4\u4e3a S S \uff0c\u82e5 X=X(e) X=X(e) \u4e3a\u5b9a\u4e49\u5728 S S \u4e0a\u7684\u5b9e\u503c\u5355\u503c\u51fd\u6570\uff0c\u5219\u79f0 X(e) X(e) \u4e3a \u968f\u673a\u53d8\u91cf \uff0c\u7b80\u5199\u4e3a X X \u6ce8\u610f \u968f\u673a\u53d8\u91cf\u5b9e\u9645\u4e3a\u4e00\u4e2a\u51fd\u6570 \u8bf4\u660e (1) \u968f\u673a\u53d8\u91cf X(e):S\\rightarrow R X(e):S\\rightarrow R \u4e3a\u4e00\u6620\u5c04\uff0c\u5176\u81ea\u53d8\u91cf\u5177\u6709\u968f\u673a\u6027\uff1b (2) \u968f\u673a\u4e8b\u4ef6\u53ef\u4ee5\u8868\u793a\u4e3a A=\\{e:X(e)\\in I\\}=\\{X\\in I\\},I\\subset R A=\\{e:X(e)\\in I\\}=\\{X\\in I\\},I\\subset R (3) \u5bf9\u4e8e i\\neq j i\\neq j \uff0c\u5219\u5fc5\u6709 \\{X=i\\}\\cap\\{X=j\\}=\\phi \\{X=i\\}\\cap\\{X=j\\}=\\phi (4) \u4e00\u822c\u7528\u5927\u5199\u82f1\u6587\u5b57\u6bcd X,Y,Z X,Y,Z \u6216\u5e0c\u814a\u5b57\u6bcd \\xi,\\eta \\xi,\\eta \u7b49\u6765\u8868\u793a\u968f\u673a\u53d8\u91cf","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_9/#_3","text":"","title":"\u5e38\u89c1\u7684\u4e24\u7c7b\u968f\u673a\u53d8\u91cf"},{"location":"%E6%A6%82%E7%BB%9F/chapter_9/#_4","text":"","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf"},{"location":"%E6%A6%82%E7%BB%9F/chapter_9/#_5","text":"\u82e5\u968f\u673a\u53d8\u91cfX\u7684\u53d6\u503c\u4e3a\u6709\u9650\u4e2a\u6216\u53ef\u6570\u4e2a\uff0c\u5219\u79f0 X X \u4e3a \u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf \u53ef\u6570\u96c6(\u4e5f\u79f0\u4e3a\u53ef\u5217\u96c6)\uff1a\u662f\u6307\u80fd\u4e0e\u81ea\u7136\u6570\u96c6 N N \u5efa\u7acb\u4e00\u4e00\u5bf9\u5e94\u7684\u96c6\u5408\uff0c\u5373\u5176\u4e2d\u7684\u5143\u7d20\u90fd\u662f\u53ef\u4ee5\u88ab\u6570\u5230\u7684 \u4e0d\u53ef\u6570\u96c6\uff1a\u662f\u65e0\u7a77\u96c6\u5408\u4e2d\u7684\u4e00\u79cd\uff0c\u4e00\u4e2a\u65e0\u7a77\u96c6\u5408\u548c\u81ea\u7136\u6570\u96c6\u5408\u4e4b\u95f4\u5982\u679c\u4e0d\u5b58\u5728\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u4e0d\u53ef\u6570\u96c6","title":"\u5b9a\u4e49"},{"location":"%E6%A6%82%E7%BB%9F/chapter_9/#_6","text":"\u5206\u5e03\u5f8b\u7684\u5185\u5bb9\uff1a \\begin{cases}\u968f\u673a\u53d8\u91cf\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c\\\\\u53d6\u6bcf\u4e2a\u53ef\u80fd\u53d6\u503c\u76f8\u5e94\u7684\u6982\u7387\\end{cases} \\begin{cases}\u968f\u673a\u53d8\u91cf\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c\\\\\u53d6\u6bcf\u4e2a\u53ef\u80fd\u53d6\u503c\u76f8\u5e94\u7684\u6982\u7387\\end{cases} \u5206\u5e03\u5f8b\u7684\u6027\u8d28\uff1a p_k\\geq0,\\sum_{k=1}^{+\\infty}{p_k}=1 p_k\\geq0,\\sum_{k=1}^{+\\infty}{p_k}=1 \u5206\u5e03\u5f8b\u7684\u53e6\u4e00\u8868\u793a\u5f62\u5f0f\uff1a P(X=x_k)=p_k,\\ k=1,2,\\cdots P(X=x_k)=p_k,\\ k=1,2,\\cdots","title":"\u6982\u7387\u5206\u5e03\u5f8b(\u7b80\u79f0\u5206\u5e03\u5f8b)"},{"location":"%E6%A6%82%E7%BB%9F/chapter_9/#_7","text":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u5c06\u5728 \u6982\u7387\u5bc6\u5ea6 \u4e00\u8282\u4e2d\u7ed9\u51fa\u5b9a\u4e49","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf"},{"location":"%E7%AE%97%E6%B3%95/","text":"\u7b97\u6cd5\u4e13\u9898\u62a5\u544a \u00b6 \u7a0b\u5e8f\u8bbe\u8ba1=\u7b97\u6cd5+\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u89c1\u7b97\u6cd5\u662f\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u6781\u4e3a\u91cd\u8981\u7684\u4e00\u90e8\u5206 \u6b64\u5206\u7c7b\u4e0b\u8bb0\u5f55\u4e86\u6bcf\u5b66\u671f\u7684\u7b97\u6cd5\u4e13\u9898\u62a5\u544a\u6587\u6863","title":"\u7b80\u4ecb"},{"location":"%E7%AE%97%E6%B3%95/#_1","text":"\u7a0b\u5e8f\u8bbe\u8ba1=\u7b97\u6cd5+\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u89c1\u7b97\u6cd5\u662f\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u6781\u4e3a\u91cd\u8981\u7684\u4e00\u90e8\u5206 \u6b64\u5206\u7c7b\u4e0b\u8bb0\u5f55\u4e86\u6bcf\u5b66\u671f\u7684\u7b97\u6cd5\u4e13\u9898\u62a5\u544a\u6587\u6863","title":"\u7b97\u6cd5\u4e13\u9898\u62a5\u544a"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/","text":"\u7f51\u7edc\u6d41\u2014\u2014\u56fe\u8bba\u7684\u201c\u7ec8\u6781\u201d\u7b97\u6cd5 \u00b6 \u7b2c\u4e00\u90e8\u5206\uff1a\u6700\u5927\u6d41 \u00b6 \u8ba1\u7b97\u673a\u5b66\u966221\u7ea7 \u4f55\u4e30\u8fb0 \u00b6 \u914d\u5957\u89c6\u9891 \u6700\u5927\u6d41\u5165\u95e8 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u56fe\u7684\u5b58\u50a8 \u56fe\u7684\u904d\u5386 \u6700\u77ed\u8def \u4e8c\u5206\u56fe \u57fa\u7840\u5b9a\u4e49 \u00b6 \u7f51\u7edc/\u6d41\u7f51\u7edc \u6307\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5176\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u79f0\u4e4b\u4e3a\u5bb9\u91cf\u3002\u5176\u4e2d\u6709\u4e24\u4e2a\u7279\u6b8a\u70b9\uff1a\u6e90\u70b9 s s \u548c\u6c47\u70b9 t t \u3002 \u5bb9\u91cf\u9650\u5236 \u5bf9\u4e8e\u7f51\u7edc\u4e2d\u7684\u6bcf\u6761\u8fb9\uff0c\u6d41\u7ecf\u8be5\u8fb9\u7684\u6d41\u91cf\u4e0d\u80fd\u8d85\u8fc7\u8be5\u8fb9\u7684\u5bb9\u91cf \u659c\u5bf9\u79f0\u6027 \u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4e0e\u5176\u76f8\u53cd\u8fb9\u7684\u6d41\u91cf\u4e4b\u548c\u4e3a0\uff08\u5176\u76f8\u53cd\u8fb9\u53ef\u4ee5\u662f\u865a\u62df\u7684\u8fb9\uff09 \u6d41\u5b88\u6052\u6027 \u6e90\u70b9\u6d41\u51fa\u7684\u6d41\u91cf\u7b49\u4e8e\u6c47\u70b9\u6d41\u5165\u7684\u6d41\u91cf \u5269\u4f59\u5bb9\u91cf \u5bb9\u91cf-\u6d41\u91cf \u7f51\u7edc\u7684\u6d41\u91cf \u6e90\u70b9\u6d41\u51fa\u7684\u6240\u6709\u6d41\u91cf\u4e4b\u548c \u6700\u5927\u6d41\u7684\u4e09\u79cd\u7b97\u6cd5 \u00b6 \u5b9a\u4e49 \u00b6 \u6700\u5927\u6d41 \u7f51\u7edc\u7684\u6d41\u91cf\u6700\u5927 \u963b\u585e\u6d41 \u65e0\u6cd5\u518d\u4ece\u6e90\u70b9\u5411\u6c47\u70b9\u8f93\u51fa\u6d41\u91cf \u6b8b\u91cf\u7f51\u7edc \u539f\u7f51\u7edc\u4e2d\u6240\u6709\u7ed3\u70b9\u548c \u5269\u4f59\u5bb9\u91cf\u5927\u4e8e0 \u7684\u8fb9\uff08\u5305\u62ec\u4e86\u53cd\u5411\u8fb9\uff09\u6784\u6210\u7684\u5b50\u56fe \u589e\u5e7f\u8def \u6b8b\u91cf\u7f51\u7edc\u4e2d\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u8def\u5f84 \u6734\u7d20\u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u63cf\u8ff0 \u00b6 \u5bfb\u627e\u4efb\u610f\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u7b80\u5355\u8def\u5f84\uff08\u5373\u4e0d\u5b58\u5728\u56de\u8def\u7684\u8def\u5f84\uff09\uff0c\u82e5\u627e\u5230\u5219\u8fdb\u884c\u6b65\u9aa42\uff0c\u82e5\u627e\u4e0d\u5230\u5219\u8df3\u5230\u6b65\u9aa45 \u5b9a\u4e49\u74f6\u9888\u5bb9\u91cf\u4e3a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u7684\u6700\u5c0f\u503c \u5c06\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u51cf\u53bb\u74f6\u9888\u5bb9\u91cf\uff0c\u66f4\u65b0\u6b8b\u91cf\u7f51\u7edc \u8df3\u5230\u6b65\u9aa41 \u6700\u5927\u6d41=\u6e90\u70b9\u7684\u51fa\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf=\u6c47\u70b9\u7684\u5165\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf \u7b97\u6cd5\u7f3a\u9677 \u00b6 \u53ea\u80fd\u627e\u5230\u963b\u585e\u6d41\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u627e\u5230\u6700\u5927\u6d41\uff01 Ford-Fulkerson\u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u63cf\u8ff0 \u00b6 \u5bfb\u627e\u4efb\u610f\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u7b80\u5355\u8def\u5f84\uff08\u5373\u4e0d\u5b58\u5728\u56de\u8def\u7684\u8def\u5f84\uff09\uff0c\u82e5\u627e\u5230\u5219\u8fdb\u884c\u6b65\u9aa42\uff0c\u82e5\u627e\u4e0d\u5230\u5219\u8df3\u5230\u6b65\u9aa46 \u5b9a\u4e49\u74f6\u9888\u5bb9\u91cf\u4e3a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u7684\u6700\u5c0f\u503c \u5c06\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u51cf\u53bb\u74f6\u9888\u5bb9\u91cf\uff0c\u66f4\u65b0\u6b8b\u91cf\u7f51\u7edc \u8df3\u5230\u6b65\u9aa41 \u6dfb\u52a0\u4e00\u6761\u53cd\u5411\u8def\u5f84 \u6700\u5927\u6d41=\u6e90\u70b9\u7684\u51fa\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf=\u6c47\u70b9\u7684\u5165\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf \u7b97\u6cd5\u7f3a\u9677 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u53d7\u8fb9\u6743\u5f71\u54cd\uff01 \u6700\u574f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(mf) O(mf) \uff0c m m \u4e3a\u8fb9\u6570\uff0c f f \u4e3a\u6700\u5927\u6d41\u7684\u6d41\u91cf Edmonds-Karp\u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u63cf\u8ff0 \u00b6 \u5bfb\u627e\u4efb\u610f\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684 \u6700\u77ed \u8def\u5f84\uff08\u627e\u6700\u77ed\u8def\u65f6 \u4e0d\u8003\u8651\u8fb9\u6743 \uff0c\u5373\u8fb9\u6743\u5168\u90e8\u4e3a1\uff09\uff0c\u82e5\u627e\u5230\u5219\u8fdb\u884c\u6b65\u9aa42\uff0c\u82e5\u627e\u4e0d\u5230\u5219\u8df3\u5230\u6b65\u9aa46 \u5b9a\u4e49\u74f6\u9888\u5bb9\u91cf\u4e3a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u7684\u6700\u5c0f\u503c \u5c06\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u51cf\u53bb\u74f6\u9888\u5bb9\u91cf\uff0c\u66f4\u65b0\u6b8b\u91cf\u7f51\u7edc \u8df3\u5230\u6b65\u9aa41 \u6dfb\u52a0\u4e00\u6761\u53cd\u5411\u8def\u5f84 \u6700\u5927\u6d41=\u6e90\u70b9\u7684\u51fa\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf=\u6c47\u70b9\u7684\u5165\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf \u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u8fb9\u6570\u6700\u591a\u4e3a 2m 2m \uff08\u52a0\u4e0a\u53cd\u5411\u8fb9\uff09 \u56e0\u6b64\u6bcf\u4e00\u8f6e\u5faa\u73af\u4e2d\uff0c\u5bfb\u627e\u6700\u77ed\u8def\u9700\u8981 O(m) O(m) \u6700\u591a\u8fdb\u884c mn mn \u8f6e\u5faa\u73af\uff08\u8bc1\u660e\u8fc7\u7a0b\u8f83\u4e3a\u7e41\u7410\uff0c\u4e0d\u5c55\u5f00\u53d9\u8ff0\uff09 \u56e0\u6b64\u6700\u574f\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(m^2n) O(m^2n) \uff0c\u5176\u4e2d m m \u4e3a\u8fb9\u6570\uff0c n n \u4e3a\u7ed3\u70b9\u6570 \u5b9e\u9645\u4f7f\u7528\u4e2d\u5f80\u5f80\u8fbe\u4e0d\u5230\u6700\u574f\u60c5\u51b5\uff0c\u80fd\u591f\u5904\u7406 10^3-10^4 10^3-10^4 \u89c4\u6a21\u7684\u7f51\u7edc Dinic\u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u63cf\u8ff0 \u00b6 BFS\u5c06\u56fe\u5206\u5c42\u6784\u5efa \u5206\u5c42\u7f51\u7edc \uff0c\u82e5\u6e90\u70b9\u65e0\u6cd5\u5230\u8fbe\u6c47\u70b9\u5219\u8df3\u5230\u6b65\u9aa45 \u5728\u5206\u5c42\u7f51\u7edc\u4e2dDFS\u5bfb\u627e\u963b\u585e\u6d41\u5e76\u66f4\u65b0\u6b8b\u5dee\u7f51\u7edc \u5728\u6b8b\u5dee\u7f51\u7edc\u4e2d\u6dfb\u52a0\u53cd\u5411\u8fb9 \u8df3\u5230\u6b65\u9aa41 \u6700\u5927\u6d41=\u6e90\u70b9\u7684\u51fa\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf=\u6c47\u70b9\u7684\u5165\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf \u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u6bcf\u4e00\u8f6e\u5faa\u73af\u4e2d\uff0c\u6784\u5efa\u5206\u5c42\u7f51\u7edc\u5e76\u5bfb\u627e\u963b\u585e\u6d41\u6700\u574f\u9700\u8981 O(mn) O(mn) \u6700\u591a\u8fdb\u884c n-1 n-1 \u8f6e\u5faa\u73af \u56e0\u6b64\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(mn^2) O(mn^2) \uff0c\u5176\u4e2d m m \u4e3a\u8fb9\u6570\uff0c n n \u4e3a\u7ed3\u70b9\u6570 \u5b9e\u9645\u4f7f\u7528\u4e2d\u5f80\u5f80\u8fbe\u4e0d\u5230\u6700\u574f\u60c5\u51b5\uff0c\u80fd\u591f\u5904\u7406 10^4-10^5 10^4-10^5 \u89c4\u6a21\u7684\u7f51\u7edc Dinic\u662f\u6c42\u89e3\u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\u4e2d\u6700\u5e38\u4f7f\u7528\u7684\u7b97\u6cd5 \u7b97\u6cd5\u6a21\u677f \u00b6 namespace Dinic { const int N = 1e5 + 7 , M = 2e6 + 7 ; const ll inf = 1e18 ; int n , S , T , d [ N ]; int h [ N ], hi [ N ], e [ M ], t [ M ], tot ; ll f [ M ], mxf ; inline void add ( int x , int y , ll z , bool o = 1 ) { e [ ++ tot ] = y , f [ tot ] = z , t [ tot ] = h [ x ], h [ x ] = tot ; if ( o ) add ( y , x , 0 , 0 ); } inline bool bfs () { for ( int i = 1 ; i <= n ; i ++ ) d [ i ] = 0 ; queue < int > q ; q . push ( S ), d [ S ] = 1 ; while ( q . size ()) { int x = q . front (); q . pop (); for ( int i = h [ x ]; i ; i = t [ i ]) { int y = e [ i ]; ll z = f [ i ]; if ( d [ y ] || ! z ) continue ; q . push ( y ), d [ y ] = d [ x ] + 1 ; if ( y == T ) return 1 ; } } return 0 ; } ll dfs ( int x , ll now = inf ) { if ( x == T ) return now ; ll rst = now ; for ( int & i = hi [ x ]; i ; i = t [ i ]) { int y = e [ i ]; ll z = f [ i ]; if ( d [ y ] != d [ x ] + 1 || ! z ) continue ; ll k = dfs ( y , min ( z , rst )); if ( ! k ) d [ y ] = 0 ; else f [ i ] -= k , f [ i ^ 1 ] += k , rst -= k ; if ( ! rst ) break ; } return now - rst ; } inline void main () { while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) hi [ i ] = h [ i ]; ll now ; while (( now = dfs ( S ))) mxf += now ; } } inline void init ( int _n , int _S , int _T ) { n = _n , S = _S , T = _T , tot = 1 , mxf = 0 ; for ( int i = 1 ; i <= n ; i ++ ) h [ i ] = 0 ; } } \u6700\u5927\u6d41\u4e09\u79cd\u7b97\u6cd5\u5bf9\u6bd4 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 \u80fd\u591f\u5904\u7406\u7684\u6570\u636e\u89c4\u6a21 Ford-Fulkerson O(mf) O(mf) \u4e0e\u7f51\u7edc\u7684\u6700\u5927\u6d41\u91cf\u76f8\u5173 Edmonds-Karp O(nm^2) O(nm^2) 10^3-10^4 10^3-10^4 Dinic O(n^2m) O(n^2m) 10^4-10^5 10^4-10^5 \u6700\u5927\u6d41\u7684\u5e94\u7528 \u00b6 \u4e8c\u5206\u56fe\u5339\u914d \u00b6 \u4e8c\u5206\u56fe\u5339\u914d\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u5206\u56fe\ud835\udc3a\uff0c\u5728\ud835\udc3a\u7684\u4e00\u4e2a\u5b50\u56fe\ud835\udc40\u4e2d\uff0c\ud835\udc40\u7684\u8fb9\u96c6{\ud835\udc38}\u4e2d\u7684\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u4e0d\u76f8\u4ea4\uff0c\u5219\u79f0\ud835\udc40\u662f\u4e00\u4e2a\u5339\u914d \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d \u00b6 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5373\u4f7f\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d \u4e00\u822c\u7684\u7b97\u6cd5\u662f\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5c06\u6e90\u70b9\u8fde\u5411\u5de6\u90e8\u70b9\uff0c\u5c06\u53f3\u90e8\u70b9\u8fde\u5411\u6c47\u70b9\uff0c\u5bb9\u91cf\u5747\u4e3a1\uff0c\u8fd9\u6837\u8fd9\u4e2a\u7f51\u7edc\u7684\u6700\u5927\u6d41\u5c31\u7b49\u4e8e\u539f\u59cb\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u6570 \u4f8b\u9898 \u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\u95ee\u9898 \u9898\u76ee\u80cc\u666f \u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u671f\u95f4\uff0c\u82f1\u56fd\u7687\u5bb6\u7a7a\u519b\u4ece\u6ca6\u9677\u56fd\u5f81\u52df\u4e86\u5927\u91cf\u5916\u7c4d\u98de\u884c\u5458\u3002\u7531\u7687\u5bb6\u7a7a\u519b\u6d3e\u51fa\u7684\u6bcf\u4e00\u67b6\u98de\u673a\u90fd\u9700\u8981\u914d\u5907\u5728\u822a\u884c\u6280\u80fd\u548c\u8bed\u8a00\u4e0a\u80fd\u4e92\u76f8\u914d\u5408\u7684\u4e24\u540d\u98de\u884c\u5458\uff0c\u5176\u4e2d\u4e00\u540d\u662f\u82f1\u56fd\u98de\u884c\u5458\uff0c\u53e6\u4e00\u540d\u662f\u5916\u7c4d\u98de\u884c\u5458\u3002\u5728\u4f17\u591a\u7684\u98de\u884c\u5458\u4e2d\uff0c\u6bcf\u4e00\u540d\u5916\u7c4d\u98de\u884c\u5458\u90fd\u53ef\u4ee5\u4e0e\u5176\u4ed6\u82e5\u5e72\u540d\u82f1\u56fd\u98de\u884c\u5458\u5f88\u597d\u5730\u914d\u5408\u3002 \u9898\u76ee\u63cf\u8ff0 \u4e00\u5171\u6709 n n \u4e2a\u98de\u884c\u5458\uff0c\u5176\u4e2d\u6709 m m \u4e2a\u5916\u7c4d\u98de\u884c\u5458\u548c (n - m) (n - m) \u4e2a\u82f1\u56fd\u98de\u884c\u5458\uff0c \u5916\u7c4d\u98de\u884c\u5458\u4ece 1 1 \u5230 m m \u7f16\u53f7 \uff0c \u82f1\u56fd\u98de\u884c\u5458\u4ece m + 1 m + 1 \u5230 n n \u7f16\u53f7 \u3002 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5916\u7c4d\u98de\u884c\u5458\u4e0e\u82f1\u56fd\u98de\u884c\u5458\u7684\u914d\u5408\u60c5\u51b5\uff0c\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u627e\u51fa\u6700\u4f73\u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\uff0c\u4f7f\u7687\u5bb6\u7a7a\u519b\u4e00\u6b21\u80fd\u6d3e\u51fa\u6700\u591a\u7684\u98de\u673a\u3002 \u4fdd\u8bc1 1 \\leq m \\leq n < 100 1 \\leq m \\leq n < 100 \uff0c 1 \\leq u \\leq m < v \\leq n 1 \\leq u \\leq m < v \\leq n \uff0c\u540c\u4e00\u7ec4\u914d\u5bf9\u5173\u7cfb\u53ea\u4f1a\u7ed9\u51fa\u4e00\u6b21\u3002 \u89e3\u9898\u601d\u8def \u82f1\u56fd\u98de\u884c\u5458\u89c6\u4e3a\u5de6\u90e8\u8282\u70b9\uff0c\u5916\u56fd\u98de\u884c\u5458\u89c6\u4e3a\u53f3\u90e8\u8282\u70b9\uff0c\u6240\u6709\u8fb9\u7684\u5bb9\u91cf\u5747\u4e3a1\uff0c\u76f4\u63a5\u8dd1\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5373\u53ef \u65f6\u95f4\u590d\u6742\u5ea6\u5bf9\u6bd4 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d \u65f6\u95f4\u590d\u6742\u5ea6 \u5308\u7259\u5229\u7b97\u6cd5 O(nm) O(nm) Dinic O(\\sqrt{n}m) O(\\sqrt{n}m) \u53ef\u4ee5\u53d1\u73b0Dinic\u7b97\u6cd5\u5728\u6c42\u89e3\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u65f6\u6bd4\u5308\u7259\u5229\u7b97\u6cd5\u66f4\u52a0\u9ad8\u6548\uff08\u5177\u4f53\u8bc1\u660e\u7565\uff09 \u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d \u00b6 \u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\u5373\u6bcf\u4e2a\u8282\u70b9\u4e0d\u4e00\u5b9a\u53ea\u4e0e\u4e00\u6761\u8fb9\u76f8\u8fde\uff0c\u800c\u662f\u9650\u5236\u4e86\u6700\u591a\u8fde\u7684\u8fb9\u6570\uff08\u5f53\u9650\u5236\u4e3a1\u65f6\u9000\u5316\u4e3a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff09 \u666e\u901a\u7684\u5308\u7259\u5229\u7b97\u6cd5\u96be\u4ee5\u89e3\u51b3\u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\u95ee\u9898 \u4e0e\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7c7b\u4f3c\uff0c\u53ea\u9700\u5c06\u6e90\u70b9\u6307\u5411\u5de6\u90e8\u70b9\uff0c\u53f3\u90e8\u70b9\u6307\u5411\u6c47\u70b9\u7684\u5bb9\u91cf\u53d8\u6210\u7ed3\u70b9\u5141\u8bb8\u8fde\u7684\u6700\u5927\u8fb9\u6570\u5373\u53ef \u4f8b\u9898 \u5706\u684c\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u6709\u6765\u81ea m m \u4e2a\u4e0d\u540c\u5355\u4f4d\u7684\u4ee3\u8868\u53c2\u52a0\u4e00\u6b21\u56fd\u9645\u4f1a\u8bae\u3002\u7b2c i i \u4e2a\u5355\u4f4d\u6d3e\u51fa\u4e86 r_i r_i \u4e2a\u4ee3\u8868\u3002 \u4f1a\u8bae\u7684\u9910\u5385\u5171\u6709 n n \u5f20\u9910\u684c\uff0c\u7b2c i i \u5f20\u9910\u684c\u53ef\u5bb9\u7eb3 c_i c_i \u4e2a\u4ee3\u8868\u5c31\u9910\u3002 \u4e3a\u4e86\u4f7f\u4ee3\u8868\u4eec\u5145\u5206\u4ea4\u6d41\uff0c\u5e0c\u671b\u4ece\u540c\u4e00\u4e2a\u5355\u4f4d\u6765\u7684\u4ee3\u8868\u4e0d\u5728\u540c\u4e00\u4e2a\u9910\u684c\u5c31\u9910\u3002\u8bf7\u7ed9\u51fa\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u4ee3\u8868\u5c31\u9910\u65b9\u6848\u3002 \u4fdd\u8bc1 1 \\leq m \\leq 150 1 \\leq m \\leq 150 \uff0c 1 \\leq n \\leq 270 1 \\leq n \\leq 270 \uff0c 1 \\leq r_i, c_i \\leq 10^3 1 \\leq r_i, c_i \\leq 10^3 \u3002 \u89e3\u9898\u601d\u8def \u5355\u4f4d\u662f\u5de6\u90e8\uff0c\u684c\u5b50\u662f\u53f3\u90e8\uff0c\u6e90\u70b9\u5411\u5355\u4f4d\u8fde\u5bb9\u91cf\u4e3a\u5355\u4f4d\u6570\u91cf\u7684\u8fb9\uff0c\u684c\u5b50\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a\u684c\u5b50\u6570\u91cf\u7684\u8fb9\uff0c\u5355\u4f4d\u548c\u684c\u5b50\u5185\u90e8\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u7136\u540e\u8dd1\u6700\u5927\u6d41\u5373\u53ef \u4f8b\u9898 \u8bd5\u9898\u5e93\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u4e00\u4e2a\u8bd5\u9898\u5e93\u4e2d\u6709 n n \u9053\u8bd5\u9898\u3002\u6bcf\u9053\u8bd5\u9898\u90fd\u6807\u660e\u4e86\u6240\u5c5e\u7c7b\u522b\u3002\u540c\u4e00\u9053\u9898\u53ef\u80fd\u6709\u591a\u4e2a\u7c7b\u522b\u5c5e\u6027\u3002\u73b0\u8981\u4ece\u9898\u5e93\u4e2d\u62bd\u53d6 m m \u9053\u9898\u7ec4\u6210\u8bd5\u5377\u3002\u5e76\u8981\u6c42\u8bd5\u5377\u5305\u542b\u6307\u5b9a\u7c7b\u578b\u7684\u8bd5\u9898\u3002\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u7ec4\u5377\u7b97\u6cd5\u3002 \u4fdd\u8bc1 2\\leq k \\leq 20 2\\leq k \\leq 20 \uff0c k \\leq n \\leq 10^3 k \\leq n \\leq 10^3 \u3002 \u89e3\u9898\u601d\u8def \u8bd5\u9898\u662f\u5de6\u90e8\uff0c\u7c7b\u578b\u662f\u53f3\u90e8\uff0c\u6e90\u70b9\u5411\u5de6\u90e8\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u53f3\u90e8\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a\u53f3\u90e8\u70b9\u6743\u91cd\u7684\u8fb9\uff0c\u5de6\u90e8\u548c\u53f3\u90e8\u7684\u5185\u90e8\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u7136\u540e\u8dd1\u6700\u5927\u6d41\u5373\u53ef \u6700\u5c0f\u8def\u5f84\u8986\u76d6 \u00b6 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff1a\u5728\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u4e2d\uff0c\u627e\u51fa\u6700\u5c11\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u8def\u5f84\u7ecf\u8fc7\u4e86\u6240\u6709\u7684\u70b9 \u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6 \u00b6 \u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\uff1a\u8def\u5f84\u4e0d\u80fd\u76f8\u4ea4 \u5982\u4f55\u5c06\u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\u95ee\u9898\u8f6c\u5316\u4e3a\u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\uff1f \u4f8b\u9898 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u6709\u5411\u56fe G=(V,E) G=(V,E) \u3002\u8bbe P P \u662f G G \u7684\u4e00\u4e2a\u7b80\u5355\u8def\uff08\u9876\u70b9\u4e0d\u76f8\u4ea4\uff09\u7684\u96c6\u5408\u3002\u5982\u679c V V \u4e2d\u6bcf\u4e2a\u5b9a\u70b9\u6070\u597d\u5728 P P \u7684\u4e00\u6761\u8def\u4e0a\uff0c\u5219\u79f0 P P \u662f G G \u7684\u4e00\u4e2a\u8def\u5f84\u8986\u76d6\u3002 P P \u4e2d\u8def\u5f84\u53ef\u4ee5\u4ece V V \u7684\u4efb\u4f55\u4e00\u4e2a\u5b9a\u70b9\u5f00\u59cb\uff0c\u957f\u5ea6\u4e5f\u662f\u4efb\u610f\u7684\uff0c\u7279\u522b\u5730\uff0c\u53ef\u4ee5\u4e3a 0 0 \u3002 G G \u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u662f G G \u6240\u542b\u8def\u5f84\u6761\u6570\u6700\u5c11\u7684\u8def\u5f84\u8986\u76d6\u3002\u8bbe\u8ba1\u4e00\u4e2a\u6709\u6548\u7b97\u6cd5\u6c42\u4e00\u4e2a DAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09 G G \u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002 \u4fdd\u8bc1 1\\leq n\\leq 150 1\\leq n\\leq 150 \uff0c 1\\leq m\\leq 6000 1\\leq m\\leq 6000 \u3002 \u89e3\u9898\u601d\u8def \u628a\u539f\u56fe\u7684\u6bcf\u4e2a\u70b9 u u \u62c6\u6210\u4e24\u4e2a\u70b9 u_1 u_1 \u548c u_2 u_2 \uff0c\u5982\u679c\u6709\u4e00\u6761\u6709\u5411\u8fb9 (a,b) (a,b) \uff0c\u5219\u8fde\u8fb9 (a_2,b_1) (a_2,b_1) \uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u4f7f\u7528 \u6700\u5c0f\u8def\u5f84\u8986\u76d6=\u539f\u56fe\u8282\u70b9\u6570-\u65b0\u56fe\u6700\u5927\u5339\u914d\u6570 \u8fd9\u4e00\u5b9a\u7406\u5373\u53ef\u6c42\u51fa\u7b54\u6848 \u5b9a\u7406\u8bc1\u660e \u521d\u59cb\u65f6\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u6761\u8def\u5f84\uff0c\u6bcf\u6b21\u627e\u4e00\u6761\u5339\u914d\u8fb9\uff0c\u4ee3\u8868\u5408\u5e76\u4e24\u6761\u8def\u5f84 \u7531\u4e8e\u8def\u5f84\u4e0d\u76f8\u4ea4\uff08\u5373\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a1\uff09\uff0c\u6240\u4ee5\u4e8c\u5206\u56fe\u4e0a\u7684\u8fb9\u4e5f\u4e0d\u76f8\u4ea4\uff08\u5982\u679c\u76f8\u4ea4\u5219\u8bf4\u660e\u67d0\u4e2a\u70b9\u7684\u5165\u5ea6\u6216\u51fa\u5ea6\u5927\u4e8e1\uff09\uff0c\u8fd9\u6b63\u597d\u662f\u5339\u914d\u7684\u5b9a\u4e49 \u6bcf\u6761\u5339\u914d\u8fb9\u4ee3\u8868\u7b54\u6848-1\uff0c\u6240\u4ee5\u6700\u5c0f\u8def\u5f84\u8986\u76d6=\u539f\u56fe\u8282\u70b9\u6570-\u65b0\u56fe\u6700\u5927\u5339\u914d\u6570 \u6700\u5c0f\u53ef\u76f8\u4ea4\u8def\u5f84\u8986\u76d6 \u00b6 \u6700\u5c0f\u53ef\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\uff1a\u8def\u5f84\u53ef\u4ee5\u76f8\u4ea4 \u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u539f\u56fe\u4f20\u9012\u95ed\u5305\uff0c\u5373\u82e5\u539f\u56fe\u4e2d (u,v) (u,v) \u8fde\u901a\uff0c\u5219\u589e\u52a0\u8fb9 (u,v) (u,v) \u3002\u8fd9\u53ef\u4ee5\u7528Floyd\u7b97\u6cd5 O(n^3) O(n^3) \u5b9e\u73b0\u3002\u7136\u540e\u5bf9\u65b0\u56fe\u505a\u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\u5373\u53ef\u3002\u56e0\u4e3a\u5728\u539f\u56fe\u4e2d\u76f8\u4ea4\u7684\u8def\u5f84\u5728\u4f20\u9012\u95ed\u5305\u540e\u53ef\u4ee5\u62c6\u5206\u6210\u53e6\u4e00\u6761\u8fb9\uff0c\u8fd9\u6837\u5c31\u4e0d\u76f8\u4ea4\u4e86\u3002 \u4f8b\u9898 \u9b54\u672f\u7403\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u6709 n\\ (1 \\leq n \\leq 55) n\\ (1 \\leq n \\leq 55) \u6839\u67f1\u5b50\uff0c\u73b0\u8981\u6309\u4e0b\u8ff0\u89c4\u5219\u5728\u8fd9 n n \u6839\u67f1\u5b50\u4e2d\u4f9d\u6b21\u653e\u5165\u7f16\u53f7\u4e3a 1 1 \uff0c 2 2 \uff0c 3 3 \uff0c\u2026\u7684\u7403 1. \u6bcf\u6b21\u53ea\u80fd\u5728\u67d0\u6839\u67f1\u5b50\u7684\u6700\u4e0a\u9762\u653e\u7403\u3002 2. \u540c\u4e00\u6839\u67f1\u5b50\u4e2d\uff0c\u4efb\u4f55 2 2 \u4e2a\u76f8\u90bb\u7403\u7684\u7f16\u53f7\u4e4b\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\u3002 \u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u8ba1\u7b97\u51fa\u5728 n n \u6839\u67f1\u5b50\u4e0a\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a\u7403 \u89e3\u9898\u601d\u8def \u628a\u4e00\u4e2a\u7403 x x \u62c6\u6210 x_1 x_1 \u548c x_2 x_2 \u6e90\u70b9\u8fde x_1 x_1 \uff0c x_2 x_2 \u8fde\u6c47\u70b9\uff0c\u5bb9\u91cf\u5747\u4e3a1 \u627e\u5230\u80fd\u4e0e x x \u7ec4\u6210\u5b8c\u5168\u5e73\u65b9\u6570\u7684 y y \uff0c\u5c06 y y \u8fde\u5411 x_1 x_1 \u8dd1\u6700\u5927\u6d41 \u6700\u591a\u4e0d\u76f8\u4ea4\u8def\u5f84 \u00b6 \u6700\u591a\u4e0d\u76f8\u4ea4\u8def\u5f84\uff1a\u5df2\u77e5\u4e00\u4e9b\u8def\u5f84\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5c5e\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u6c42\u80fd\u9009\u62e9\u591a\u5c11\u6761\u8def\u5f84\u4f7f\u5b83\u4eec\u4e0d\u76f8\u4ea4 \u5982\u4f55\u5c06\u6700\u591a\u4e0d\u76f8\u4ea4\u8def\u5f84\u95ee\u9898\u8f6c\u5316\u4e3a\u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\uff1f \u901a\u7528\u65b9\u6cd5\uff1a\u62c6\u70b9\uff0c\u5c06\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\uff0c\u7136\u540e\u8fde\u8fb9\uff0c\u5bb9\u91cf\u8868\u793a\u8be5\u70b9\u6700\u591a\u7ecf\u8fc7\u6b21\u6570 \u4f8b\u9898 \u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u6b63\u6574\u6570\u5e8f\u5217 x_1 \\ldots, x_n\u3002(1 \\le n\\le 500) x_1 \\ldots, x_n\u3002(1 \\le n\\le 500) 1. \u8ba1\u7b97\u5176\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 s s \u3002 2. \u5982\u679c\u6bcf\u4e2a\u5143\u7d20\u53ea\u5141\u8bb8\u4f7f\u7528\u4e00\u6b21\uff0c\u8ba1\u7b97\u4ece\u7ed9\u5b9a\u7684\u5e8f\u5217\u4e2d\u6700\u591a\u53ef\u53d6\u51fa\u591a\u5c11\u4e2a\u957f\u5ea6\u4e3a s s \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u3002 3. \u5982\u679c\u5141\u8bb8\u5728\u53d6\u51fa\u7684\u5e8f\u5217\u4e2d\u591a\u6b21\u4f7f\u7528 x_1 x_1 \u548c x_n x_n \uff08\u5176\u4ed6\u5143\u7d20\u4ecd\u7136\u53ea\u5141\u8bb8\u4f7f\u7528\u4e00\u6b21\uff09\uff0c\u5219\u4ece\u7ed9\u5b9a\u5e8f\u5217\u4e2d\u6700\u591a\u53ef\u53d6\u51fa\u591a\u5c11\u4e2a**\u4e0d\u540c\u7684**\u957f\u5ea6\u4e3a s s \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u3002 \u89e3\u9898\u601d\u8def \u7b2c\u4e00\u95ee\uff1a\u8ba1\u7b97\u5176\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 s s DP\u6c42LIS\uff1a dp[i] dp[i] \u8868\u793a\u4ee5 a[i] a[i] \u7ed3\u5c3e\u7684LIS\u957f\u5ea6 \u521d\u59cb dp[i]=1 dp[i]=1 dp[i]=dp[j]+1(j<i,a[j]\\leq a[i]) dp[i]=dp[j]+1(j<i,a[j]\\leq a[i]) \u7b2c\u4e8c\u95ee\uff1a\u5982\u679c\u6bcf\u4e2a\u5143\u7d20\u53ea\u5141\u8bb8\u4f7f\u7528\u4e00\u6b21\uff0c\u8ba1\u7b97\u4ece\u7ed9\u5b9a\u7684\u5e8f\u5217\u4e2d\u6700\u591a\u53ef\u53d6\u51fa\u591a\u5c11\u4e2a\u957f\u5ea6\u4e3a s s \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217 \u82e5 a[j] a[j] \u52a0\u4e0a a[i] a[i] \u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u5219 j<i,a[j]\\leq a[i] j<i,a[j]\\leq a[i] \u6bcf\u4e2a\u5143\u7d20\u53ea\u80fd\u5728\u4e00\u4e2a\u5e8f\u5217\u4e2d \u6545\u6309\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u5efa\u56fe\uff1a \u6e90\u70b9 S=0,T=2n+1 S=0,T=2n+1 \u5c06\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c i i \u5411 i+n i+n \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1 \u5982\u679c dp[i]=1 dp[i]=1 \uff0c\u5219 s s \u5411 i i \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1\uff0c\u8fd9\u4e9b\u5143\u7d20\u5373\u4e3a\u5b50\u5e8f\u5217\u7684\u5934 \u5982\u679c j<i j<i \uff0c a[j]\\leq a[i] a[j]\\leq a[i] \uff0c\u5219 j+n j+n \u5411 i i \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1 \u5982\u679c dp[i]=k dp[i]=k \uff08LIS\u957f\u5ea6\uff09\uff0c\u5219 i+n i+n \u5411 t t \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1\uff0c\u5373\u4e3a\u5b50\u5e8f\u5217\u7684\u5c3e \u7b2c\u4e09\u95ee\uff1a\u5982\u679c\u5141\u8bb8\u5728\u53d6\u51fa\u7684\u5e8f\u5217\u4e2d\u591a\u6b21\u4f7f\u7528 x_1 x_1 \u548c x_n x_n \uff08\u5176\u4ed6\u5143\u7d20\u4ecd\u7136\u53ea\u5141\u8bb8\u4f7f\u7528\u4e00\u6b21\uff09\uff0c\u5219\u4ece\u7ed9\u5b9a\u5e8f\u5217\u4e2d\u6700\u591a\u53ef\u53d6\u51fa\u591a\u5c11\u4e2a**\u4e0d\u540c\u7684**\u957f\u5ea6\u4e3a s s \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217 \u53bb\u9664 x_1 x_1 \u548c x_n x_n \u7684\u9650\u5236\u5373\u53ef\uff0c\u53ef\u4ee5\u52a0\u5165\u8fb9 (S,1),(1,1+n),(n,2n),(2n,T) (S,1),(1,1+n),(n,2n),(2n,T) \u4e14\u5bb9\u91cf\u4e3a inf inf \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u5e8f\u5217\u4e25\u683c\u9012\u51cf\u65f6\uff0c dp[i]=1,s=1 dp[i]=1,s=1 \uff0c\u4e0d\u5b58\u5728 i,j i,j \u6ee1\u8db3 j<i,a[j]\\leq a[i] j<i,a[j]\\leq a[i] \uff0c\u6b64\u65f6\u7b54\u6848\u5373\u4e3a\u7b2c\u4e8c\u95ee\u7b54\u6848 \u62d3\u5c55\u65b9\u5411 \u00b6 \u7b97\u6cd5\u4e4b\u5185 \u00b6 \u6700\u5927\u6d41\u8fd8\u6709\u66f4\u52a0\u5feb\u901f\u7684 \u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5 \uff0c\u4f46\u4e00\u822c\u60c5\u51b5\u4e0bDinic\u5c31\u8db3\u591f\u89e3\u51b3\u6700\u5927\u6d41\u95ee\u9898\u4e86 \u6574\u4e2a\u56fe\u8bba\u7684\u96be\u70b9\u5f80\u5f80\u4e0d\u5728\u4e8e\u5404\u79cd\u7b97\u6cd5\uff0c\u800c\u5728\u4e8e \u5efa\u56fe \u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u7f51\u7edc\u6d41\u95ee\u9898\u4e5f\u662f\u5982\u6b64\uff0c\u56e0\u6b64\u5b66\u4e60\u7f51\u7edc\u6d41\u9700\u8981\u8fdb\u884c\u5927\u91cf\u5237\u9898 \u7f51\u7edc\u6d4124\u9898 \u7b97\u6cd5\u4e4b\u5916 \u00b6 \u5168\u6587\u7ed3\u675f\uff0c\u8c22\u8c22\u9605\u8bfb\uff01","title":"\u6700\u5927\u6d41\u5165\u95e8"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_1","text":"","title":"\u7f51\u7edc\u6d41\u2014\u2014\u56fe\u8bba\u7684\u201c\u7ec8\u6781\u201d\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_2","text":"","title":"\u7b2c\u4e00\u90e8\u5206\uff1a\u6700\u5927\u6d41"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#21","text":"\u914d\u5957\u89c6\u9891 \u6700\u5927\u6d41\u5165\u95e8","title":"\u8ba1\u7b97\u673a\u5b66\u966221\u7ea7 \u4f55\u4e30\u8fb0"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_3","text":"\u56fe\u7684\u5b58\u50a8 \u56fe\u7684\u904d\u5386 \u6700\u77ed\u8def \u4e8c\u5206\u56fe","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_4","text":"\u7f51\u7edc/\u6d41\u7f51\u7edc \u6307\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5176\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u79f0\u4e4b\u4e3a\u5bb9\u91cf\u3002\u5176\u4e2d\u6709\u4e24\u4e2a\u7279\u6b8a\u70b9\uff1a\u6e90\u70b9 s s \u548c\u6c47\u70b9 t t \u3002 \u5bb9\u91cf\u9650\u5236 \u5bf9\u4e8e\u7f51\u7edc\u4e2d\u7684\u6bcf\u6761\u8fb9\uff0c\u6d41\u7ecf\u8be5\u8fb9\u7684\u6d41\u91cf\u4e0d\u80fd\u8d85\u8fc7\u8be5\u8fb9\u7684\u5bb9\u91cf \u659c\u5bf9\u79f0\u6027 \u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4e0e\u5176\u76f8\u53cd\u8fb9\u7684\u6d41\u91cf\u4e4b\u548c\u4e3a0\uff08\u5176\u76f8\u53cd\u8fb9\u53ef\u4ee5\u662f\u865a\u62df\u7684\u8fb9\uff09 \u6d41\u5b88\u6052\u6027 \u6e90\u70b9\u6d41\u51fa\u7684\u6d41\u91cf\u7b49\u4e8e\u6c47\u70b9\u6d41\u5165\u7684\u6d41\u91cf \u5269\u4f59\u5bb9\u91cf \u5bb9\u91cf-\u6d41\u91cf \u7f51\u7edc\u7684\u6d41\u91cf \u6e90\u70b9\u6d41\u51fa\u7684\u6240\u6709\u6d41\u91cf\u4e4b\u548c","title":"\u57fa\u7840\u5b9a\u4e49"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_5","text":"","title":"\u6700\u5927\u6d41\u7684\u4e09\u79cd\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_6","text":"\u6700\u5927\u6d41 \u7f51\u7edc\u7684\u6d41\u91cf\u6700\u5927 \u963b\u585e\u6d41 \u65e0\u6cd5\u518d\u4ece\u6e90\u70b9\u5411\u6c47\u70b9\u8f93\u51fa\u6d41\u91cf \u6b8b\u91cf\u7f51\u7edc \u539f\u7f51\u7edc\u4e2d\u6240\u6709\u7ed3\u70b9\u548c \u5269\u4f59\u5bb9\u91cf\u5927\u4e8e0 \u7684\u8fb9\uff08\u5305\u62ec\u4e86\u53cd\u5411\u8fb9\uff09\u6784\u6210\u7684\u5b50\u56fe \u589e\u5e7f\u8def \u6b8b\u91cf\u7f51\u7edc\u4e2d\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u8def\u5f84","title":"\u5b9a\u4e49"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_7","text":"","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_8","text":"\u5bfb\u627e\u4efb\u610f\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u7b80\u5355\u8def\u5f84\uff08\u5373\u4e0d\u5b58\u5728\u56de\u8def\u7684\u8def\u5f84\uff09\uff0c\u82e5\u627e\u5230\u5219\u8fdb\u884c\u6b65\u9aa42\uff0c\u82e5\u627e\u4e0d\u5230\u5219\u8df3\u5230\u6b65\u9aa45 \u5b9a\u4e49\u74f6\u9888\u5bb9\u91cf\u4e3a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u7684\u6700\u5c0f\u503c \u5c06\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u51cf\u53bb\u74f6\u9888\u5bb9\u91cf\uff0c\u66f4\u65b0\u6b8b\u91cf\u7f51\u7edc \u8df3\u5230\u6b65\u9aa41 \u6700\u5927\u6d41=\u6e90\u70b9\u7684\u51fa\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf=\u6c47\u70b9\u7684\u5165\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf","title":"\u7b97\u6cd5\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_9","text":"\u53ea\u80fd\u627e\u5230\u963b\u585e\u6d41\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u627e\u5230\u6700\u5927\u6d41\uff01","title":"\u7b97\u6cd5\u7f3a\u9677"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#ford-fulkerson","text":"","title":"Ford-Fulkerson\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_10","text":"\u5bfb\u627e\u4efb\u610f\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u7b80\u5355\u8def\u5f84\uff08\u5373\u4e0d\u5b58\u5728\u56de\u8def\u7684\u8def\u5f84\uff09\uff0c\u82e5\u627e\u5230\u5219\u8fdb\u884c\u6b65\u9aa42\uff0c\u82e5\u627e\u4e0d\u5230\u5219\u8df3\u5230\u6b65\u9aa46 \u5b9a\u4e49\u74f6\u9888\u5bb9\u91cf\u4e3a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u7684\u6700\u5c0f\u503c \u5c06\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u51cf\u53bb\u74f6\u9888\u5bb9\u91cf\uff0c\u66f4\u65b0\u6b8b\u91cf\u7f51\u7edc \u8df3\u5230\u6b65\u9aa41 \u6dfb\u52a0\u4e00\u6761\u53cd\u5411\u8def\u5f84 \u6700\u5927\u6d41=\u6e90\u70b9\u7684\u51fa\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf=\u6c47\u70b9\u7684\u5165\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf","title":"\u7b97\u6cd5\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_11","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u53d7\u8fb9\u6743\u5f71\u54cd\uff01 \u6700\u574f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(mf) O(mf) \uff0c m m \u4e3a\u8fb9\u6570\uff0c f f \u4e3a\u6700\u5927\u6d41\u7684\u6d41\u91cf","title":"\u7b97\u6cd5\u7f3a\u9677"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#edmonds-karp","text":"","title":"Edmonds-Karp\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_12","text":"\u5bfb\u627e\u4efb\u610f\u4e00\u6761\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u7684 \u6700\u77ed \u8def\u5f84\uff08\u627e\u6700\u77ed\u8def\u65f6 \u4e0d\u8003\u8651\u8fb9\u6743 \uff0c\u5373\u8fb9\u6743\u5168\u90e8\u4e3a1\uff09\uff0c\u82e5\u627e\u5230\u5219\u8fdb\u884c\u6b65\u9aa42\uff0c\u82e5\u627e\u4e0d\u5230\u5219\u8df3\u5230\u6b65\u9aa46 \u5b9a\u4e49\u74f6\u9888\u5bb9\u91cf\u4e3a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u7684\u6700\u5c0f\u503c \u5c06\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u5bb9\u91cf\u51cf\u53bb\u74f6\u9888\u5bb9\u91cf\uff0c\u66f4\u65b0\u6b8b\u91cf\u7f51\u7edc \u8df3\u5230\u6b65\u9aa41 \u6dfb\u52a0\u4e00\u6761\u53cd\u5411\u8def\u5f84 \u6700\u5927\u6d41=\u6e90\u70b9\u7684\u51fa\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf=\u6c47\u70b9\u7684\u5165\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf","title":"\u7b97\u6cd5\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_13","text":"\u8fb9\u6570\u6700\u591a\u4e3a 2m 2m \uff08\u52a0\u4e0a\u53cd\u5411\u8fb9\uff09 \u56e0\u6b64\u6bcf\u4e00\u8f6e\u5faa\u73af\u4e2d\uff0c\u5bfb\u627e\u6700\u77ed\u8def\u9700\u8981 O(m) O(m) \u6700\u591a\u8fdb\u884c mn mn \u8f6e\u5faa\u73af\uff08\u8bc1\u660e\u8fc7\u7a0b\u8f83\u4e3a\u7e41\u7410\uff0c\u4e0d\u5c55\u5f00\u53d9\u8ff0\uff09 \u56e0\u6b64\u6700\u574f\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(m^2n) O(m^2n) \uff0c\u5176\u4e2d m m \u4e3a\u8fb9\u6570\uff0c n n \u4e3a\u7ed3\u70b9\u6570 \u5b9e\u9645\u4f7f\u7528\u4e2d\u5f80\u5f80\u8fbe\u4e0d\u5230\u6700\u574f\u60c5\u51b5\uff0c\u80fd\u591f\u5904\u7406 10^3-10^4 10^3-10^4 \u89c4\u6a21\u7684\u7f51\u7edc","title":"\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#dinic","text":"","title":"Dinic\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_14","text":"BFS\u5c06\u56fe\u5206\u5c42\u6784\u5efa \u5206\u5c42\u7f51\u7edc \uff0c\u82e5\u6e90\u70b9\u65e0\u6cd5\u5230\u8fbe\u6c47\u70b9\u5219\u8df3\u5230\u6b65\u9aa45 \u5728\u5206\u5c42\u7f51\u7edc\u4e2dDFS\u5bfb\u627e\u963b\u585e\u6d41\u5e76\u66f4\u65b0\u6b8b\u5dee\u7f51\u7edc \u5728\u6b8b\u5dee\u7f51\u7edc\u4e2d\u6dfb\u52a0\u53cd\u5411\u8fb9 \u8df3\u5230\u6b65\u9aa41 \u6700\u5927\u6d41=\u6e90\u70b9\u7684\u51fa\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf=\u6c47\u70b9\u7684\u5165\u8fb9\u7684\u5bb9\u91cf-\u5269\u4f59\u5bb9\u91cf","title":"\u7b97\u6cd5\u63cf\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_15","text":"\u6bcf\u4e00\u8f6e\u5faa\u73af\u4e2d\uff0c\u6784\u5efa\u5206\u5c42\u7f51\u7edc\u5e76\u5bfb\u627e\u963b\u585e\u6d41\u6700\u574f\u9700\u8981 O(mn) O(mn) \u6700\u591a\u8fdb\u884c n-1 n-1 \u8f6e\u5faa\u73af \u56e0\u6b64\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(mn^2) O(mn^2) \uff0c\u5176\u4e2d m m \u4e3a\u8fb9\u6570\uff0c n n \u4e3a\u7ed3\u70b9\u6570 \u5b9e\u9645\u4f7f\u7528\u4e2d\u5f80\u5f80\u8fbe\u4e0d\u5230\u6700\u574f\u60c5\u51b5\uff0c\u80fd\u591f\u5904\u7406 10^4-10^5 10^4-10^5 \u89c4\u6a21\u7684\u7f51\u7edc Dinic\u662f\u6c42\u89e3\u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\u4e2d\u6700\u5e38\u4f7f\u7528\u7684\u7b97\u6cd5","title":"\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_16","text":"namespace Dinic { const int N = 1e5 + 7 , M = 2e6 + 7 ; const ll inf = 1e18 ; int n , S , T , d [ N ]; int h [ N ], hi [ N ], e [ M ], t [ M ], tot ; ll f [ M ], mxf ; inline void add ( int x , int y , ll z , bool o = 1 ) { e [ ++ tot ] = y , f [ tot ] = z , t [ tot ] = h [ x ], h [ x ] = tot ; if ( o ) add ( y , x , 0 , 0 ); } inline bool bfs () { for ( int i = 1 ; i <= n ; i ++ ) d [ i ] = 0 ; queue < int > q ; q . push ( S ), d [ S ] = 1 ; while ( q . size ()) { int x = q . front (); q . pop (); for ( int i = h [ x ]; i ; i = t [ i ]) { int y = e [ i ]; ll z = f [ i ]; if ( d [ y ] || ! z ) continue ; q . push ( y ), d [ y ] = d [ x ] + 1 ; if ( y == T ) return 1 ; } } return 0 ; } ll dfs ( int x , ll now = inf ) { if ( x == T ) return now ; ll rst = now ; for ( int & i = hi [ x ]; i ; i = t [ i ]) { int y = e [ i ]; ll z = f [ i ]; if ( d [ y ] != d [ x ] + 1 || ! z ) continue ; ll k = dfs ( y , min ( z , rst )); if ( ! k ) d [ y ] = 0 ; else f [ i ] -= k , f [ i ^ 1 ] += k , rst -= k ; if ( ! rst ) break ; } return now - rst ; } inline void main () { while ( bfs ()) { for ( int i = 1 ; i <= n ; i ++ ) hi [ i ] = h [ i ]; ll now ; while (( now = dfs ( S ))) mxf += now ; } } inline void init ( int _n , int _S , int _T ) { n = _n , S = _S , T = _T , tot = 1 , mxf = 0 ; for ( int i = 1 ; i <= n ; i ++ ) h [ i ] = 0 ; } }","title":"\u7b97\u6cd5\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_17","text":"\u65f6\u95f4\u590d\u6742\u5ea6 \u80fd\u591f\u5904\u7406\u7684\u6570\u636e\u89c4\u6a21 Ford-Fulkerson O(mf) O(mf) \u4e0e\u7f51\u7edc\u7684\u6700\u5927\u6d41\u91cf\u76f8\u5173 Edmonds-Karp O(nm^2) O(nm^2) 10^3-10^4 10^3-10^4 Dinic O(n^2m) O(n^2m) 10^4-10^5 10^4-10^5","title":"\u6700\u5927\u6d41\u4e09\u79cd\u7b97\u6cd5\u5bf9\u6bd4"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_18","text":"","title":"\u6700\u5927\u6d41\u7684\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_19","text":"\u4e8c\u5206\u56fe\u5339\u914d\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u5206\u56fe\ud835\udc3a\uff0c\u5728\ud835\udc3a\u7684\u4e00\u4e2a\u5b50\u56fe\ud835\udc40\u4e2d\uff0c\ud835\udc40\u7684\u8fb9\u96c6{\ud835\udc38}\u4e2d\u7684\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u4e0d\u76f8\u4ea4\uff0c\u5219\u79f0\ud835\udc40\u662f\u4e00\u4e2a\u5339\u914d","title":"\u4e8c\u5206\u56fe\u5339\u914d"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_20","text":"\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5373\u4f7f\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d \u4e00\u822c\u7684\u7b97\u6cd5\u662f\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5c06\u6e90\u70b9\u8fde\u5411\u5de6\u90e8\u70b9\uff0c\u5c06\u53f3\u90e8\u70b9\u8fde\u5411\u6c47\u70b9\uff0c\u5bb9\u91cf\u5747\u4e3a1\uff0c\u8fd9\u6837\u8fd9\u4e2a\u7f51\u7edc\u7684\u6700\u5927\u6d41\u5c31\u7b49\u4e8e\u539f\u59cb\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u6570 \u4f8b\u9898 \u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\u95ee\u9898 \u9898\u76ee\u80cc\u666f \u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u671f\u95f4\uff0c\u82f1\u56fd\u7687\u5bb6\u7a7a\u519b\u4ece\u6ca6\u9677\u56fd\u5f81\u52df\u4e86\u5927\u91cf\u5916\u7c4d\u98de\u884c\u5458\u3002\u7531\u7687\u5bb6\u7a7a\u519b\u6d3e\u51fa\u7684\u6bcf\u4e00\u67b6\u98de\u673a\u90fd\u9700\u8981\u914d\u5907\u5728\u822a\u884c\u6280\u80fd\u548c\u8bed\u8a00\u4e0a\u80fd\u4e92\u76f8\u914d\u5408\u7684\u4e24\u540d\u98de\u884c\u5458\uff0c\u5176\u4e2d\u4e00\u540d\u662f\u82f1\u56fd\u98de\u884c\u5458\uff0c\u53e6\u4e00\u540d\u662f\u5916\u7c4d\u98de\u884c\u5458\u3002\u5728\u4f17\u591a\u7684\u98de\u884c\u5458\u4e2d\uff0c\u6bcf\u4e00\u540d\u5916\u7c4d\u98de\u884c\u5458\u90fd\u53ef\u4ee5\u4e0e\u5176\u4ed6\u82e5\u5e72\u540d\u82f1\u56fd\u98de\u884c\u5458\u5f88\u597d\u5730\u914d\u5408\u3002 \u9898\u76ee\u63cf\u8ff0 \u4e00\u5171\u6709 n n \u4e2a\u98de\u884c\u5458\uff0c\u5176\u4e2d\u6709 m m \u4e2a\u5916\u7c4d\u98de\u884c\u5458\u548c (n - m) (n - m) \u4e2a\u82f1\u56fd\u98de\u884c\u5458\uff0c \u5916\u7c4d\u98de\u884c\u5458\u4ece 1 1 \u5230 m m \u7f16\u53f7 \uff0c \u82f1\u56fd\u98de\u884c\u5458\u4ece m + 1 m + 1 \u5230 n n \u7f16\u53f7 \u3002 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5916\u7c4d\u98de\u884c\u5458\u4e0e\u82f1\u56fd\u98de\u884c\u5458\u7684\u914d\u5408\u60c5\u51b5\uff0c\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u627e\u51fa\u6700\u4f73\u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\uff0c\u4f7f\u7687\u5bb6\u7a7a\u519b\u4e00\u6b21\u80fd\u6d3e\u51fa\u6700\u591a\u7684\u98de\u673a\u3002 \u4fdd\u8bc1 1 \\leq m \\leq n < 100 1 \\leq m \\leq n < 100 \uff0c 1 \\leq u \\leq m < v \\leq n 1 \\leq u \\leq m < v \\leq n \uff0c\u540c\u4e00\u7ec4\u914d\u5bf9\u5173\u7cfb\u53ea\u4f1a\u7ed9\u51fa\u4e00\u6b21\u3002 \u89e3\u9898\u601d\u8def \u82f1\u56fd\u98de\u884c\u5458\u89c6\u4e3a\u5de6\u90e8\u8282\u70b9\uff0c\u5916\u56fd\u98de\u884c\u5458\u89c6\u4e3a\u53f3\u90e8\u8282\u70b9\uff0c\u6240\u6709\u8fb9\u7684\u5bb9\u91cf\u5747\u4e3a1\uff0c\u76f4\u63a5\u8dd1\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u5373\u53ef \u65f6\u95f4\u590d\u6742\u5ea6\u5bf9\u6bd4 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d \u65f6\u95f4\u590d\u6742\u5ea6 \u5308\u7259\u5229\u7b97\u6cd5 O(nm) O(nm) Dinic O(\\sqrt{n}m) O(\\sqrt{n}m) \u53ef\u4ee5\u53d1\u73b0Dinic\u7b97\u6cd5\u5728\u6c42\u89e3\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u65f6\u6bd4\u5308\u7259\u5229\u7b97\u6cd5\u66f4\u52a0\u9ad8\u6548\uff08\u5177\u4f53\u8bc1\u660e\u7565\uff09","title":"\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_21","text":"\u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\u5373\u6bcf\u4e2a\u8282\u70b9\u4e0d\u4e00\u5b9a\u53ea\u4e0e\u4e00\u6761\u8fb9\u76f8\u8fde\uff0c\u800c\u662f\u9650\u5236\u4e86\u6700\u591a\u8fde\u7684\u8fb9\u6570\uff08\u5f53\u9650\u5236\u4e3a1\u65f6\u9000\u5316\u4e3a\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff09 \u666e\u901a\u7684\u5308\u7259\u5229\u7b97\u6cd5\u96be\u4ee5\u89e3\u51b3\u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\u95ee\u9898 \u4e0e\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7c7b\u4f3c\uff0c\u53ea\u9700\u5c06\u6e90\u70b9\u6307\u5411\u5de6\u90e8\u70b9\uff0c\u53f3\u90e8\u70b9\u6307\u5411\u6c47\u70b9\u7684\u5bb9\u91cf\u53d8\u6210\u7ed3\u70b9\u5141\u8bb8\u8fde\u7684\u6700\u5927\u8fb9\u6570\u5373\u53ef \u4f8b\u9898 \u5706\u684c\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u6709\u6765\u81ea m m \u4e2a\u4e0d\u540c\u5355\u4f4d\u7684\u4ee3\u8868\u53c2\u52a0\u4e00\u6b21\u56fd\u9645\u4f1a\u8bae\u3002\u7b2c i i \u4e2a\u5355\u4f4d\u6d3e\u51fa\u4e86 r_i r_i \u4e2a\u4ee3\u8868\u3002 \u4f1a\u8bae\u7684\u9910\u5385\u5171\u6709 n n \u5f20\u9910\u684c\uff0c\u7b2c i i \u5f20\u9910\u684c\u53ef\u5bb9\u7eb3 c_i c_i \u4e2a\u4ee3\u8868\u5c31\u9910\u3002 \u4e3a\u4e86\u4f7f\u4ee3\u8868\u4eec\u5145\u5206\u4ea4\u6d41\uff0c\u5e0c\u671b\u4ece\u540c\u4e00\u4e2a\u5355\u4f4d\u6765\u7684\u4ee3\u8868\u4e0d\u5728\u540c\u4e00\u4e2a\u9910\u684c\u5c31\u9910\u3002\u8bf7\u7ed9\u51fa\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u4ee3\u8868\u5c31\u9910\u65b9\u6848\u3002 \u4fdd\u8bc1 1 \\leq m \\leq 150 1 \\leq m \\leq 150 \uff0c 1 \\leq n \\leq 270 1 \\leq n \\leq 270 \uff0c 1 \\leq r_i, c_i \\leq 10^3 1 \\leq r_i, c_i \\leq 10^3 \u3002 \u89e3\u9898\u601d\u8def \u5355\u4f4d\u662f\u5de6\u90e8\uff0c\u684c\u5b50\u662f\u53f3\u90e8\uff0c\u6e90\u70b9\u5411\u5355\u4f4d\u8fde\u5bb9\u91cf\u4e3a\u5355\u4f4d\u6570\u91cf\u7684\u8fb9\uff0c\u684c\u5b50\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a\u684c\u5b50\u6570\u91cf\u7684\u8fb9\uff0c\u5355\u4f4d\u548c\u684c\u5b50\u5185\u90e8\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u7136\u540e\u8dd1\u6700\u5927\u6d41\u5373\u53ef \u4f8b\u9898 \u8bd5\u9898\u5e93\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u4e00\u4e2a\u8bd5\u9898\u5e93\u4e2d\u6709 n n \u9053\u8bd5\u9898\u3002\u6bcf\u9053\u8bd5\u9898\u90fd\u6807\u660e\u4e86\u6240\u5c5e\u7c7b\u522b\u3002\u540c\u4e00\u9053\u9898\u53ef\u80fd\u6709\u591a\u4e2a\u7c7b\u522b\u5c5e\u6027\u3002\u73b0\u8981\u4ece\u9898\u5e93\u4e2d\u62bd\u53d6 m m \u9053\u9898\u7ec4\u6210\u8bd5\u5377\u3002\u5e76\u8981\u6c42\u8bd5\u5377\u5305\u542b\u6307\u5b9a\u7c7b\u578b\u7684\u8bd5\u9898\u3002\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u7ec4\u5377\u7b97\u6cd5\u3002 \u4fdd\u8bc1 2\\leq k \\leq 20 2\\leq k \\leq 20 \uff0c k \\leq n \\leq 10^3 k \\leq n \\leq 10^3 \u3002 \u89e3\u9898\u601d\u8def \u8bd5\u9898\u662f\u5de6\u90e8\uff0c\u7c7b\u578b\u662f\u53f3\u90e8\uff0c\u6e90\u70b9\u5411\u5de6\u90e8\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u53f3\u90e8\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a\u53f3\u90e8\u70b9\u6743\u91cd\u7684\u8fb9\uff0c\u5de6\u90e8\u548c\u53f3\u90e8\u7684\u5185\u90e8\u8fde\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u7136\u540e\u8dd1\u6700\u5927\u6d41\u5373\u53ef","title":"\u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_22","text":"\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff1a\u5728\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u4e2d\uff0c\u627e\u51fa\u6700\u5c11\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u8def\u5f84\u7ecf\u8fc7\u4e86\u6240\u6709\u7684\u70b9","title":"\u6700\u5c0f\u8def\u5f84\u8986\u76d6"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_23","text":"\u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\uff1a\u8def\u5f84\u4e0d\u80fd\u76f8\u4ea4 \u5982\u4f55\u5c06\u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\u95ee\u9898\u8f6c\u5316\u4e3a\u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\uff1f \u4f8b\u9898 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u6709\u5411\u56fe G=(V,E) G=(V,E) \u3002\u8bbe P P \u662f G G \u7684\u4e00\u4e2a\u7b80\u5355\u8def\uff08\u9876\u70b9\u4e0d\u76f8\u4ea4\uff09\u7684\u96c6\u5408\u3002\u5982\u679c V V \u4e2d\u6bcf\u4e2a\u5b9a\u70b9\u6070\u597d\u5728 P P \u7684\u4e00\u6761\u8def\u4e0a\uff0c\u5219\u79f0 P P \u662f G G \u7684\u4e00\u4e2a\u8def\u5f84\u8986\u76d6\u3002 P P \u4e2d\u8def\u5f84\u53ef\u4ee5\u4ece V V \u7684\u4efb\u4f55\u4e00\u4e2a\u5b9a\u70b9\u5f00\u59cb\uff0c\u957f\u5ea6\u4e5f\u662f\u4efb\u610f\u7684\uff0c\u7279\u522b\u5730\uff0c\u53ef\u4ee5\u4e3a 0 0 \u3002 G G \u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u662f G G \u6240\u542b\u8def\u5f84\u6761\u6570\u6700\u5c11\u7684\u8def\u5f84\u8986\u76d6\u3002\u8bbe\u8ba1\u4e00\u4e2a\u6709\u6548\u7b97\u6cd5\u6c42\u4e00\u4e2a DAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff09 G G \u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u3002 \u4fdd\u8bc1 1\\leq n\\leq 150 1\\leq n\\leq 150 \uff0c 1\\leq m\\leq 6000 1\\leq m\\leq 6000 \u3002 \u89e3\u9898\u601d\u8def \u628a\u539f\u56fe\u7684\u6bcf\u4e2a\u70b9 u u \u62c6\u6210\u4e24\u4e2a\u70b9 u_1 u_1 \u548c u_2 u_2 \uff0c\u5982\u679c\u6709\u4e00\u6761\u6709\u5411\u8fb9 (a,b) (a,b) \uff0c\u5219\u8fde\u8fb9 (a_2,b_1) (a_2,b_1) \uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u4f7f\u7528 \u6700\u5c0f\u8def\u5f84\u8986\u76d6=\u539f\u56fe\u8282\u70b9\u6570-\u65b0\u56fe\u6700\u5927\u5339\u914d\u6570 \u8fd9\u4e00\u5b9a\u7406\u5373\u53ef\u6c42\u51fa\u7b54\u6848 \u5b9a\u7406\u8bc1\u660e \u521d\u59cb\u65f6\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u6761\u8def\u5f84\uff0c\u6bcf\u6b21\u627e\u4e00\u6761\u5339\u914d\u8fb9\uff0c\u4ee3\u8868\u5408\u5e76\u4e24\u6761\u8def\u5f84 \u7531\u4e8e\u8def\u5f84\u4e0d\u76f8\u4ea4\uff08\u5373\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a1\uff09\uff0c\u6240\u4ee5\u4e8c\u5206\u56fe\u4e0a\u7684\u8fb9\u4e5f\u4e0d\u76f8\u4ea4\uff08\u5982\u679c\u76f8\u4ea4\u5219\u8bf4\u660e\u67d0\u4e2a\u70b9\u7684\u5165\u5ea6\u6216\u51fa\u5ea6\u5927\u4e8e1\uff09\uff0c\u8fd9\u6b63\u597d\u662f\u5339\u914d\u7684\u5b9a\u4e49 \u6bcf\u6761\u5339\u914d\u8fb9\u4ee3\u8868\u7b54\u6848-1\uff0c\u6240\u4ee5\u6700\u5c0f\u8def\u5f84\u8986\u76d6=\u539f\u56fe\u8282\u70b9\u6570-\u65b0\u56fe\u6700\u5927\u5339\u914d\u6570","title":"\u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_24","text":"\u6700\u5c0f\u53ef\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\uff1a\u8def\u5f84\u53ef\u4ee5\u76f8\u4ea4 \u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u539f\u56fe\u4f20\u9012\u95ed\u5305\uff0c\u5373\u82e5\u539f\u56fe\u4e2d (u,v) (u,v) \u8fde\u901a\uff0c\u5219\u589e\u52a0\u8fb9 (u,v) (u,v) \u3002\u8fd9\u53ef\u4ee5\u7528Floyd\u7b97\u6cd5 O(n^3) O(n^3) \u5b9e\u73b0\u3002\u7136\u540e\u5bf9\u65b0\u56fe\u505a\u6700\u5c0f\u4e0d\u76f8\u4ea4\u8def\u5f84\u8986\u76d6\u5373\u53ef\u3002\u56e0\u4e3a\u5728\u539f\u56fe\u4e2d\u76f8\u4ea4\u7684\u8def\u5f84\u5728\u4f20\u9012\u95ed\u5305\u540e\u53ef\u4ee5\u62c6\u5206\u6210\u53e6\u4e00\u6761\u8fb9\uff0c\u8fd9\u6837\u5c31\u4e0d\u76f8\u4ea4\u4e86\u3002 \u4f8b\u9898 \u9b54\u672f\u7403\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u6709 n\\ (1 \\leq n \\leq 55) n\\ (1 \\leq n \\leq 55) \u6839\u67f1\u5b50\uff0c\u73b0\u8981\u6309\u4e0b\u8ff0\u89c4\u5219\u5728\u8fd9 n n \u6839\u67f1\u5b50\u4e2d\u4f9d\u6b21\u653e\u5165\u7f16\u53f7\u4e3a 1 1 \uff0c 2 2 \uff0c 3 3 \uff0c\u2026\u7684\u7403 1. \u6bcf\u6b21\u53ea\u80fd\u5728\u67d0\u6839\u67f1\u5b50\u7684\u6700\u4e0a\u9762\u653e\u7403\u3002 2. \u540c\u4e00\u6839\u67f1\u5b50\u4e2d\uff0c\u4efb\u4f55 2 2 \u4e2a\u76f8\u90bb\u7403\u7684\u7f16\u53f7\u4e4b\u548c\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\u3002 \u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u8ba1\u7b97\u51fa\u5728 n n \u6839\u67f1\u5b50\u4e0a\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a\u7403 \u89e3\u9898\u601d\u8def \u628a\u4e00\u4e2a\u7403 x x \u62c6\u6210 x_1 x_1 \u548c x_2 x_2 \u6e90\u70b9\u8fde x_1 x_1 \uff0c x_2 x_2 \u8fde\u6c47\u70b9\uff0c\u5bb9\u91cf\u5747\u4e3a1 \u627e\u5230\u80fd\u4e0e x x \u7ec4\u6210\u5b8c\u5168\u5e73\u65b9\u6570\u7684 y y \uff0c\u5c06 y y \u8fde\u5411 x_1 x_1 \u8dd1\u6700\u5927\u6d41","title":"\u6700\u5c0f\u53ef\u76f8\u4ea4\u8def\u5f84\u8986\u76d6"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_25","text":"\u6700\u591a\u4e0d\u76f8\u4ea4\u8def\u5f84\uff1a\u5df2\u77e5\u4e00\u4e9b\u8def\u5f84\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5c5e\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u6c42\u80fd\u9009\u62e9\u591a\u5c11\u6761\u8def\u5f84\u4f7f\u5b83\u4eec\u4e0d\u76f8\u4ea4 \u5982\u4f55\u5c06\u6700\u591a\u4e0d\u76f8\u4ea4\u8def\u5f84\u95ee\u9898\u8f6c\u5316\u4e3a\u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\uff1f \u901a\u7528\u65b9\u6cd5\uff1a\u62c6\u70b9\uff0c\u5c06\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\uff0c\u7136\u540e\u8fde\u8fb9\uff0c\u5bb9\u91cf\u8868\u793a\u8be5\u70b9\u6700\u591a\u7ecf\u8fc7\u6b21\u6570 \u4f8b\u9898 \u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u95ee\u9898 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u6b63\u6574\u6570\u5e8f\u5217 x_1 \\ldots, x_n\u3002(1 \\le n\\le 500) x_1 \\ldots, x_n\u3002(1 \\le n\\le 500) 1. \u8ba1\u7b97\u5176\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 s s \u3002 2. \u5982\u679c\u6bcf\u4e2a\u5143\u7d20\u53ea\u5141\u8bb8\u4f7f\u7528\u4e00\u6b21\uff0c\u8ba1\u7b97\u4ece\u7ed9\u5b9a\u7684\u5e8f\u5217\u4e2d\u6700\u591a\u53ef\u53d6\u51fa\u591a\u5c11\u4e2a\u957f\u5ea6\u4e3a s s \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u3002 3. \u5982\u679c\u5141\u8bb8\u5728\u53d6\u51fa\u7684\u5e8f\u5217\u4e2d\u591a\u6b21\u4f7f\u7528 x_1 x_1 \u548c x_n x_n \uff08\u5176\u4ed6\u5143\u7d20\u4ecd\u7136\u53ea\u5141\u8bb8\u4f7f\u7528\u4e00\u6b21\uff09\uff0c\u5219\u4ece\u7ed9\u5b9a\u5e8f\u5217\u4e2d\u6700\u591a\u53ef\u53d6\u51fa\u591a\u5c11\u4e2a**\u4e0d\u540c\u7684**\u957f\u5ea6\u4e3a s s \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u3002 \u89e3\u9898\u601d\u8def \u7b2c\u4e00\u95ee\uff1a\u8ba1\u7b97\u5176\u6700\u957f\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 s s DP\u6c42LIS\uff1a dp[i] dp[i] \u8868\u793a\u4ee5 a[i] a[i] \u7ed3\u5c3e\u7684LIS\u957f\u5ea6 \u521d\u59cb dp[i]=1 dp[i]=1 dp[i]=dp[j]+1(j<i,a[j]\\leq a[i]) dp[i]=dp[j]+1(j<i,a[j]\\leq a[i]) \u7b2c\u4e8c\u95ee\uff1a\u5982\u679c\u6bcf\u4e2a\u5143\u7d20\u53ea\u5141\u8bb8\u4f7f\u7528\u4e00\u6b21\uff0c\u8ba1\u7b97\u4ece\u7ed9\u5b9a\u7684\u5e8f\u5217\u4e2d\u6700\u591a\u53ef\u53d6\u51fa\u591a\u5c11\u4e2a\u957f\u5ea6\u4e3a s s \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217 \u82e5 a[j] a[j] \u52a0\u4e0a a[i] a[i] \u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217\uff0c\u5219 j<i,a[j]\\leq a[i] j<i,a[j]\\leq a[i] \u6bcf\u4e2a\u5143\u7d20\u53ea\u80fd\u5728\u4e00\u4e2a\u5e8f\u5217\u4e2d \u6545\u6309\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u5efa\u56fe\uff1a \u6e90\u70b9 S=0,T=2n+1 S=0,T=2n+1 \u5c06\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c i i \u5411 i+n i+n \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1 \u5982\u679c dp[i]=1 dp[i]=1 \uff0c\u5219 s s \u5411 i i \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1\uff0c\u8fd9\u4e9b\u5143\u7d20\u5373\u4e3a\u5b50\u5e8f\u5217\u7684\u5934 \u5982\u679c j<i j<i \uff0c a[j]\\leq a[i] a[j]\\leq a[i] \uff0c\u5219 j+n j+n \u5411 i i \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1 \u5982\u679c dp[i]=k dp[i]=k \uff08LIS\u957f\u5ea6\uff09\uff0c\u5219 i+n i+n \u5411 t t \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a1\uff0c\u5373\u4e3a\u5b50\u5e8f\u5217\u7684\u5c3e \u7b2c\u4e09\u95ee\uff1a\u5982\u679c\u5141\u8bb8\u5728\u53d6\u51fa\u7684\u5e8f\u5217\u4e2d\u591a\u6b21\u4f7f\u7528 x_1 x_1 \u548c x_n x_n \uff08\u5176\u4ed6\u5143\u7d20\u4ecd\u7136\u53ea\u5141\u8bb8\u4f7f\u7528\u4e00\u6b21\uff09\uff0c\u5219\u4ece\u7ed9\u5b9a\u5e8f\u5217\u4e2d\u6700\u591a\u53ef\u53d6\u51fa\u591a\u5c11\u4e2a**\u4e0d\u540c\u7684**\u957f\u5ea6\u4e3a s s \u7684\u4e0d\u4e0b\u964d\u5b50\u5e8f\u5217 \u53bb\u9664 x_1 x_1 \u548c x_n x_n \u7684\u9650\u5236\u5373\u53ef\uff0c\u53ef\u4ee5\u52a0\u5165\u8fb9 (S,1),(1,1+n),(n,2n),(2n,T) (S,1),(1,1+n),(n,2n),(2n,T) \u4e14\u5bb9\u91cf\u4e3a inf inf \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u5e8f\u5217\u4e25\u683c\u9012\u51cf\u65f6\uff0c dp[i]=1,s=1 dp[i]=1,s=1 \uff0c\u4e0d\u5b58\u5728 i,j i,j \u6ee1\u8db3 j<i,a[j]\\leq a[i] j<i,a[j]\\leq a[i] \uff0c\u6b64\u65f6\u7b54\u6848\u5373\u4e3a\u7b2c\u4e8c\u95ee\u7b54\u6848","title":"\u6700\u591a\u4e0d\u76f8\u4ea4\u8def\u5f84"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_26","text":"","title":"\u62d3\u5c55\u65b9\u5411"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_27","text":"\u6700\u5927\u6d41\u8fd8\u6709\u66f4\u52a0\u5feb\u901f\u7684 \u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5 \uff0c\u4f46\u4e00\u822c\u60c5\u51b5\u4e0bDinic\u5c31\u8db3\u591f\u89e3\u51b3\u6700\u5927\u6d41\u95ee\u9898\u4e86 \u6574\u4e2a\u56fe\u8bba\u7684\u96be\u70b9\u5f80\u5f80\u4e0d\u5728\u4e8e\u5404\u79cd\u7b97\u6cd5\uff0c\u800c\u5728\u4e8e \u5efa\u56fe \u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u7f51\u7edc\u6d41\u95ee\u9898\u4e5f\u662f\u5982\u6b64\uff0c\u56e0\u6b64\u5b66\u4e60\u7f51\u7edc\u6d41\u9700\u8981\u8fdb\u884c\u5927\u91cf\u5237\u9898 \u7f51\u7edc\u6d4124\u9898","title":"\u7b97\u6cd5\u4e4b\u5185"},{"location":"%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E6%B5%81%E5%85%A5%E9%97%A8/#_28","text":"\u5168\u6587\u7ed3\u675f\uff0c\u8c22\u8c22\u9605\u8bfb\uff01","title":"\u7b97\u6cd5\u4e4b\u5916"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/","text":"AC\u81ea\u52a8\u673a=\u81ea\u52a8AC\u673a\uff1f \u00b6 \u2014\u2014\u201c\u81ea\u52a8\u673a\u201d\u5165\u95e8 \u00b6 \u8ba1\u7b97\u673a\u5b66\u966221\u7ea7 \u4f55\u4e30\u8fb0 \u00b6 \u914d\u5957\u89c6\u9891 \u81ea\u52a8\u673a\u5165\u95e8 \u5199\u5728\u524d\u9762 \u00b6 \u7b80\u4ecb \u00b6 \u81ea\u52a8\u673a\u662fOI\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u4e2a\u6570\u5b66\u6a21\u578b\uff0c\u5176\u601d\u60f3\u5728\u8bb8\u591a\u5b57\u7b26\u4e32\u7b97\u6cd5\u4e2d\u90fd\u6709\u6d89\u53ca\uff0c\u56e0\u6b64\u5728\u5b66\u4e60\u4e00\u4e9b\u5b57\u7b26\u4e32\u7b97\u6cd5\u524d\u5148\u5b8c\u6210\u81ea\u52a8\u673a\u7684\u5b66\u4e60\u5c06\u6709\u52a9\u4e8e\u7406\u89e3\u4e0a\u8ff0\u7b97\u6cd5\u3002\u672c\u6587\u5c06\u7531\u6d45\u5165\u6df1\u4ecb\u7ecd\u81ea\u52a8\u673a\u7684\u57fa\u7840\u6982\u5ff5\u5e76\u8bb2\u89e3\u4e09\u79cd\u5e38\u7528\u7684\u81ea\u52a8\u673a\uff1aTrie\u3001KMP\u548cAC\u81ea\u52a8\u673a\u3002 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u5b57\u7b26\u96c6 \u00b6 \u4e00\u4e2a \u5b57\u7b26\u96c6 \\sum \\sum \u662f\u4e00\u4e2a\u5efa\u7acb\u4e86\u5168\u5e8f\u5173\u7cfb\u7684\u96c6\u5408\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c \\sum \\sum \u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5143\u7d20 \\alpha \\alpha \u548c \\beta \\beta \u90fd\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\uff0c\u8981\u4e48 \\alpha<\\beta \\alpha<\\beta \uff0c\u8981\u4e48 \\beta<\\alpha \\beta<\\alpha \u3002\u5b57\u7b26\u96c6 \\sum \\sum \u4e2d\u7684\u5143\u7d20\u79f0\u4e3a\u5b57\u7b26\u3002 \u5b57\u7b26\u4e32 \u00b6 \u4e00\u4e2a \u5b57\u7b26\u4e32 S S \u662f\u5c06 n n \u4e2a\u5b57\u7b26\u987a\u6b21\u6392\u5217\u5f62\u6210\u7684\u5e8f\u5217\uff0c n n \u79f0\u4e3a S S \u7684\u957f\u5ea6\uff0c\u8868\u793a\u4e3a |S| |S| \u3002 S S \u7684\u7b2c i i \u4e2a\u5b57\u7b26\u8868\u793a\u4e3a S[i] S[i] \u6216 S[i-1] S[i-1] \u3002 \u5b50\u4e32 \u00b6 \u5b57\u7b26\u4e32 S S \u7684 \u5b50\u4e32 S[i \\cdots j]\uff0ci \\leq j S[i \\cdots j]\uff0ci \\leq j \uff0c\u8868\u793a S S \u4e32\u4e2d\u4ece i i \u5230 j j \u8fd9\u4e00\u6bb5\uff0c\u4e5f\u5c31\u662f\u987a\u6b21\u6392\u5217 S[i],S[i+1],\\cdots,S[j] S[i],S[i+1],\\cdots,S[j] \u5f62\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u6709\u65f6\u4e5f\u4f1a\u7528 S[i \\cdots j]\uff0ci>j S[i \\cdots j]\uff0ci>j \u6765\u8868\u793a\u7a7a\u4e32\u3002 \u5b50\u5e8f\u5217 \u00b6 \u5b57\u7b26\u4e32 S S \u7684 \u5b50\u5e8f\u5217 \u662f\u4ece S S \u4e2d\u5c06\u82e5\u5e72\u5143\u7d20\u63d0\u53d6\u51fa\u6765\u5e76\u4e0d\u6539\u53d8\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u5e8f\u5217\uff0c\u5373 S[p_1],S[p_2],\\cdots,S[p_k]\uff0c1 \\leq p_1<p_2<\\cdots<p_k \\leq |S| S[p_1],S[p_2],\\cdots,S[p_k]\uff0c1 \\leq p_1<p_2<\\cdots<p_k \\leq |S| \u3002 \u540e\u7f00 \u00b6 \u540e\u7f00 \u00b6 \u540e\u7f00 \u662f\u6307\u4ece\u67d0\u4e2a\u4f4d\u7f6e i i \u5f00\u59cb\u5230\u6574\u4e2a\u5b57\u7b26\u4e32\u672b\u5c3e\u7ed3\u675f\u7684\u4e00\u4e2a\u7279\u6b8a\u5b50\u4e32\u3002\u5b57\u7b26\u4e32 S S \u7684\u4ece i i \u5f00\u5934\u7684\u540e\u7f00\u8868\u793a\u4e3a Suffix(S,i) Suffix(S,i) \uff0c\u4e5f\u5c31\u662f Suffix(S,i)=S[i \\cdots |S|-1] Suffix(S,i)=S[i \\cdots |S|-1] \u3002 \u771f\u540e\u7f00 \u00b6 \u771f\u540e\u7f00 \u6307\u9664\u4e86 S S \u672c\u8eab\u7684 S S \u7684\u540e\u7f00\u3002 \u524d\u7f00 \u00b6 \u524d\u7f00 \u00b6 \u524d\u7f00 \u662f\u6307\u4ece\u5b57\u7b26\u4e32\u9996\u5f00\u59cb\u5230\u67d0\u4e2a\u4f4d\u7f6e i i \u7ed3\u675f\u7684\u4e00\u4e2a\u7279\u6b8a\u5b50\u4e32\u3002\u5b57\u7b26\u4e32 S S \u7684\u4ee5 i i \u7ed3\u5c3e\u7684\u524d\u7f00\u8868\u793a\u4e3a Prefix(S,i) Prefix(S,i) \uff0c\u4e5f\u5c31\u662f Prefix(S,i)=S[0 \\cdots i] Prefix(S,i)=S[0 \\cdots i] \u3002 \u771f\u524d\u7f00 \u00b6 \u771f\u524d\u7f00 \u6307\u9664\u4e86 S S \u672c\u8eab\u7684 S S \u7684\u524d\u7f00\u3002 \u5b57\u5178\u5e8f \u00b6 \u5b57\u5178\u5e8f \u6307\u4ee5\u7b2c i i \u4e2a\u5b57\u7b26\u4f5c\u4e3a\u7b2c i i \u5173\u952e\u5b57\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\uff0c\u7a7a\u5b57\u7b26\u5c0f\u4e8e\u5b57\u7b26\u96c6\u5185\u4efb\u4f55\u5b57\u7b26\uff08\u5373\uff1a a<aa a<aa \uff09\u3002 \u56de\u6587\u4e32 \u00b6 \u56de\u6587\u4e32 \u662f\u6b63\u8005\u548c\u5012\u7740\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u6ee1\u8db3 \\forall 1 \\leq i \\leq |s|\uff0cs[i]=s[|s|+1-i] \\forall 1 \\leq i \\leq |s|\uff0cs[i]=s[|s|+1-i] \u7684 s s \u3002 \u4ec0\u4e48\u662f\u81ea\u52a8\u673a \u00b6 \u81ea\u52a8\u673a\u7684\u6982\u5ff5 \u00b6 \u81ea\u52a8\u673a\u662f\u4e00\u4e2a\u5bf9 \u4fe1\u53f7\u5e8f\u5217 \u8fdb\u884c \u5224\u5b9a \u7684\u6570\u5b66\u6a21\u578b\u3002 \u201c\u4fe1\u53f7\u5e8f\u5217\u201d\u6307\u4e00\u8fde\u4e32\u6709\u987a\u5e8f\u7684\u4fe1\u53f7\uff0c\u4f8b\u5982\u5b57\u7b26\u4e32\u4ece\u524d\u5230\u540e\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u3001\u6570\u7ec4\u4ece1\u5230n\u7684\u6bcf\u4e00\u4e2a\u6570\u3001\u6570\u4ece\u9ad8\u5230\u4f4e\u7684\u6bcf\u4e00\u4f4d\u7b49 \u201c\u5224\u5b9a\u201d\u6307\u9488\u5bf9\u67d0\u4e00\u547d\u9898\u7ed9\u51fa\u6216\u771f\u6216\u5047\u7684\u56de\u7b54 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u81ea\u52a8\u673a\u65e2\u4e0d\u662f\u7b97\u6cd5\uff0c\u4e5f\u4e0d\u662f\u6570\u636e\u7ed3\u6784\u3002\u56e0\u6b64\uff0c\u5b9e\u73b0\u540c\u4e00\u4e2a\u81ea\u52a8\u673a\u7684\u65b9\u6cd5\u53ef\u80fd\u6709\u5f88\u591a\u79cd\u3002 \u81ea\u52a8\u673a\u7684\u5206\u7c7b \u00b6 DFA(Deterministic Finite Automaton, \u786e\u5b9a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a) NFA(Nondeterministic Finite Automata, \u975e\u786e\u5b9a\u81ea\u52a8\u673a) \u5728OI\u4e2d\u6240\u8bf4\u7684\u201c\u81ea\u52a8\u673a\u201d\u4e00\u822c\u90fd\u6307DFA\uff0c\u5373\u201c\u786e\u5b9a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u201d\u3002 \u81ea\u52a8\u673a\u7684\u5e94\u7528\u6848\u4f8b \u00b6 \u5224\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570 \u5224\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u56de\u6587 \u5224\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u67d0\u4e2a\u7279\u5b9a\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\u7b49\u7b49 \u56e0\u6b64\uff0c\u81ea\u52a8\u673a\u5e38\u7528\u4e8e\u89e3\u51b3\u4e0e\u5b57\u7b26\u4e32\u76f8\u5173\u7684\u95ee\u9898\uff1a \u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898 \u5b50\u4e32\u76f8\u5173\u95ee\u9898 \u524d\u7f00/\u540e\u7f00\u76f8\u5173\u95ee\u9898 \u56de\u6587\u4e32\u76f8\u5173\u95ee\u9898 \u5b50\u5e8f\u5217\u76f8\u5173\u95ee\u9898 \u5e38\u7528\u81ea\u52a8\u673a \u00b6 Trie \u00b6 \u4ec0\u4e48\u662fTrie \u00b6 Trie\u53c8\u540d\u5b57\u5178\u6811\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u4e00\u4e2a\u50cf\u5b57\u5178\u4e00\u6837\u7684\u6811\u3002 Trie\u7684\u4f5c\u7528 \u00b6 Trie\u662f\u4e00\u79cd\u80fd\u591f\u9ad8\u6548\u5730\u5b58\u50a8\u548c\u67e5\u627e\u5b57\u7b26\u4e32\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\u3002 Trie\u7684\u7406\u8bba\u5b9e\u73b0 \u00b6 Trie\u7684\u7ed3\u6784\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u7528 \\delta(u,c) \\delta(u,c) \u8868\u793a\u7ed3\u70b9 u u \u7684 c c \u5b57\u7b26\u6307\u5411\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6216\u8005\u8bf4\u662f\u7ed3\u70b9 u u \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 c c \u5f62\u6210\u7684\u5b57\u7b26\u4e32\u7684\u7ed3\u70b9\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a c c \u7684\u53d6\u503c\u8303\u56f4\u548c\u5b57\u7b26\u96c6\u5927\u5c0f\u76f8\u5173\uff0c\u4e0d\u4e00\u5b9a\u662f 0\\sim26 0\\sim26 \u3002 \u6709\u65f6\u9700\u8981\u6807\u8bb0\u63d2\u5165\u8fdbTrie\u7684\u662f\u54ea\u4e9b\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u63d2\u5165\u5b8c\u6210\u65f6\u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6240\u4ee3\u8868\u7684\u7ed3\u70b9\u5904\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\u3002 Trie\u7684\u4ee3\u7801\u5b9e\u73b0 \u00b6 \u7ed3\u6784\u4f53\u5c01\u88c5\u7684Trie\u6a21\u677f\uff1a struct trie { int son [ 100010 ][ 256 ], cnt [ 100010 ] = { 0 }, idx ; void insert ( char str []) { // \u63d2\u5165\u5b57\u7b26\u4e32 int p = 0 ; // \u4ece\u6839\u8282\u70b9\u5f00\u59cb for ( int i = 0 ; str [ i ]; i ++ ){ // \u904d\u5386\u5b57\u7b26\u4e32 int u = str [ i ]; // \u5f53\u524d\u5b57\u7b26\u7684ASCII\u7801\u503c if ( ! son [ p ][ u ]) son [ p ][ u ] =++ idx ; // \u5982\u679c\u7ed3\u70b9\u4e0d\u5b58\u5728\u5c31\u521b\u5efa p = son [ p ][ u ]; // \u8fdb\u5165\u4e0b\u4e00\u4e2a\u7ed3\u70b9 } cnt [ p ] ++ ; } bool find ( char str []){ // \u67e5\u627e\u5b57\u7b26\u4e32 int p = 0 ; for ( int i = 0 ; str [ i ]; i ++ ){ int u = str [ i ]; if ( ! son [ p ][ u ]) return 0 ; p = son [ p ][ u ]; } return cnt [ p ]; } }; KMP\u7b97\u6cd5 \u00b6 \u4ec0\u4e48\u662fKMP\u7b97\u6cd5 \u00b6 KMP\u662f\u7531Knuth\u3001Pratt\u548cMorris\u57281977\u5e74\u5171\u540c\u53d1\u5e03\u7684\u4e00\u4e2a\u7b97\u6cd5\u3002 KMP\u7b97\u6cd5\u7684\u4f5c\u7528 \u00b6 KMP\u7b97\u6cd5\u80fd\u591f\u9ad8\u6548\u5730\u8fdb\u884c\u5355\u6a21\u5f0f\u5339\u914d\uff08\u5373\u5728\u6587\u672c\u4e32 S S \u4e2d\u67e5\u627e\u6a21\u5f0f\u4e32 P P \uff09\u3002 \u5355\u6a21\u5f0f\u5339\u914d\u7684\u6734\u7d20\u505a\u6cd5 \u00b6 \u5bf9\u4e8e\u5728\u6587\u672c\u4e32 s s \u4e2d\u67e5\u627e\u6a21\u5f0f\u4e32 p p \u4f4d\u7f6e\u7684\u95ee\u9898\uff08\u5373\u5355\u6a21\u5f0f\u5339\u914d\uff09\uff0c\u6211\u4eec\u6700\u5148\u60f3\u5230\u7684\u662f\u901a\u8fc7\u53cc\u91cd\u5faa\u73af\u5b9e\u73b0\uff0c\u5916\u5c42\u5faa\u73af\u904d\u5386 s s \u7684\u6bcf\u4e00\u4e2a\u4e0b\u6807\uff0c\u5185\u5c42\u5faa\u73af\u904d\u5386 p p \u7684\u6bcf\u4e00\u4e2a\u4e0b\u6807\uff0c\u4f9d\u6b21\u8fdb\u884c\u6bd4\u8f83\u5373\u53ef\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a // find p[] in s[] for ( int i = 1 ; s [ i ]; i ++ ){ bool flag = true ; for ( int j = 1 ; p [ j ]; j ++ ){ if ( s [ i + j -1 ] != p [ j ]){ flag = false ; break ; } } } \u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \uff0c\u5f53\u6570\u636e\u8303\u56f4\u7a0d\u5927\u65f6\u5c31\u4f1a\u8d85\u65f6\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4f18\u5316\u5462\uff1f\u901a\u8fc7KMP\u7b97\u6cd5\u53ef\u4ee5\u5927\u5927\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5728\u4ecb\u7ecdKMP\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u4e86\u89e3 \u524d\u7f00\u51fd\u6570 \u7684\u77e5\u8bc6\u3002 \u4ec0\u4e48\u662f\u524d\u7f00\u51fd\u6570 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5176 \u524d\u7f00\u51fd\u6570 \u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4 \\pi \\pi \u3002\u5176\u4e2d \\pi[i] \\pi[i] \u7684\u5b9a\u4e49\u662f\uff1a \u5982\u679c\u5b50\u4e32 s[0 \\cdots i] s[0 \\cdots i] \u6709\u4e00\u5bf9\u76f8\u7b49\u7684\u771f\u524d\u7f00\u4e0e\u771f\u540e\u7f00\uff1a s[0 \\cdots k-1] s[0 \\cdots k-1] \u548c s[i-(k-1) \\cdots i] s[i-(k-1) \\cdots i] \uff0c\u90a3\u4e48 \\pi[i] \\pi[i] \u5c31\u662f\u8fd9\u4e2a\u76f8\u7b49\u7684\u771f\u524d\u7f00\uff08\u6216\u771f\u540e\u7f00\uff09\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f \\pi[i]=k \\pi[i]=k \uff1b \u5982\u679c\u4e0d\u6b62\u6709\u4e00\u5bf9\u76f8\u7b49\u7684\uff0c\u90a3\u4e48 \\pi[i] \\pi[i] \u5c31\u662f\u5176\u4e2d\u6700\u957f\u7684\u90a3\u4e00\u5bf9\u7684\u957f\u5ea6\uff1b \u5982\u679c\u6ca1\u6709\u76f8\u7b49\u7684\uff0c\u90a3\u4e48 \\pi[i]=0 \\pi[i]=0 \u3002 \u7b80\u5355\u6765\u8bf4 \\pi[i] \\pi[i] \u5c31\u662f\uff0c\u5b50\u4e32 s[0 \\cdots i] s[0 \\cdots i] \u6700\u957f\u76f8\u7b49\u7684\u771f\u524d\u7f00\u4e0e\u771f\u540e\u7f00\u7684\u957f\u5ea6\u3002 \u7528\u6570\u5b66\u8bed\u8a00\u63cf\u8ff0\u5982\u4e0b\uff1a \\pi[i]=\\max_{k=0 \\cdots i}\\{k:s[0 \\cdots k-1]=s[i-(k-1) \\cdots i]\\} \\pi[i]=\\max_{k=0 \\cdots i}\\{k:s[0 \\cdots k-1]=s[i-(k-1) \\cdots i]\\} \u7279\u522b\u7684\uff0c \\pi[0]=0 \\pi[0]=0 \u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32 cococola \uff0c \\pi[0]=0 \\pi[0]=0 \uff0c\u56e0\u4e3a c \u6ca1\u6709\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\uff0c\u6839\u636e\u89c4\u5b9a\u4e3a0 \\pi[1]=0 \\pi[1]=0 \uff0c\u56e0\u4e3a co \u6ca1\u6709\u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00 \\pi[2]=1 \\pi[2]=1 \uff0c\u56e0\u4e3a coc \u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u53ea\u6709 c \uff0c\u957f\u5ea6\u4e3a1 \\pi[3]=2 \\pi[3]=2 \uff0c\u56e0\u4e3a coco \u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u53ea\u6709 co \uff0c\u957f\u5ea6\u4e3a2 \\pi[4]=3 \\pi[4]=3 \uff0c\u56e0\u4e3a cococ \u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u6709 c \u548c coc \uff0c\u6700\u957f\u7684\u957f\u5ea6\u4e3a3 \\pi[5]=4 \\pi[5]=4 \uff0c\u56e0\u4e3a cococo \u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u6709 co \u548c coco \uff0c\u6700\u957f\u7684\u957f\u5ea6\u4e3a4 \\pi[6]=0 \\pi[6]=0 \uff0c\u56e0\u4e3a cococol \u6ca1\u6709\u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00 \\pi[7]=0 \\pi[7]=0 \uff0c\u56e0\u4e3a cococola \u6ca1\u6709\u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00 \u5373\u5b57\u7b26\u4e32 cococola \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0,0,1,2,3,4,0,0] [0,0,1,2,3,4,0,0] \u3002 \u540c\u7406\u53ef\u4ee5\u8ba1\u7b97\u5b57\u7b26\u4e32: abcabcd \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0,0,0,1,2,3,0] [0,0,0,1,2,3,0] \u3002 aabaaab \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0,1,0,1,2,2,3] [0,1,0,1,2,2,3] \u3002 \u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u7684\u6734\u7d20\u7b97\u6cd5 \u00b6 \u4e00\u4e2a\u76f4\u63a5\u6309\u7167\u5b9a\u4e49\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u7684\u7b97\u6cd5\uff1a \u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u4ee5 i=1\\to n-1 i=1\\to n-1 \u7684\u987a\u5e8f\u8ba1\u7b97\u524d\u7f00\u51fd\u6570 \\pi[i] \\pi[i] \u7684\u503c\u3002 \u4ee4\u53d8\u91cf j j \u4ece\u6700\u5927\u7684\u771f\u524d\u7f00\u957f\u5ea6 i i \u5f00\u59cb\u5c1d\u8bd5\u3002 \u5982\u679c\u5f53\u524d\u957f\u5ea6\u4e0b\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u76f8\u7b49\uff0c\u5219\u6b64\u65f6\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \uff0c\u5426\u5219\u4ee4 j j \u81ea\u51cf1\uff0c\u7ee7\u7eed\u5339\u914d\uff0c\u76f4\u5230 j=0 j=0 \u3002 \u5982\u679c j=0 j=0 \u5e76\u4e14\u6ca1\u6709\u4efb\u4f55\u4e00\u6b21\u5339\u914d\uff0c\u5219\u4ee4 \\pi[i]=0 \\pi[i]=0 \u5e76\u79fb\u81f3 i+1 i+1 \u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a vector < int > prefix_function ( string s ){ int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 ; i < n ; i ++ ) for ( int j = i ; j >= 0 ; j -- ) if ( s . substr ( 0 , j ) == s . substr ( i - j + 1 , j )){ pi [ i ] = j ; break ; } return pi ; } \u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3) O(n^3) \uff0c\u5177\u6709\u5f88\u5927\u7684\u4f18\u5316\u7a7a\u95f4\u3002 \u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u7684\u9ad8\u6548\u7b97\u6cd5 \u00b6 \u7b2c\u4e00\u4e2a\u4f18\u5316 \u6211\u4eec\u89c2\u5bdf\u5230\u76f8\u90bb\u7684\u524d\u7f00\u51fd\u6570\u503c\u81f3\u591a\u589e\u52a01\u3002 \u56e0\u6b64\u53ea\u9700\u5982\u6b64\u8003\u8651\uff1a\u5f53\u53d6\u4e00\u4e2a\u5c3d\u53ef\u80fd\u5927\u7684 \\pi[i+1] \\pi[i+1] \u65f6\uff0c\u5fc5\u7136\u8981\u6c42\u65b0\u589e\u7684 s[i+1] s[i+1] \u4e5f\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5b57\u7b26\u5339\u914d\uff0c\u5373 s[i+1]=s[\\pi[i]] s[i+1]=s[\\pi[i]] \uff0c\u6b64\u65f6 \\pi[i+1]=\\pi[i]+1 \\pi[i+1]=\\pi[i]+1 \u3002 \\underbrace{\\overbrace{s_0 ~ s_1 ~ s_2}^{\\pi[i]=3} ~ s_3}_{\\pi[i+1]=4} ~ \\dots ~ \\underbrace{\\overbrace{s_{i-2} ~ s_{i-1} ~ s_i}^{\\pi[i]=3} ~ s_{i+1}}_{\\pi[i+1]=4} \\underbrace{\\overbrace{s_0 ~ s_1 ~ s_2}^{\\pi[i]=3} ~ s_3}_{\\pi[i+1]=4} ~ \\dots ~ \\underbrace{\\overbrace{s_{i-2} ~ s_{i-1} ~ s_i}^{\\pi[i]=3} ~ s_{i+1}}_{\\pi[i+1]=4} \u6240\u4ee5\u5f53\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4e0b\u6807\u65f6\uff0c\u524d\u7f00\u51fd\u6570\u503c\u8981\u4e48\u589e\u52a01\uff0c\u8981\u4e48\u4e0d\u53d8\uff0c\u8981\u4e48\u51cf\u5c11\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a vector < int > prefix_function ( string s ){ int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 ; i < n ; i ++ ) for ( int j = pi [ i -1 ] + 1 ; j >= 0 ; j -- ) if ( s . substr ( 0 , j ) == s . substr ( i - j + 1 , j )){ pi [ i ] = j ; break ; } return pi ; } \u5728\u7ecf\u8fc7\u7b2c\u4e00\u6b21\u4f18\u5316\u7684\u7b97\u6cd5\u4e2d\uff0c\u8ba1\u7b97\u6bcf\u4e2a \\pi[i] \\pi[i] \u65f6\uff0c\u6700\u4f18\u60c5\u51b5\u662f\u7b2c\u4e00\u6b21\u5b57\u7b26\u4e32\u6bd4\u8f83\u5c31\u5b8c\u6210\u4e86\u5339\u914d\uff0c\u4e5f\u5c31\u662f\u57fa\u7840\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u662f n-1 \u6b21\u3002 \u800c\u7531\u4e8e\u5b58\u5728 j=pi[i-1]+1 (pi[0]=0) \u5bf9\u4e8e\u6700\u5927\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u770b\u51fa\u6bcf\u6b21\u53ea\u6709\u5728\u6700\u4f18\u60c5\u51b5\u624d\u4f1a\u4e3a\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u7684\u4e0a\u9650\u7d2f\u79ef 1 \uff0c\u800c\u6bcf\u6b21\u8d85\u8fc7\u4e00\u6b21\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u6d88\u8017\u7684\u662f\u4e4b\u540e\u6b21\u6570\u7684\u589e\u957f\u7a7a\u95f4\u3002 \u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u6700\u591a\u7684\u4e00\u79cd\u60c5\u51b5\uff1a\u81f3\u5c11 1 \u6b21\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u7684\u6d88\u8017\u548c\u6700\u591a n-2 n-2 \u6b21\u6bd4\u8f83\u6b21\u6570\u7684\u79ef\u7d2f\uff0c\u6b64\u65f6\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u4e3a n-1 + n-2 = 2n-3 \u3002 \u53ef\u89c1\u7ecf\u8fc7\u7b2c\u4e00\u6b21\u4f18\u5316\uff0c\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u53ea\u9700\u8981\u8fdb\u884c O(n) O(n) \u6b21\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u603b\u590d\u6742\u5ea6\u964d\u4e3a\u4e86 O(n^2) O(n^2) \u3002 \u7b2c\u4e8c\u4e2a\u4f18\u5316 \u5728\u7b2c\u4e00\u4e2a\u4f18\u5316\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u8ba1\u7b97 \\pi[i+1] \\pi[i+1] \u65f6\u7684\u6700\u4f18\u60c5\u51b5\uff1a s[i+1]=s[\\pi[i]] s[i+1]=s[\\pi[i]] \uff0c\u6b64\u65f6 \\pi[i+1]=\\pi[i]+1 \\pi[i+1]=\\pi[i]+1 \u3002\u73b0\u5728\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u8ba8\u8bba\u5f53 s[i+1] \\neq s[\\pi[i]] s[i+1] \\neq s[\\pi[i]] \u65f6\u5982\u4f55\u8df3\u8f6c\u3002 \u5931\u914d\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u627e\u5230\u5bf9\u4e8e\u5b50\u4e32 s[0 \\cdots i] s[0 \\cdots i] \uff0c\u4ec5\u6b21\u4e8e \\pi[i] \\pi[i] \u7684\u7b2c\u4e8c\u957f\u5ea6 j j \uff0c\u4f7f\u5f97\u5728\u4f4d\u7f6e i i \u7684\u524d\u7f00\u6027\u8d28\u4efb\u5f97\u4ee5\u4fdd\u6301\uff0c\u5373 s[0 \\cdots j-1]=s[i-j+1 \\cdots i] s[0 \\cdots j-1]=s[i-j+1 \\cdots i] \u3002 \\overbrace{\\underbrace{s_0 ~ s_1}_j ~ s_2 ~ s_3}^{\\pi[i]} ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_j}^{\\pi[i]} ~ s_{i+1} \\overbrace{\\underbrace{s_0 ~ s_1}_j ~ s_2 ~ s_3}^{\\pi[i]} ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_j}^{\\pi[i]} ~ s_{i+1} \u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u8fd9\u6837\u7684\u957f\u5ea6 j j \uff0c\u90a3\u4e48\u4ec5\u9700\u8981\u518d\u6b21\u6bd4\u8f83 s[i+1] s[i+1] \u548c s[j] s[j] \u3002\u5982\u679c\u5b83\u4eec\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u6709 \\pi[i+1]=j+1 \\pi[i+1]=j+1 \u3002\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5b50\u4e32 s[0 \\cdots i] s[0 \\cdots i] \u4ec5\u6b21\u4e8e j j \u7684\u7b2c\u4e8c\u957f\u5ea6 j^{(2)} j^{(2)} \uff0c\u4f7f\u5f97\u524d\u7f00\u6027\u8d28\u5f97\u4ee5\u4fdd\u6301\uff0c\u5982\u6b64\u53cd\u590d\u76f4\u5230 j=0 j=0 \u3002\u5982\u679c s[i+1] \\neq s[0] s[i+1] \\neq s[0] \uff0c\u5219 \\pi[i+1]=0 \\pi[i+1]=0 \u3002 \u56e0\u4e3a s[0 \\cdots \\pi[i]-1]=s[i-\\pi[i]+1 \\cdots i] s[0 \\cdots \\pi[i]-1]=s[i-\\pi[i]+1 \\cdots i] \uff0c\u6240\u4ee5\u5bf9\u4e8e s[0 \\cdots i] s[0 \\cdots i] \u7684\u7b2c\u4e8c\u957f\u5ea6 j j \uff0c\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff1a s[0 \\cdots j-1]=s[i-j+1 \\cdots i]=s[\\pi[i]-j] \\cdots \\pi[i]-1 s[0 \\cdots j-1]=s[i-j+1 \\cdots i]=s[\\pi[i]-j] \\cdots \\pi[i]-1 \u4e5f\u5c31\u662f\u8bf4 j j \u7b49\u4ef7\u4e8e\u5b50\u4e32 s[\\pi[i]-1] s[\\pi[i]-1] \u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u5373 j=\\pi[\\pi[i]-1] j=\\pi[\\pi[i]-1] \u3002\u540c\u7406\uff0c\u6b21\u4e8e j j \u7684\u7b2c\u4e8c\u957f\u5ea6\u7b49\u4ef7\u4e8e s[j-1] s[j-1] \u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c j^{(2)}=\\pi[j-1] j^{(2)}=\\pi[j-1] \u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5173\u4e8e j j \u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a j^{(n)}=\\pi[j^{(n-1)}-1]\uff0c(j^{(n-1)}>0) j^{(n)}=\\pi[j^{(n-1)}-1]\uff0c(j^{(n-1)}>0) \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a vector < int > prefix_function ( string s ){ int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 ; i < n ; i ++ ){ int j = pi [ i -1 ]; while ( j > 0 && s [ i ] != s [ j ]) j = pi [ j -1 ]; if ( s [ i ] == s [ j ]) j ++ ; pi [ i ] = j ; } return pi ; } \u7ecf\u8fc7\u7b2c\u4e8c\u6b21\u6539\u8fdb\u7684\u7b97\u6cd5\u4e0d\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u4e14\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230\u4e86 O(n) O(n) \u3002 KMP\u7b97\u6cd5\u7684\u7406\u8bba\u5b9e\u73b0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6587\u672c\u4e32 s s \u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a m m \u7684\u6a21\u5f0f\u4e32 p p \u3002 \u6211\u4eec\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32 p+\\#+s p+\\#+s \uff0c\u5176\u4e2d \\# \\# \u4f5c\u4e3a\u4e00\u4e2a\u65e2\u4e0d\u51fa\u73b0\u5728 p p \u4e2d\u4e5f\u4e0d\u51fa\u73b0\u5728 s s \u4e2d\u7684\u5206\u9694\u7b26\u3002\u63a5\u4e0b\u6765\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u51fd\u6570\u3002\u73b0\u5728\u8003\u8651\u8be5\u524d\u7f00\u51fd\u6570\u9664\u53bb\u6700\u5f00\u59cb m+1 m+1 \u4e2a\u503c\uff08\u5373\u5c5e\u4e8e\u5b57\u7b26\u4e32 p p \u548c\u5206\u9694\u7b26\u7684\u51fd\u6570\u503c\uff09\u540e\u5176\u4f59\u51fd\u6570\u503c\u7684\u610f\u4e49\u3002\u6839\u636e\u5b9a\u4e49\uff0c \\pi[i] \\pi[i] \u4e3a\u53f3\u7aef\u70b9\u5728 i i \u4e14\u540c\u65f6\u4e3a\u4e00\u4e2a\u524d\u7f00\u7684\u6700\u957f\u771f\u5b50\u4e32\u7684\u957f\u5ea6\uff0c\u5177\u4f53\u5230\u6211\u4eec\u7684\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u503c\u4e3a\u4e0e p p \u7684\u524d\u7f00\u76f8\u540c\u4e14\u53f3\u7aef\u70b9\u4f4d\u4e8e i i \u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002\u7531\u4e8e\u5206\u9694\u7b26\u7684\u5b58\u5728\uff0c\u8be5\u957f\u5ea6\u4e0d\u53ef\u80fd\u8d85\u8fc7 m m \u3002\u800c\u5982\u679c\u7b49\u5f0f \\pi[i]=m \\pi[i]=m \u6210\u7acb\uff0c\u5219\u610f\u5473\u7740 p p \u5b8c\u6574\u51fa\u73b0\u5728\u8be5\u4f4d\u7f6e\uff08\u5373\u5176\u53f3\u7aef\u70b9\u4f4d\u4e8e\u4f4d\u7f6e i i \uff09\u3002\u6ce8\u610f\u8be5\u4f4d\u7f6e\u7684\u4e0b\u6807\u662f\u5bf9\u5b57\u7b26\u4e32 p+\\#+s p+\\#+s \u800c\u8a00\u7684\u3002 \u56e0\u6b64\u5982\u679c\u5728\u67d0\u4e00\u4f4d\u7f6e i i \u6709 \\pi[i]=m \\pi[i]=m \u6210\u7acb\uff0c\u5219\u5b57\u7b26\u4e32 p p \u5728\u5b57\u7b26\u4e32 s s \u7684 i-(m-1)-(m+1)=i-2m i-(m-1)-(m+1)=i-2m \u5904\u51fa\u73b0\u3002 \u6b63\u5982\u5728\u524d\u7f00\u51fd\u6570\u7684\u8ba1\u7b97\u4e2d\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u524d\u7f00\u51fd\u6570\u7684\u503c\u6c38\u8fdc\u4e0d\u8d85\u8fc7\u4e00\u7279\u5b9a\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u9700\u8981\u5b58\u50a8\u6574\u4e2a\u5b57\u7b26\u4e32\u4ee5\u53ca\u6574\u4e2a\u524d\u7f00\u51fd\u6570\uff0c\u800c\u53ea\u9700\u8981\u4e8c\u8005\u5f00\u5934\u7684\u4e00\u90e8\u5206\u3002\u5728\u6211\u4eec\u8fd9\u79cd\u60c5\u51b5\u4e0b\u610f\u5473\u7740\u53ea\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32 p+\\# p+\\# \u4ee5\u53ca\u76f8\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u8bfb\u5165\u5b57\u7b26\u4e32 s s \u7684\u4e00\u4e2a\u5b57\u7b26\u5e76\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002 \u56e0\u6b64KMP\u7b97\u6cd5\u4ec5\u4f7f\u7528 O(n+m) O(n+m) \u7684\u65f6\u95f4\u4ee5\u53ca O(n) O(n) \u7684\u7a7a\u95f4\u5c31\u80fd\u89e3\u51b3\u5355\u6a21\u5f0f\u5339\u914d\u95ee\u9898\u3002 KMP\u7b97\u6cd5\u7684\u4ee3\u7801\u5b9e\u73b0 \u00b6 \u7ed3\u6784\u4f53\u5c01\u88c5\u7684KMP\u6a21\u677f\uff1a struct kmp { int pi [ 100010 ]; vector < int > prefix_function ( string s ){ int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 , j = 0 ; i < n ; i ++ ){ while ( j && s [ i ] != s [ j ]) j = pi [ j -1 ]; if ( s [ i ] == s [ j ]) j ++ ; pi [ i ] = j ; } return pi ; } void kmp_function (){ for ( int i = 0 , j = 0 ; i < n ; i ++ ){ while ( j && s [ i ] != s [ j ]) j = pi [ j -1 ]; if ( s [ i ] == s [ j ]) j ++ ; if ( n == j ){ // matched j = pi [ j -1 ]; } } } }; AC\u81ea\u52a8\u673a \u00b6 \u4ec0\u4e48\u662fAC\u81ea\u52a8\u673a \u00b6 AC\u81ea\u52a8\u673a\u662f\u4e00\u79cd\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff0c\u5b83\u662f\u4ee5Trie\u7684\u7ed3\u6784\u4e3a\u57fa\u7840\uff0c\u7ed3\u5408KMP\u7684\u601d\u60f3\u5efa\u7acb\u7684\u3002 AC\u81ea\u52a8\u673a\u7684\u4f5c\u7528 \u00b6 AC\u81ea\u52a8\u673a\u80fd\u591f\u9ad8\u6548\u5730\u8fdb\u884c\u591a\u6a21\u5f0f\u5339\u914d\uff0c\u5373\u5728\u4e00\u4e2a\u6587\u672c\u4e32\u4e2d\u5339\u914d\u591a\u4e2a\u6a21\u5f0f\u4e32\u3002 AC\u81ea\u52a8\u673a\u7684\u7406\u8bba\u5b9e\u73b0 \u00b6 AC\u81ea\u52a8\u673a\u7684\u8fd0\u884c\u539f\u7406\uff1a\u6784\u5efa\u5b57\u5178\u56fe\u5b9e\u73b0\u81ea\u52a8\u8df3\u8f6c\uff0c\u6784\u5efa\u5931\u914d\u6307\u9488\u5b9e\u73b0\u591a\u6a21\u5f0f\u5339\u914d\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5efa\u7acb\u4e00\u4e2aAC\u81ea\u52a8\u673a\u9700\u8981\u4e24\u6b65\uff1a Trie\u7ed3\u6784\uff1a\u5c06\u6240\u6709\u6a21\u5f0f\u4e32\u6784\u5efa\u6210\u4e00\u9897Trie\u6811 KMP\u601d\u60f3\uff1a\u5bf9Trie\u6811\u4e0a\u6240\u6709\u7684\u7ed3\u70b9\u6784\u9020\u5931\u914d\u6307\u9488 \u6784\u5efaTrie\u6811 \u00b6 Trie\u6811\u7684\u6784\u5efa\u548cTrie\u7684insert\u64cd\u4f5c\u4e00\u6a21\u4e00\u6837\u3002 Trie\u6811\u7684\u7ed3\u70b9\u8868\u793a\u67d0\u4e2a\u6a21\u5f0f\u4e32\u7684\u524d\u7f00\uff08\u4e5f\u79f0\u4e3a\u72b6\u6001\uff09\uff0c\u800cTrie\u6811\u7684\u8fb9\u5c31\u662f\u72b6\u6001\u7684\u8f6c\u79fb\u3002 \u6784\u9020\u5931\u914d\u6307\u9488 \u00b6 \u5931\u914d\u6307\u9488\u5373 fail fail \u6307\u9488\u3002 fail fail \u6307\u9488\u7684\u57fa\u7840\u601d\u60f3 \u00b6 \u6784\u5efa fail fail \u6307\u9488\uff0c\u53ef\u4ee5\u7c7b\u6bd4KMP\u4e2d\u6784\u9020next\u6307\u9488\uff08\u5373pi[]\uff09\u7684\u601d\u60f3\u3002 \u5229\u7528\u5df2\u7ecf\u6c42\u51fa fail fail \u6307\u9488\u7684\u7ed3\u70b9\u63a8\u5bfc\u51fa\u5f53\u524d\u7ed3\u70b9\u7684 fail fail \u6307\u9488\uff0c\u4e00\u822c\u6765\u8bf4\u901a\u8fc7BFS\u5b9e\u73b0\u5373\u53ef\uff1a \u8003\u8651Trie\u4e2d\u5f53\u524d\u7684\u7ed3\u70b9 u u \uff0c u u \u7684\u7236\u7ed3\u70b9\u662f p p \u3002 \u5047\u8bbe\u6df1\u5ea6\u5c0f\u4e8e u u \u7684\u6240\u6709\u7ed3\u70b9\u7684 fail fail \u6307\u9488\u90fd\u5df2\u7ecf\u6c42\u5f97\uff0c\u90a3\u4e48 p p \u7684 fail fail \u6307\u9488\u663e\u7136\u5df2\u7ecf\u6c42\u5f97\u3002 \u6211\u4eec\u8df3\u8f6c\u5230 p p \u7684 fail fail \u6307\u9488\u6307\u5411\u7684\u7ed3\u70b9 fail[p] fail[p] \uff1a \u5982\u679c\u7ed3\u70b9 fail[p] fail[p] \u7684\u5b50\u7ed3\u70b9 w w \u5b58\u5728\uff0c\u5219\u8ba9 u u \u7684 fail fail \u6307\u9488\u6307\u5411\u8fd9\u4e2a\u7ed3\u70b9 w w \u3002 \u5982\u679c\u7ed3\u70b9 fail[p] fail[p] \u7684\u5b50\u7ed3\u70b9 w w \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u6211\u4eec\u7ee7\u7eed\u5bfb\u627e fail[fail[p]] fail[fail[p]] \u6307\u9488\u6307\u5411\u7684\u7ed3\u70b9\uff0c\u76f4\u5230 fail fail \u6307\u9488\u6307\u5411\u6839\u8282\u70b9\u3002 \u5982\u6b64\u5c31\u5b8c\u6210\u4e86 fail fail \u6307\u9488\u7684\u6784\u5efa\u3002 fail fail \u6307\u9488\u4e0enext\u6307\u9488\u7684\u6bd4\u8f83 \u00b6 \u5171\u540c\u70b9\uff1a\u4e24\u8005\u90fd\u662f\u5728 \u5931\u914d \u65f6\u7528\u4e8e\u8df3\u8f6c\u4ece\u800c\u907f\u514d\u5927\u91cf\u56de\u6714\u7684\u6307\u9488\u3002 \u4e0d\u540c\u70b9\uff1aKMP\u8981\u6c42 \u6700\u957f\u76f8\u540c\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00 \uff0cAC\u81ea\u52a8\u673a\u8981\u6c42 \u76f8\u540c\u540e\u7f00 \u3002 KMP\u7528\u4e8e\u5355\u6a21\u5f0f\u5339\u914d\uff0cAC\u81ea\u52a8\u673a\u7528\u4e8e\u591a\u6a21\u5f0f\u5339\u914d\u3002 fail fail \u6307\u9488\u6307\u5411\u7684\u7ed3\u70b9\u53ef\u80fd\u5bf9\u5e94\u7740\u524d\u7f00\u4e0d\u540c\u7684\u6a21\u5f0f\u4e32\u3002 AC\u81ea\u52a8\u673a\u5728\u5339\u914d\u6587\u672c\u4e32\u65f6\uff0c\u540c\u4e00\u4f4d\u4e0a\u53ef\u80fd\u5339\u914d\u591a\u4e2a\u6a21\u5f0f\u4e32\u3002 \u56e0\u6b64 fail fail \u6307\u9488\u4f1a\u5728\u5b57\u5178\u6811\u4e0a\u7684\u7ed3\u70b9\u6765\u56de\u8df3\u8f6c\uff0cnext\u6307\u9488\u5219\u662f\u5728\u7ebf\u6027\u7ed3\u6784\u4e0a\u8df3\u8f6c\u3002 AC\u81ea\u52a8\u673a\u7684\u4ee3\u7801\u5b9e\u73b0 \u00b6 \u4e3b\u8981\u6846\u67b6\uff1a #include <bits/stdc++.h> using namespace std ; const int N = 1e6 + 10 , M = 256 ; int trie [ N ][ M ]; // Trie\u6811 int cntword [ N ]; // \u6807\u8bb0\u662f\u5426\u4e3a\u6a21\u5f0f\u4e32\u7684\u7ed3\u5c3e int fail [ N ]; // fail\u6307\u9488 int cnt = 0 ; // Trie\u6811\u7ed3\u70b9\u7684\u4e0b\u6807 int n ; string s ; int main (){ cin >> n ; for ( int i = 0 ; i < n ; i ++ ){ cin >> s ; insert ( s ); // \u63d2\u5165\u6a21\u5f0f\u4e32 } build (); // \u6784\u5efafail\u6307\u9488 cin >> s ; cout << query ( s ); // \u5339\u914d\u51fd\u6570 return 0 ; } \u63a5\u4e0b\u6765\u5c06\u4f9d\u6b21\u4ecb\u7ecdinsert\u3001build\u548cquery\u51fd\u6570\uff1a insert - \u6784\u5efaTrie\u6811 void insert ( string s ){ int root = 0 ; for ( int i = 0 ; s [ i ]; i ++ ){ int next = s [ i ]; if ( ! trie [ root ][ next ]){ trie [ root ][ next ] =++ cnt ; } root = trie [ root ][ next ]; } cntword [ root ] ++ ; } \u4e0eTrie\u6811\u7684insert\u4e00\u6a21\u4e00\u6837\uff0c\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u3002 build - \u6784\u5efa fail fail \u6307\u9488 void build (){ queue < int > q ; for ( int i = 0 ; i < M ; i ++ ){ if ( trie [ 0 ][ i ]){ fail [ trie [ 0 ][ i ]] = 0 ; q . push ( trie [ 0 ][ i ]); } } while ( ! q . empty ()){ int now = q . front (); q . pop (); for ( int i = 0 ; i < M ; i ++ ){ if ( trie [ now ][ i ]){ fail [ trie [ now ][ i ]] = trie [ fail [ now ]][ i ]; q . push ( trie [ now ][ i ]); } else { trie [ now ][ i ] = trie [ fail [ now ]][ i ]; } } } } \u9996\u5148\u58f0\u660e\u961f\u5217 q q \u7528\u4e8eBFS\uff0c\u8fd9\u91cc\u7684\u5b57\u5178\u6811\u6839\u8282\u70b9\u4e3a0\uff0c\u6211\u4eec\u5c06\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e00\u4e00\u5165\u961f\u3002 \u7136\u540e\u5f00\u59cb\u8fdb\u884cBFS\uff0c\u6bcf\u6b21\u53d6\u51fa\u961f\u9996\u7ed3\u70b9 now now \uff0c\u6c42 now now \u7684\u5b50\u8282\u70b9\u7684 fail fail \u6307\u9488\u3002 \u63a5\u7740\u904d\u5386\u5b57\u7b26\u96c6\uff1a \u5982\u679c\u5b57\u7b26 i i \u5bf9\u5e94\u7684\u5b50\u7ed3\u70b9\u5b58\u5728\uff0c\u6211\u4eec\u5c31\u5c06\u8be5\u5b50\u7ed3\u70b9\u7684 fail fail \u6307\u9488\u8d4b\u503c\u4e3a fail[now] fail[now] \u7684\u5b57\u7b26 i i \u5bf9\u5e94\u7684\u7ed3\u70b9\u3002 \u5426\u5219\u5c06 fail[now] fail[now] \u7684\u5b57\u7b26 i i \u5bf9\u5e94\u7684\u5b50\u7ed3\u70b9\u7f16\u53f7\u8d4b\u503c\u7ed9 now now \u3002 \u4ee3\u7801\u4e2d\u5b58\u5728\u4e24\u5904\u4e0e\u4e4b\u524d\u7684\u7406\u8bba\u5206\u6790\u4e0d\u4e00\u81f4\u4e4b\u5904\uff1a \u9996\u5148\uff0c\u6309\u7167\u5206\u6790\uff0c\u5e94\u8be5\u4f7f\u7528while\u5faa\u73af\uff0c\u8ba9 fail fail \u6307\u9488\u4e0d\u505c\u8df3\u8f6c\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u5bf9\u5e94\u7ed3\u70b9\uff0c\u4f46\u6b64\u5904\u5e76\u975e\u5982\u6b64\u3002 \u5176\u6b21\uff0c\u6b64\u5904\u76f4\u63a5\u5c06 fail[now] fail[now] \u7684\u5b50\u7ed3\u70b9\u8d4b\u503c\u4e3a now now \u7684\u5b50\u7ed3\u70b9\u3002 \u8fd9\u4e24\u5904\u5730\u65b9\u7ed3\u5408\u5728\u4e00\u8d77\u5b8c\u6210\u4e86\u8def\u5f84\u538b\u7f29\uff0c\u80fd\u5728 O(1) O(1) \u7684\u65f6\u95f4\u5185\u5bf9\u5355\u4e2a\u7ed3\u70b9\u8fdb\u884c fail fail \u6307\u9488\u7684\u6784\u9020\u3002 query - \u5339\u914d\u51fd\u6570 int query ( string s ){ int now = 0 , ans = 0 ; for ( int i = 0 ; s [ i ]; i ++ ){ now = trie [ now ][( int ) s [ i ]]; for ( int j = now ; j && cntword [ j ] != -1 ; j = fail [ j ]){ ans += cntword [ j ]; cntword [ j ] = -1 ; } } return ans ; } \u58f0\u660e now now \u4f5c\u4e3aTrie\u4e0a\u5f53\u524d\u5339\u914d\u5230\u7684\u7ed3\u70b9\uff0c ans ans \u5373\u8fd4\u56de\u7684\u7b54\u6848 \u5faa\u73af\u904d\u5386\u6587\u672c\u4e32\uff0c now now \u5728Trie\u4e0a\u8ddf\u8e2a\u5f53\u524d\u5b57\u7b26\u3002 \u5229\u7528 fail fail \u6307\u9488\u627e\u51fa\u6240\u6709\u5339\u914d\u7684\u6a21\u5f0f\u4e32\uff0c\u7d2f\u52a0\u5230\u7b54\u6848\u4e2d\u3002 \u8fd9\u91cc\u7684 now now \u5e76\u4e00\u76f4\u5728\u5f80Trie\u540e\u8df3\u8f6c\uff0c\u800c\u662f\u5728\u56fe\u4e0a\u7a7f\u68ad\u8df3\u8f6c\u3002 \u603b\u7ed3\u4e0e\u62d3\u5c55 \u00b6 \u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u4e09\u79cd\u5e38\u7528\u7684\u81ea\u52a8\u673a\uff0c\u4f46\u662f\u8fd9\u4e09\u79cd\u7b97\u6cd5\u548c\u201c\u81ea\u52a8\u673a\u201d\u4f3c\u4e4e\u6beb\u65e0\u5173\u8054\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u8ba4\u8bc6\u81ea\u52a8\u673a\u3002 \u81ea\u52a8\u673a\u7684\u5f62\u5f0f\u5316\u5b9a\u4e49 \u00b6 \u4e00\u4e2a\u786e\u5b9a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u662f\u7531\u4ee5\u4e0b\u4e94\u4e2a\u90e8\u5206\uff1a \u5b57\u7b26\u96c6 \\sum \\sum \uff0c\u8be5\u81ea\u52a8\u673a\u53ea\u80fd\u8f93\u5165\u8fd9\u4e9b\u5b57\u7b26\u3002 \u72b6\u6001\u96c6\u5408 Q Q \u3002\u5982\u679c\u628a\u4e00\u4e2aDFA\u770b\u6210\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u90a3\u4e48DFA\u4e2d\u7684\u72b6\u6001\u5c31\u76f8\u5f53\u4e8e\u56fe\u4e0a\u7684\u9876\u70b9\u3002 \u8d77\u59cb\u72b6\u6001 s s \uff0c s\\in Q s\\in Q \uff0c\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u72b6\u6001\u3002 \u63a5\u53d7\u72b6\u6001 F F \uff0c F\\subseteq Q F\\subseteq Q \uff0c\u662f\u4e00\u7ec4\u7279\u6b8a\u7684\u72b6\u6001\u3002 \u8f6c\u79fb\u51fd\u6570 \\delta \\delta \uff0c \\delta \\delta \u662f\u4e00\u4e2a\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u7684\u51fd\u6570\uff0c\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u662f\u4e00\u4e2a\u72b6\u6001\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u96c6\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u628a\u4e00\u4e2aDFA\u770b\u6210\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u90a3\u4e48DFA\u4e2d\u7684\u8f6c\u79fb\u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\u9876\u70b9\u95f4\u7684\u8fb9\uff0c\u800c\u6bcf\u6761\u8fb9\u4e0a\u90fd\u6709\u4e00\u4e2a\u5b57\u7b26\u3002 \u7ec4\u6210\u7684\u4e94\u5143\u7ec4 (Q,\\sum,\\delta,s,F) (Q,\\sum,\\delta,s,F) DFA\u7684\u4f5c\u7528\u5c31\u662f\u8bc6\u522b\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a\u81ea\u52a8\u673a A A \uff0c\u82e5\u5b83\u80fd\u8bc6\u522b\uff08\u63a5\u53d7\uff09\u5b57\u7b26\u4e32 S S \uff0c\u90a3\u4e48 A(S)=True A(S)=True \uff0c\u5426\u5219 A(S)=False A(S)=False \u3002 \u5f53\u4e00\u4e2aDFA\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c\u4ece\u521d\u59cb\u72b6\u6001\u8d77\u6309\u7167\u8f6c\u79fb\u51fd\u6570\u4e00\u4e2a\u4e00\u4e2a\u5b57\u7b26\u5730\u8f6c\u79fb\u3002\u5982\u679c\u8bfb\u5165\u5b8c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u540e\u4f4d\u4e8e\u4e00\u4e2a\u63a5\u53d7\u72b6\u6001\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2aDFA \u63a5\u53d7 \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u53cd\u4e4b\u6211\u4eec\u79f0\u8fd9\u4e2aDFA \u4e0d\u63a5\u53d7 \u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002 \u5982\u679c\u4e00\u4e2a\u72b6\u6001 v v \u6ca1\u6709\u5b57\u7b26 c c \u7684\u8f6c\u79fb\uff0c\u90a3\u4e48\u6211\u4eec\u4ee4 \\delta(v,c)=null \\delta(v,c)=null \uff0c\u800c null null \u53ea\u80fd\u8f6c\u79fb\u5230 null null \uff0c\u4e14 null null \u4e0d\u5c5e\u4e8e\u63a5\u53d7\u72b6\u6001\u96c6\u5408\u3002\u65e0\u6cd5\u8f6c\u79fb\u5230\u4efb\u4f55\u4e00\u4e2a\u63a5\u53d7\u72b6\u6001\u7684\u72b6\u6001\u90fd\u53ef\u4ee5\u89c6\u4f5c null null \uff0c\u6216\u8005\u8bf4\uff0c null null \u4ee3\u6307\u6240\u6709\u65e0\u6cd5\u8f6c\u79fb\u5230\u4efb\u4f55\u4e00\u4e2a\u63a5\u53d7\u72b6\u6001\u7684\u72b6\u6001\u3002 \u6211\u4eec\u62d3\u5c55\u5b9a\u4e49\u8f6c\u79fb\u51fd\u6570 \\delta \\delta \uff0c\u4ee4\u5176\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a \\delta(v,S)=\\delta(\\delta(v,S[1],S[2\\cdots|S|])) \\delta(v,S)=\\delta(\\delta(v,S[1],S[2\\cdots|S|])) \uff0c\u62d3\u5c55\u540e\u7684\u8f6c\u79fb\u51fd\u6570\u5c31\u53ef\u4ee5\u8868\u793a\u4ece\u4e00\u4e2a\u72b6\u6001\u8d77\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u540e\u8f6c\u79fb\u5230\u7684\u72b6\u6001\u3002\u90a3\u4e48\uff0c A(S)=[\\delta(s,S)\\in F] A(S)=[\\delta(s,S)\\in F] \u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u8fc7\u5934\u6765\u770b\u770b\u4e4b\u524d\u5b66\u4e60\u7684\u4e09\u79cd\u5e38\u7528\u81ea\u52a8\u673a\u3002 Trie \u00b6 \u5bf9\u4e8eTrie\uff1a \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002 \u63a5\u53d7\u72b6\u6001\u4e3a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u63d2\u5165\u5230Trie\u6811\u65f6\u5230\u8fbe\u7684\u72b6\u6001\u3002 \u8f6c\u79fb\u51fd\u6570\u4e3aTrie\u4e0a\u7684\u8fb9\u3002 KMP\u7b97\u6cd5 \u00b6 KMP\u7b97\u6cd5\u53ef\u4ee5\u89c6\u4f5c\u81ea\u52a8\u673a\uff0c\u57fa\u4e8e\u5b57\u7b26\u4e32 s s \u7684KMP\u81ea\u52a8\u673a\uff1a \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u4ee5 s s \u4e3a\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u3002 \u63a5\u53d7\u72b6\u6001\u4e3a |s| |s| \u3002 \u8f6c\u79fb\u51fd\u6570\u4e3a\uff1a \\delta(i,c)=\\begin{cases}i+1&s[i+1]=c\\\\ 0&s[1]\\ne c\\land i=0\\\\ \\delta(\\pi(i),c)&s[i+1]\\ne c\\land i>0 \\end{cases} \\delta(i,c)=\\begin{cases}i+1&s[i+1]=c\\\\ 0&s[1]\\ne c\\land i=0\\\\ \\delta(\\pi(i),c)&s[i+1]\\ne c\\land i>0 \\end{cases} AC\u81ea\u52a8\u673a \u00b6 \u5bf9\u4e8eAC\u81ea\u52a8\u673a\uff1a \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u4ee5\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u4e3a\u540e\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662fTrie+KMP\u3002 \u62d3\u5c551\uff1a\u5e38\u7528\u81ea\u52a8\u673a\u7684\u6df1\u5165 \u00b6 Trie \u00b6 \u68c0\u7d22\u5b57\u7b26\u4e32 \\surd \\surd AC\u81ea\u52a8\u673a \\surd \\surd \u7ef4\u62a4\u5f02\u6216\u6781\u503c \u7ef4\u62a4\u5f02\u6216\u548c 01-trie\u5408\u5e76 \u63d2\u5165&\u5220\u9664 \u5168\u5c40\u52a0\u4e00 \u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811 KMP\u7b97\u6cd5 \u00b6 \u5728\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u5b50\u4e32 \\surd \\surd AC\u81ea\u52a8\u673a \\surd \\surd \u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00\u7684\u51fa\u73b0\u6b21\u6570 \u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6570\u91cf \u5b57\u7b26\u4e32\u538b\u7f29 \u62d3\u5c552\uff1a\u5176\u4ed6\u81ea\u52a8\u673a \u00b6 Trie(\u5b57\u5178\u6811) \\surd \\surd KMP\u7b97\u6cd5 \\surd \\surd AC\u81ea\u52a8\u673a \\surd \\surd \u540e\u7f00\u81ea\u52a8\u673a(SAM) \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u6307\u5b9a\u5b57\u7b26\u4e32\u7684\u540e\u7f00 \u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a(\u5e7f\u4e49SAM) \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u7684\u540e\u7f00\uff0c\u5373Trie+SAM \u56de\u6587\u81ea\u52a8\u673a(PAM) \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\u53ca\u53f3\u534a\u90e8\u5206 \u5e8f\u5217\u81ea\u52a8\u673a \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u6307\u5b9a\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217 \\cdots \\cdots \u5168\u6587\u7ed3\u675f\uff0c\u8c22\u8c22\u9605\u8bfb \u00b6","title":"\u81ea\u52a8\u673a\u5165\u95e8"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#acac","text":"","title":"AC\u81ea\u52a8\u673a=\u81ea\u52a8AC\u673a\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_1","text":"","title":"\u2014\u2014\u201c\u81ea\u52a8\u673a\u201d\u5165\u95e8"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#21","text":"\u914d\u5957\u89c6\u9891 \u81ea\u52a8\u673a\u5165\u95e8","title":"\u8ba1\u7b97\u673a\u5b66\u966221\u7ea7 \u4f55\u4e30\u8fb0"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_2","text":"","title":"\u5199\u5728\u524d\u9762"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_3","text":"\u81ea\u52a8\u673a\u662fOI\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u4e2a\u6570\u5b66\u6a21\u578b\uff0c\u5176\u601d\u60f3\u5728\u8bb8\u591a\u5b57\u7b26\u4e32\u7b97\u6cd5\u4e2d\u90fd\u6709\u6d89\u53ca\uff0c\u56e0\u6b64\u5728\u5b66\u4e60\u4e00\u4e9b\u5b57\u7b26\u4e32\u7b97\u6cd5\u524d\u5148\u5b8c\u6210\u81ea\u52a8\u673a\u7684\u5b66\u4e60\u5c06\u6709\u52a9\u4e8e\u7406\u89e3\u4e0a\u8ff0\u7b97\u6cd5\u3002\u672c\u6587\u5c06\u7531\u6d45\u5165\u6df1\u4ecb\u7ecd\u81ea\u52a8\u673a\u7684\u57fa\u7840\u6982\u5ff5\u5e76\u8bb2\u89e3\u4e09\u79cd\u5e38\u7528\u7684\u81ea\u52a8\u673a\uff1aTrie\u3001KMP\u548cAC\u81ea\u52a8\u673a\u3002","title":"\u7b80\u4ecb"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_4","text":"","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_5","text":"\u4e00\u4e2a \u5b57\u7b26\u96c6 \\sum \\sum \u662f\u4e00\u4e2a\u5efa\u7acb\u4e86\u5168\u5e8f\u5173\u7cfb\u7684\u96c6\u5408\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c \\sum \\sum \u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5143\u7d20 \\alpha \\alpha \u548c \\beta \\beta \u90fd\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\uff0c\u8981\u4e48 \\alpha<\\beta \\alpha<\\beta \uff0c\u8981\u4e48 \\beta<\\alpha \\beta<\\alpha \u3002\u5b57\u7b26\u96c6 \\sum \\sum \u4e2d\u7684\u5143\u7d20\u79f0\u4e3a\u5b57\u7b26\u3002","title":"\u5b57\u7b26\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_6","text":"\u4e00\u4e2a \u5b57\u7b26\u4e32 S S \u662f\u5c06 n n \u4e2a\u5b57\u7b26\u987a\u6b21\u6392\u5217\u5f62\u6210\u7684\u5e8f\u5217\uff0c n n \u79f0\u4e3a S S \u7684\u957f\u5ea6\uff0c\u8868\u793a\u4e3a |S| |S| \u3002 S S \u7684\u7b2c i i \u4e2a\u5b57\u7b26\u8868\u793a\u4e3a S[i] S[i] \u6216 S[i-1] S[i-1] \u3002","title":"\u5b57\u7b26\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_7","text":"\u5b57\u7b26\u4e32 S S \u7684 \u5b50\u4e32 S[i \\cdots j]\uff0ci \\leq j S[i \\cdots j]\uff0ci \\leq j \uff0c\u8868\u793a S S \u4e32\u4e2d\u4ece i i \u5230 j j \u8fd9\u4e00\u6bb5\uff0c\u4e5f\u5c31\u662f\u987a\u6b21\u6392\u5217 S[i],S[i+1],\\cdots,S[j] S[i],S[i+1],\\cdots,S[j] \u5f62\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u6709\u65f6\u4e5f\u4f1a\u7528 S[i \\cdots j]\uff0ci>j S[i \\cdots j]\uff0ci>j \u6765\u8868\u793a\u7a7a\u4e32\u3002","title":"\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_8","text":"\u5b57\u7b26\u4e32 S S \u7684 \u5b50\u5e8f\u5217 \u662f\u4ece S S \u4e2d\u5c06\u82e5\u5e72\u5143\u7d20\u63d0\u53d6\u51fa\u6765\u5e76\u4e0d\u6539\u53d8\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u5e8f\u5217\uff0c\u5373 S[p_1],S[p_2],\\cdots,S[p_k]\uff0c1 \\leq p_1<p_2<\\cdots<p_k \\leq |S| S[p_1],S[p_2],\\cdots,S[p_k]\uff0c1 \\leq p_1<p_2<\\cdots<p_k \\leq |S| \u3002","title":"\u5b50\u5e8f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_9","text":"","title":"\u540e\u7f00"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_10","text":"\u540e\u7f00 \u662f\u6307\u4ece\u67d0\u4e2a\u4f4d\u7f6e i i \u5f00\u59cb\u5230\u6574\u4e2a\u5b57\u7b26\u4e32\u672b\u5c3e\u7ed3\u675f\u7684\u4e00\u4e2a\u7279\u6b8a\u5b50\u4e32\u3002\u5b57\u7b26\u4e32 S S \u7684\u4ece i i \u5f00\u5934\u7684\u540e\u7f00\u8868\u793a\u4e3a Suffix(S,i) Suffix(S,i) \uff0c\u4e5f\u5c31\u662f Suffix(S,i)=S[i \\cdots |S|-1] Suffix(S,i)=S[i \\cdots |S|-1] \u3002","title":"\u540e\u7f00"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_11","text":"\u771f\u540e\u7f00 \u6307\u9664\u4e86 S S \u672c\u8eab\u7684 S S \u7684\u540e\u7f00\u3002","title":"\u771f\u540e\u7f00"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_12","text":"","title":"\u524d\u7f00"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_13","text":"\u524d\u7f00 \u662f\u6307\u4ece\u5b57\u7b26\u4e32\u9996\u5f00\u59cb\u5230\u67d0\u4e2a\u4f4d\u7f6e i i \u7ed3\u675f\u7684\u4e00\u4e2a\u7279\u6b8a\u5b50\u4e32\u3002\u5b57\u7b26\u4e32 S S \u7684\u4ee5 i i \u7ed3\u5c3e\u7684\u524d\u7f00\u8868\u793a\u4e3a Prefix(S,i) Prefix(S,i) \uff0c\u4e5f\u5c31\u662f Prefix(S,i)=S[0 \\cdots i] Prefix(S,i)=S[0 \\cdots i] \u3002","title":"\u524d\u7f00"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_14","text":"\u771f\u524d\u7f00 \u6307\u9664\u4e86 S S \u672c\u8eab\u7684 S S \u7684\u524d\u7f00\u3002","title":"\u771f\u524d\u7f00"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_15","text":"\u5b57\u5178\u5e8f \u6307\u4ee5\u7b2c i i \u4e2a\u5b57\u7b26\u4f5c\u4e3a\u7b2c i i \u5173\u952e\u5b57\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\uff0c\u7a7a\u5b57\u7b26\u5c0f\u4e8e\u5b57\u7b26\u96c6\u5185\u4efb\u4f55\u5b57\u7b26\uff08\u5373\uff1a a<aa a<aa \uff09\u3002","title":"\u5b57\u5178\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_16","text":"\u56de\u6587\u4e32 \u662f\u6b63\u8005\u548c\u5012\u7740\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u6ee1\u8db3 \\forall 1 \\leq i \\leq |s|\uff0cs[i]=s[|s|+1-i] \\forall 1 \\leq i \\leq |s|\uff0cs[i]=s[|s|+1-i] \u7684 s s \u3002","title":"\u56de\u6587\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_17","text":"","title":"\u4ec0\u4e48\u662f\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_18","text":"\u81ea\u52a8\u673a\u662f\u4e00\u4e2a\u5bf9 \u4fe1\u53f7\u5e8f\u5217 \u8fdb\u884c \u5224\u5b9a \u7684\u6570\u5b66\u6a21\u578b\u3002 \u201c\u4fe1\u53f7\u5e8f\u5217\u201d\u6307\u4e00\u8fde\u4e32\u6709\u987a\u5e8f\u7684\u4fe1\u53f7\uff0c\u4f8b\u5982\u5b57\u7b26\u4e32\u4ece\u524d\u5230\u540e\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u3001\u6570\u7ec4\u4ece1\u5230n\u7684\u6bcf\u4e00\u4e2a\u6570\u3001\u6570\u4ece\u9ad8\u5230\u4f4e\u7684\u6bcf\u4e00\u4f4d\u7b49 \u201c\u5224\u5b9a\u201d\u6307\u9488\u5bf9\u67d0\u4e00\u547d\u9898\u7ed9\u51fa\u6216\u771f\u6216\u5047\u7684\u56de\u7b54 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u81ea\u52a8\u673a\u65e2\u4e0d\u662f\u7b97\u6cd5\uff0c\u4e5f\u4e0d\u662f\u6570\u636e\u7ed3\u6784\u3002\u56e0\u6b64\uff0c\u5b9e\u73b0\u540c\u4e00\u4e2a\u81ea\u52a8\u673a\u7684\u65b9\u6cd5\u53ef\u80fd\u6709\u5f88\u591a\u79cd\u3002","title":"\u81ea\u52a8\u673a\u7684\u6982\u5ff5"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_19","text":"DFA(Deterministic Finite Automaton, \u786e\u5b9a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a) NFA(Nondeterministic Finite Automata, \u975e\u786e\u5b9a\u81ea\u52a8\u673a) \u5728OI\u4e2d\u6240\u8bf4\u7684\u201c\u81ea\u52a8\u673a\u201d\u4e00\u822c\u90fd\u6307DFA\uff0c\u5373\u201c\u786e\u5b9a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u201d\u3002","title":"\u81ea\u52a8\u673a\u7684\u5206\u7c7b"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_20","text":"\u5224\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570 \u5224\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u56de\u6587 \u5224\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u67d0\u4e2a\u7279\u5b9a\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\u7b49\u7b49 \u56e0\u6b64\uff0c\u81ea\u52a8\u673a\u5e38\u7528\u4e8e\u89e3\u51b3\u4e0e\u5b57\u7b26\u4e32\u76f8\u5173\u7684\u95ee\u9898\uff1a \u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898 \u5b50\u4e32\u76f8\u5173\u95ee\u9898 \u524d\u7f00/\u540e\u7f00\u76f8\u5173\u95ee\u9898 \u56de\u6587\u4e32\u76f8\u5173\u95ee\u9898 \u5b50\u5e8f\u5217\u76f8\u5173\u95ee\u9898","title":"\u81ea\u52a8\u673a\u7684\u5e94\u7528\u6848\u4f8b"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_21","text":"","title":"\u5e38\u7528\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#trie","text":"","title":"Trie"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#trie_1","text":"Trie\u53c8\u540d\u5b57\u5178\u6811\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u4e00\u4e2a\u50cf\u5b57\u5178\u4e00\u6837\u7684\u6811\u3002","title":"\u4ec0\u4e48\u662fTrie"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#trie_2","text":"Trie\u662f\u4e00\u79cd\u80fd\u591f\u9ad8\u6548\u5730\u5b58\u50a8\u548c\u67e5\u627e\u5b57\u7b26\u4e32\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\u3002","title":"Trie\u7684\u4f5c\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#trie_3","text":"Trie\u7684\u7ed3\u6784\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u7528 \\delta(u,c) \\delta(u,c) \u8868\u793a\u7ed3\u70b9 u u \u7684 c c \u5b57\u7b26\u6307\u5411\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6216\u8005\u8bf4\u662f\u7ed3\u70b9 u u \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 c c \u5f62\u6210\u7684\u5b57\u7b26\u4e32\u7684\u7ed3\u70b9\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a c c \u7684\u53d6\u503c\u8303\u56f4\u548c\u5b57\u7b26\u96c6\u5927\u5c0f\u76f8\u5173\uff0c\u4e0d\u4e00\u5b9a\u662f 0\\sim26 0\\sim26 \u3002 \u6709\u65f6\u9700\u8981\u6807\u8bb0\u63d2\u5165\u8fdbTrie\u7684\u662f\u54ea\u4e9b\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u63d2\u5165\u5b8c\u6210\u65f6\u5728\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6240\u4ee3\u8868\u7684\u7ed3\u70b9\u5904\u6253\u4e0a\u6807\u8bb0\u5373\u53ef\u3002","title":"Trie\u7684\u7406\u8bba\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#trie_4","text":"\u7ed3\u6784\u4f53\u5c01\u88c5\u7684Trie\u6a21\u677f\uff1a struct trie { int son [ 100010 ][ 256 ], cnt [ 100010 ] = { 0 }, idx ; void insert ( char str []) { // \u63d2\u5165\u5b57\u7b26\u4e32 int p = 0 ; // \u4ece\u6839\u8282\u70b9\u5f00\u59cb for ( int i = 0 ; str [ i ]; i ++ ){ // \u904d\u5386\u5b57\u7b26\u4e32 int u = str [ i ]; // \u5f53\u524d\u5b57\u7b26\u7684ASCII\u7801\u503c if ( ! son [ p ][ u ]) son [ p ][ u ] =++ idx ; // \u5982\u679c\u7ed3\u70b9\u4e0d\u5b58\u5728\u5c31\u521b\u5efa p = son [ p ][ u ]; // \u8fdb\u5165\u4e0b\u4e00\u4e2a\u7ed3\u70b9 } cnt [ p ] ++ ; } bool find ( char str []){ // \u67e5\u627e\u5b57\u7b26\u4e32 int p = 0 ; for ( int i = 0 ; str [ i ]; i ++ ){ int u = str [ i ]; if ( ! son [ p ][ u ]) return 0 ; p = son [ p ][ u ]; } return cnt [ p ]; } };","title":"Trie\u7684\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#kmp","text":"","title":"KMP\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#kmp_1","text":"KMP\u662f\u7531Knuth\u3001Pratt\u548cMorris\u57281977\u5e74\u5171\u540c\u53d1\u5e03\u7684\u4e00\u4e2a\u7b97\u6cd5\u3002","title":"\u4ec0\u4e48\u662fKMP\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#kmp_2","text":"KMP\u7b97\u6cd5\u80fd\u591f\u9ad8\u6548\u5730\u8fdb\u884c\u5355\u6a21\u5f0f\u5339\u914d\uff08\u5373\u5728\u6587\u672c\u4e32 S S \u4e2d\u67e5\u627e\u6a21\u5f0f\u4e32 P P \uff09\u3002","title":"KMP\u7b97\u6cd5\u7684\u4f5c\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_22","text":"\u5bf9\u4e8e\u5728\u6587\u672c\u4e32 s s \u4e2d\u67e5\u627e\u6a21\u5f0f\u4e32 p p \u4f4d\u7f6e\u7684\u95ee\u9898\uff08\u5373\u5355\u6a21\u5f0f\u5339\u914d\uff09\uff0c\u6211\u4eec\u6700\u5148\u60f3\u5230\u7684\u662f\u901a\u8fc7\u53cc\u91cd\u5faa\u73af\u5b9e\u73b0\uff0c\u5916\u5c42\u5faa\u73af\u904d\u5386 s s \u7684\u6bcf\u4e00\u4e2a\u4e0b\u6807\uff0c\u5185\u5c42\u5faa\u73af\u904d\u5386 p p \u7684\u6bcf\u4e00\u4e2a\u4e0b\u6807\uff0c\u4f9d\u6b21\u8fdb\u884c\u6bd4\u8f83\u5373\u53ef\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a // find p[] in s[] for ( int i = 1 ; s [ i ]; i ++ ){ bool flag = true ; for ( int j = 1 ; p [ j ]; j ++ ){ if ( s [ i + j -1 ] != p [ j ]){ flag = false ; break ; } } } \u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \uff0c\u5f53\u6570\u636e\u8303\u56f4\u7a0d\u5927\u65f6\u5c31\u4f1a\u8d85\u65f6\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4f18\u5316\u5462\uff1f\u901a\u8fc7KMP\u7b97\u6cd5\u53ef\u4ee5\u5927\u5927\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5728\u4ecb\u7ecdKMP\u7b97\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5148\u4e86\u89e3 \u524d\u7f00\u51fd\u6570 \u7684\u77e5\u8bc6\u3002","title":"\u5355\u6a21\u5f0f\u5339\u914d\u7684\u6734\u7d20\u505a\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_23","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5b57\u7b26\u4e32 s s \uff0c\u5176 \u524d\u7f00\u51fd\u6570 \u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4 \\pi \\pi \u3002\u5176\u4e2d \\pi[i] \\pi[i] \u7684\u5b9a\u4e49\u662f\uff1a \u5982\u679c\u5b50\u4e32 s[0 \\cdots i] s[0 \\cdots i] \u6709\u4e00\u5bf9\u76f8\u7b49\u7684\u771f\u524d\u7f00\u4e0e\u771f\u540e\u7f00\uff1a s[0 \\cdots k-1] s[0 \\cdots k-1] \u548c s[i-(k-1) \\cdots i] s[i-(k-1) \\cdots i] \uff0c\u90a3\u4e48 \\pi[i] \\pi[i] \u5c31\u662f\u8fd9\u4e2a\u76f8\u7b49\u7684\u771f\u524d\u7f00\uff08\u6216\u771f\u540e\u7f00\uff09\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f \\pi[i]=k \\pi[i]=k \uff1b \u5982\u679c\u4e0d\u6b62\u6709\u4e00\u5bf9\u76f8\u7b49\u7684\uff0c\u90a3\u4e48 \\pi[i] \\pi[i] \u5c31\u662f\u5176\u4e2d\u6700\u957f\u7684\u90a3\u4e00\u5bf9\u7684\u957f\u5ea6\uff1b \u5982\u679c\u6ca1\u6709\u76f8\u7b49\u7684\uff0c\u90a3\u4e48 \\pi[i]=0 \\pi[i]=0 \u3002 \u7b80\u5355\u6765\u8bf4 \\pi[i] \\pi[i] \u5c31\u662f\uff0c\u5b50\u4e32 s[0 \\cdots i] s[0 \\cdots i] \u6700\u957f\u76f8\u7b49\u7684\u771f\u524d\u7f00\u4e0e\u771f\u540e\u7f00\u7684\u957f\u5ea6\u3002 \u7528\u6570\u5b66\u8bed\u8a00\u63cf\u8ff0\u5982\u4e0b\uff1a \\pi[i]=\\max_{k=0 \\cdots i}\\{k:s[0 \\cdots k-1]=s[i-(k-1) \\cdots i]\\} \\pi[i]=\\max_{k=0 \\cdots i}\\{k:s[0 \\cdots k-1]=s[i-(k-1) \\cdots i]\\} \u7279\u522b\u7684\uff0c \\pi[0]=0 \\pi[0]=0 \u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32 cococola \uff0c \\pi[0]=0 \\pi[0]=0 \uff0c\u56e0\u4e3a c \u6ca1\u6709\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\uff0c\u6839\u636e\u89c4\u5b9a\u4e3a0 \\pi[1]=0 \\pi[1]=0 \uff0c\u56e0\u4e3a co \u6ca1\u6709\u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00 \\pi[2]=1 \\pi[2]=1 \uff0c\u56e0\u4e3a coc \u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u53ea\u6709 c \uff0c\u957f\u5ea6\u4e3a1 \\pi[3]=2 \\pi[3]=2 \uff0c\u56e0\u4e3a coco \u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u53ea\u6709 co \uff0c\u957f\u5ea6\u4e3a2 \\pi[4]=3 \\pi[4]=3 \uff0c\u56e0\u4e3a cococ \u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u6709 c \u548c coc \uff0c\u6700\u957f\u7684\u957f\u5ea6\u4e3a3 \\pi[5]=4 \\pi[5]=4 \uff0c\u56e0\u4e3a cococo \u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u6709 co \u548c coco \uff0c\u6700\u957f\u7684\u957f\u5ea6\u4e3a4 \\pi[6]=0 \\pi[6]=0 \uff0c\u56e0\u4e3a cococol \u6ca1\u6709\u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00 \\pi[7]=0 \\pi[7]=0 \uff0c\u56e0\u4e3a cococola \u6ca1\u6709\u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00 \u5373\u5b57\u7b26\u4e32 cococola \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0,0,1,2,3,4,0,0] [0,0,1,2,3,4,0,0] \u3002 \u540c\u7406\u53ef\u4ee5\u8ba1\u7b97\u5b57\u7b26\u4e32: abcabcd \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0,0,0,1,2,3,0] [0,0,0,1,2,3,0] \u3002 aabaaab \u7684\u524d\u7f00\u51fd\u6570\u4e3a [0,1,0,1,2,2,3] [0,1,0,1,2,2,3] \u3002","title":"\u4ec0\u4e48\u662f\u524d\u7f00\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_24","text":"\u4e00\u4e2a\u76f4\u63a5\u6309\u7167\u5b9a\u4e49\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u7684\u7b97\u6cd5\uff1a \u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u4ee5 i=1\\to n-1 i=1\\to n-1 \u7684\u987a\u5e8f\u8ba1\u7b97\u524d\u7f00\u51fd\u6570 \\pi[i] \\pi[i] \u7684\u503c\u3002 \u4ee4\u53d8\u91cf j j \u4ece\u6700\u5927\u7684\u771f\u524d\u7f00\u957f\u5ea6 i i \u5f00\u59cb\u5c1d\u8bd5\u3002 \u5982\u679c\u5f53\u524d\u957f\u5ea6\u4e0b\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u76f8\u7b49\uff0c\u5219\u6b64\u65f6\u957f\u5ea6\u4e3a \\pi[i] \\pi[i] \uff0c\u5426\u5219\u4ee4 j j \u81ea\u51cf1\uff0c\u7ee7\u7eed\u5339\u914d\uff0c\u76f4\u5230 j=0 j=0 \u3002 \u5982\u679c j=0 j=0 \u5e76\u4e14\u6ca1\u6709\u4efb\u4f55\u4e00\u6b21\u5339\u914d\uff0c\u5219\u4ee4 \\pi[i]=0 \\pi[i]=0 \u5e76\u79fb\u81f3 i+1 i+1 \u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a vector < int > prefix_function ( string s ){ int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 ; i < n ; i ++ ) for ( int j = i ; j >= 0 ; j -- ) if ( s . substr ( 0 , j ) == s . substr ( i - j + 1 , j )){ pi [ i ] = j ; break ; } return pi ; } \u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3) O(n^3) \uff0c\u5177\u6709\u5f88\u5927\u7684\u4f18\u5316\u7a7a\u95f4\u3002","title":"\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u7684\u6734\u7d20\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_25","text":"\u7b2c\u4e00\u4e2a\u4f18\u5316 \u6211\u4eec\u89c2\u5bdf\u5230\u76f8\u90bb\u7684\u524d\u7f00\u51fd\u6570\u503c\u81f3\u591a\u589e\u52a01\u3002 \u56e0\u6b64\u53ea\u9700\u5982\u6b64\u8003\u8651\uff1a\u5f53\u53d6\u4e00\u4e2a\u5c3d\u53ef\u80fd\u5927\u7684 \\pi[i+1] \\pi[i+1] \u65f6\uff0c\u5fc5\u7136\u8981\u6c42\u65b0\u589e\u7684 s[i+1] s[i+1] \u4e5f\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5b57\u7b26\u5339\u914d\uff0c\u5373 s[i+1]=s[\\pi[i]] s[i+1]=s[\\pi[i]] \uff0c\u6b64\u65f6 \\pi[i+1]=\\pi[i]+1 \\pi[i+1]=\\pi[i]+1 \u3002 \\underbrace{\\overbrace{s_0 ~ s_1 ~ s_2}^{\\pi[i]=3} ~ s_3}_{\\pi[i+1]=4} ~ \\dots ~ \\underbrace{\\overbrace{s_{i-2} ~ s_{i-1} ~ s_i}^{\\pi[i]=3} ~ s_{i+1}}_{\\pi[i+1]=4} \\underbrace{\\overbrace{s_0 ~ s_1 ~ s_2}^{\\pi[i]=3} ~ s_3}_{\\pi[i+1]=4} ~ \\dots ~ \\underbrace{\\overbrace{s_{i-2} ~ s_{i-1} ~ s_i}^{\\pi[i]=3} ~ s_{i+1}}_{\\pi[i+1]=4} \u6240\u4ee5\u5f53\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4e0b\u6807\u65f6\uff0c\u524d\u7f00\u51fd\u6570\u503c\u8981\u4e48\u589e\u52a01\uff0c\u8981\u4e48\u4e0d\u53d8\uff0c\u8981\u4e48\u51cf\u5c11\u3002 \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a vector < int > prefix_function ( string s ){ int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 ; i < n ; i ++ ) for ( int j = pi [ i -1 ] + 1 ; j >= 0 ; j -- ) if ( s . substr ( 0 , j ) == s . substr ( i - j + 1 , j )){ pi [ i ] = j ; break ; } return pi ; } \u5728\u7ecf\u8fc7\u7b2c\u4e00\u6b21\u4f18\u5316\u7684\u7b97\u6cd5\u4e2d\uff0c\u8ba1\u7b97\u6bcf\u4e2a \\pi[i] \\pi[i] \u65f6\uff0c\u6700\u4f18\u60c5\u51b5\u662f\u7b2c\u4e00\u6b21\u5b57\u7b26\u4e32\u6bd4\u8f83\u5c31\u5b8c\u6210\u4e86\u5339\u914d\uff0c\u4e5f\u5c31\u662f\u57fa\u7840\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u662f n-1 \u6b21\u3002 \u800c\u7531\u4e8e\u5b58\u5728 j=pi[i-1]+1 (pi[0]=0) \u5bf9\u4e8e\u6700\u5927\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u770b\u51fa\u6bcf\u6b21\u53ea\u6709\u5728\u6700\u4f18\u60c5\u51b5\u624d\u4f1a\u4e3a\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u7684\u4e0a\u9650\u7d2f\u79ef 1 \uff0c\u800c\u6bcf\u6b21\u8d85\u8fc7\u4e00\u6b21\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u6d88\u8017\u7684\u662f\u4e4b\u540e\u6b21\u6570\u7684\u589e\u957f\u7a7a\u95f4\u3002 \u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u6700\u591a\u7684\u4e00\u79cd\u60c5\u51b5\uff1a\u81f3\u5c11 1 \u6b21\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u7684\u6d88\u8017\u548c\u6700\u591a n-2 n-2 \u6b21\u6bd4\u8f83\u6b21\u6570\u7684\u79ef\u7d2f\uff0c\u6b64\u65f6\u5b57\u7b26\u4e32\u6bd4\u8f83\u6b21\u6570\u4e3a n-1 + n-2 = 2n-3 \u3002 \u53ef\u89c1\u7ecf\u8fc7\u7b2c\u4e00\u6b21\u4f18\u5316\uff0c\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u53ea\u9700\u8981\u8fdb\u884c O(n) O(n) \u6b21\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u603b\u590d\u6742\u5ea6\u964d\u4e3a\u4e86 O(n^2) O(n^2) \u3002 \u7b2c\u4e8c\u4e2a\u4f18\u5316 \u5728\u7b2c\u4e00\u4e2a\u4f18\u5316\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u8ba1\u7b97 \\pi[i+1] \\pi[i+1] \u65f6\u7684\u6700\u4f18\u60c5\u51b5\uff1a s[i+1]=s[\\pi[i]] s[i+1]=s[\\pi[i]] \uff0c\u6b64\u65f6 \\pi[i+1]=\\pi[i]+1 \\pi[i+1]=\\pi[i]+1 \u3002\u73b0\u5728\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u8ba8\u8bba\u5f53 s[i+1] \\neq s[\\pi[i]] s[i+1] \\neq s[\\pi[i]] \u65f6\u5982\u4f55\u8df3\u8f6c\u3002 \u5931\u914d\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u627e\u5230\u5bf9\u4e8e\u5b50\u4e32 s[0 \\cdots i] s[0 \\cdots i] \uff0c\u4ec5\u6b21\u4e8e \\pi[i] \\pi[i] \u7684\u7b2c\u4e8c\u957f\u5ea6 j j \uff0c\u4f7f\u5f97\u5728\u4f4d\u7f6e i i \u7684\u524d\u7f00\u6027\u8d28\u4efb\u5f97\u4ee5\u4fdd\u6301\uff0c\u5373 s[0 \\cdots j-1]=s[i-j+1 \\cdots i] s[0 \\cdots j-1]=s[i-j+1 \\cdots i] \u3002 \\overbrace{\\underbrace{s_0 ~ s_1}_j ~ s_2 ~ s_3}^{\\pi[i]} ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_j}^{\\pi[i]} ~ s_{i+1} \\overbrace{\\underbrace{s_0 ~ s_1}_j ~ s_2 ~ s_3}^{\\pi[i]} ~ \\dots ~ \\overbrace{s_{i-3} ~ s_{i-2} ~ \\underbrace{s_{i-1} ~ s_{i}}_j}^{\\pi[i]} ~ s_{i+1} \u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u8fd9\u6837\u7684\u957f\u5ea6 j j \uff0c\u90a3\u4e48\u4ec5\u9700\u8981\u518d\u6b21\u6bd4\u8f83 s[i+1] s[i+1] \u548c s[j] s[j] \u3002\u5982\u679c\u5b83\u4eec\u76f8\u7b49\uff0c\u90a3\u4e48\u5c31\u6709 \\pi[i+1]=j+1 \\pi[i+1]=j+1 \u3002\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5b50\u4e32 s[0 \\cdots i] s[0 \\cdots i] \u4ec5\u6b21\u4e8e j j \u7684\u7b2c\u4e8c\u957f\u5ea6 j^{(2)} j^{(2)} \uff0c\u4f7f\u5f97\u524d\u7f00\u6027\u8d28\u5f97\u4ee5\u4fdd\u6301\uff0c\u5982\u6b64\u53cd\u590d\u76f4\u5230 j=0 j=0 \u3002\u5982\u679c s[i+1] \\neq s[0] s[i+1] \\neq s[0] \uff0c\u5219 \\pi[i+1]=0 \\pi[i+1]=0 \u3002 \u56e0\u4e3a s[0 \\cdots \\pi[i]-1]=s[i-\\pi[i]+1 \\cdots i] s[0 \\cdots \\pi[i]-1]=s[i-\\pi[i]+1 \\cdots i] \uff0c\u6240\u4ee5\u5bf9\u4e8e s[0 \\cdots i] s[0 \\cdots i] \u7684\u7b2c\u4e8c\u957f\u5ea6 j j \uff0c\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff1a s[0 \\cdots j-1]=s[i-j+1 \\cdots i]=s[\\pi[i]-j] \\cdots \\pi[i]-1 s[0 \\cdots j-1]=s[i-j+1 \\cdots i]=s[\\pi[i]-j] \\cdots \\pi[i]-1 \u4e5f\u5c31\u662f\u8bf4 j j \u7b49\u4ef7\u4e8e\u5b50\u4e32 s[\\pi[i]-1] s[\\pi[i]-1] \u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c\u5373 j=\\pi[\\pi[i]-1] j=\\pi[\\pi[i]-1] \u3002\u540c\u7406\uff0c\u6b21\u4e8e j j \u7684\u7b2c\u4e8c\u957f\u5ea6\u7b49\u4ef7\u4e8e s[j-1] s[j-1] \u7684\u524d\u7f00\u51fd\u6570\u503c\uff0c j^{(2)}=\\pi[j-1] j^{(2)}=\\pi[j-1] \u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5173\u4e8e j j \u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a j^{(n)}=\\pi[j^{(n-1)}-1]\uff0c(j^{(n-1)}>0) j^{(n)}=\\pi[j^{(n-1)}-1]\uff0c(j^{(n-1)}>0) \u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a vector < int > prefix_function ( string s ){ int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 ; i < n ; i ++ ){ int j = pi [ i -1 ]; while ( j > 0 && s [ i ] != s [ j ]) j = pi [ j -1 ]; if ( s [ i ] == s [ j ]) j ++ ; pi [ i ] = j ; } return pi ; } \u7ecf\u8fc7\u7b2c\u4e8c\u6b21\u6539\u8fdb\u7684\u7b97\u6cd5\u4e0d\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u4e14\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230\u4e86 O(n) O(n) \u3002","title":"\u8ba1\u7b97\u524d\u7f00\u51fd\u6570\u7684\u9ad8\u6548\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#kmp_3","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6587\u672c\u4e32 s s \u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a m m \u7684\u6a21\u5f0f\u4e32 p p \u3002 \u6211\u4eec\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32 p+\\#+s p+\\#+s \uff0c\u5176\u4e2d \\# \\# \u4f5c\u4e3a\u4e00\u4e2a\u65e2\u4e0d\u51fa\u73b0\u5728 p p \u4e2d\u4e5f\u4e0d\u51fa\u73b0\u5728 s s \u4e2d\u7684\u5206\u9694\u7b26\u3002\u63a5\u4e0b\u6765\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u51fd\u6570\u3002\u73b0\u5728\u8003\u8651\u8be5\u524d\u7f00\u51fd\u6570\u9664\u53bb\u6700\u5f00\u59cb m+1 m+1 \u4e2a\u503c\uff08\u5373\u5c5e\u4e8e\u5b57\u7b26\u4e32 p p \u548c\u5206\u9694\u7b26\u7684\u51fd\u6570\u503c\uff09\u540e\u5176\u4f59\u51fd\u6570\u503c\u7684\u610f\u4e49\u3002\u6839\u636e\u5b9a\u4e49\uff0c \\pi[i] \\pi[i] \u4e3a\u53f3\u7aef\u70b9\u5728 i i \u4e14\u540c\u65f6\u4e3a\u4e00\u4e2a\u524d\u7f00\u7684\u6700\u957f\u771f\u5b50\u4e32\u7684\u957f\u5ea6\uff0c\u5177\u4f53\u5230\u6211\u4eec\u7684\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u503c\u4e3a\u4e0e p p \u7684\u524d\u7f00\u76f8\u540c\u4e14\u53f3\u7aef\u70b9\u4f4d\u4e8e i i \u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002\u7531\u4e8e\u5206\u9694\u7b26\u7684\u5b58\u5728\uff0c\u8be5\u957f\u5ea6\u4e0d\u53ef\u80fd\u8d85\u8fc7 m m \u3002\u800c\u5982\u679c\u7b49\u5f0f \\pi[i]=m \\pi[i]=m \u6210\u7acb\uff0c\u5219\u610f\u5473\u7740 p p \u5b8c\u6574\u51fa\u73b0\u5728\u8be5\u4f4d\u7f6e\uff08\u5373\u5176\u53f3\u7aef\u70b9\u4f4d\u4e8e\u4f4d\u7f6e i i \uff09\u3002\u6ce8\u610f\u8be5\u4f4d\u7f6e\u7684\u4e0b\u6807\u662f\u5bf9\u5b57\u7b26\u4e32 p+\\#+s p+\\#+s \u800c\u8a00\u7684\u3002 \u56e0\u6b64\u5982\u679c\u5728\u67d0\u4e00\u4f4d\u7f6e i i \u6709 \\pi[i]=m \\pi[i]=m \u6210\u7acb\uff0c\u5219\u5b57\u7b26\u4e32 p p \u5728\u5b57\u7b26\u4e32 s s \u7684 i-(m-1)-(m+1)=i-2m i-(m-1)-(m+1)=i-2m \u5904\u51fa\u73b0\u3002 \u6b63\u5982\u5728\u524d\u7f00\u51fd\u6570\u7684\u8ba1\u7b97\u4e2d\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u524d\u7f00\u51fd\u6570\u7684\u503c\u6c38\u8fdc\u4e0d\u8d85\u8fc7\u4e00\u7279\u5b9a\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u9700\u8981\u5b58\u50a8\u6574\u4e2a\u5b57\u7b26\u4e32\u4ee5\u53ca\u6574\u4e2a\u524d\u7f00\u51fd\u6570\uff0c\u800c\u53ea\u9700\u8981\u4e8c\u8005\u5f00\u5934\u7684\u4e00\u90e8\u5206\u3002\u5728\u6211\u4eec\u8fd9\u79cd\u60c5\u51b5\u4e0b\u610f\u5473\u7740\u53ea\u9700\u8981\u5b58\u50a8\u5b57\u7b26\u4e32 p+\\# p+\\# \u4ee5\u53ca\u76f8\u5e94\u7684\u524d\u7f00\u51fd\u6570\u503c\u5373\u53ef\u3002\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u8bfb\u5165\u5b57\u7b26\u4e32 s s \u7684\u4e00\u4e2a\u5b57\u7b26\u5e76\u8ba1\u7b97\u5f53\u524d\u4f4d\u7f6e\u7684\u524d\u7f00\u51fd\u6570\u503c\u3002 \u56e0\u6b64KMP\u7b97\u6cd5\u4ec5\u4f7f\u7528 O(n+m) O(n+m) \u7684\u65f6\u95f4\u4ee5\u53ca O(n) O(n) \u7684\u7a7a\u95f4\u5c31\u80fd\u89e3\u51b3\u5355\u6a21\u5f0f\u5339\u914d\u95ee\u9898\u3002","title":"KMP\u7b97\u6cd5\u7684\u7406\u8bba\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#kmp_4","text":"\u7ed3\u6784\u4f53\u5c01\u88c5\u7684KMP\u6a21\u677f\uff1a struct kmp { int pi [ 100010 ]; vector < int > prefix_function ( string s ){ int n = ( int ) s . length (); vector < int > pi ( n ); for ( int i = 1 , j = 0 ; i < n ; i ++ ){ while ( j && s [ i ] != s [ j ]) j = pi [ j -1 ]; if ( s [ i ] == s [ j ]) j ++ ; pi [ i ] = j ; } return pi ; } void kmp_function (){ for ( int i = 0 , j = 0 ; i < n ; i ++ ){ while ( j && s [ i ] != s [ j ]) j = pi [ j -1 ]; if ( s [ i ] == s [ j ]) j ++ ; if ( n == j ){ // matched j = pi [ j -1 ]; } } } };","title":"KMP\u7b97\u6cd5\u7684\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#ac","text":"","title":"AC\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#ac_1","text":"AC\u81ea\u52a8\u673a\u662f\u4e00\u79cd\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff0c\u5b83\u662f\u4ee5Trie\u7684\u7ed3\u6784\u4e3a\u57fa\u7840\uff0c\u7ed3\u5408KMP\u7684\u601d\u60f3\u5efa\u7acb\u7684\u3002","title":"\u4ec0\u4e48\u662fAC\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#ac_2","text":"AC\u81ea\u52a8\u673a\u80fd\u591f\u9ad8\u6548\u5730\u8fdb\u884c\u591a\u6a21\u5f0f\u5339\u914d\uff0c\u5373\u5728\u4e00\u4e2a\u6587\u672c\u4e32\u4e2d\u5339\u914d\u591a\u4e2a\u6a21\u5f0f\u4e32\u3002","title":"AC\u81ea\u52a8\u673a\u7684\u4f5c\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#ac_3","text":"AC\u81ea\u52a8\u673a\u7684\u8fd0\u884c\u539f\u7406\uff1a\u6784\u5efa\u5b57\u5178\u56fe\u5b9e\u73b0\u81ea\u52a8\u8df3\u8f6c\uff0c\u6784\u5efa\u5931\u914d\u6307\u9488\u5b9e\u73b0\u591a\u6a21\u5f0f\u5339\u914d\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5efa\u7acb\u4e00\u4e2aAC\u81ea\u52a8\u673a\u9700\u8981\u4e24\u6b65\uff1a Trie\u7ed3\u6784\uff1a\u5c06\u6240\u6709\u6a21\u5f0f\u4e32\u6784\u5efa\u6210\u4e00\u9897Trie\u6811 KMP\u601d\u60f3\uff1a\u5bf9Trie\u6811\u4e0a\u6240\u6709\u7684\u7ed3\u70b9\u6784\u9020\u5931\u914d\u6307\u9488","title":"AC\u81ea\u52a8\u673a\u7684\u7406\u8bba\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#trie_5","text":"Trie\u6811\u7684\u6784\u5efa\u548cTrie\u7684insert\u64cd\u4f5c\u4e00\u6a21\u4e00\u6837\u3002 Trie\u6811\u7684\u7ed3\u70b9\u8868\u793a\u67d0\u4e2a\u6a21\u5f0f\u4e32\u7684\u524d\u7f00\uff08\u4e5f\u79f0\u4e3a\u72b6\u6001\uff09\uff0c\u800cTrie\u6811\u7684\u8fb9\u5c31\u662f\u72b6\u6001\u7684\u8f6c\u79fb\u3002","title":"\u6784\u5efaTrie\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_26","text":"\u5931\u914d\u6307\u9488\u5373 fail fail \u6307\u9488\u3002","title":"\u6784\u9020\u5931\u914d\u6307\u9488"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#failfail","text":"\u6784\u5efa fail fail \u6307\u9488\uff0c\u53ef\u4ee5\u7c7b\u6bd4KMP\u4e2d\u6784\u9020next\u6307\u9488\uff08\u5373pi[]\uff09\u7684\u601d\u60f3\u3002 \u5229\u7528\u5df2\u7ecf\u6c42\u51fa fail fail \u6307\u9488\u7684\u7ed3\u70b9\u63a8\u5bfc\u51fa\u5f53\u524d\u7ed3\u70b9\u7684 fail fail \u6307\u9488\uff0c\u4e00\u822c\u6765\u8bf4\u901a\u8fc7BFS\u5b9e\u73b0\u5373\u53ef\uff1a \u8003\u8651Trie\u4e2d\u5f53\u524d\u7684\u7ed3\u70b9 u u \uff0c u u \u7684\u7236\u7ed3\u70b9\u662f p p \u3002 \u5047\u8bbe\u6df1\u5ea6\u5c0f\u4e8e u u \u7684\u6240\u6709\u7ed3\u70b9\u7684 fail fail \u6307\u9488\u90fd\u5df2\u7ecf\u6c42\u5f97\uff0c\u90a3\u4e48 p p \u7684 fail fail \u6307\u9488\u663e\u7136\u5df2\u7ecf\u6c42\u5f97\u3002 \u6211\u4eec\u8df3\u8f6c\u5230 p p \u7684 fail fail \u6307\u9488\u6307\u5411\u7684\u7ed3\u70b9 fail[p] fail[p] \uff1a \u5982\u679c\u7ed3\u70b9 fail[p] fail[p] \u7684\u5b50\u7ed3\u70b9 w w \u5b58\u5728\uff0c\u5219\u8ba9 u u \u7684 fail fail \u6307\u9488\u6307\u5411\u8fd9\u4e2a\u7ed3\u70b9 w w \u3002 \u5982\u679c\u7ed3\u70b9 fail[p] fail[p] \u7684\u5b50\u7ed3\u70b9 w w \u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u6211\u4eec\u7ee7\u7eed\u5bfb\u627e fail[fail[p]] fail[fail[p]] \u6307\u9488\u6307\u5411\u7684\u7ed3\u70b9\uff0c\u76f4\u5230 fail fail \u6307\u9488\u6307\u5411\u6839\u8282\u70b9\u3002 \u5982\u6b64\u5c31\u5b8c\u6210\u4e86 fail fail \u6307\u9488\u7684\u6784\u5efa\u3002","title":"failfail \u6307\u9488\u7684\u57fa\u7840\u601d\u60f3"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#failfail-next","text":"\u5171\u540c\u70b9\uff1a\u4e24\u8005\u90fd\u662f\u5728 \u5931\u914d \u65f6\u7528\u4e8e\u8df3\u8f6c\u4ece\u800c\u907f\u514d\u5927\u91cf\u56de\u6714\u7684\u6307\u9488\u3002 \u4e0d\u540c\u70b9\uff1aKMP\u8981\u6c42 \u6700\u957f\u76f8\u540c\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00 \uff0cAC\u81ea\u52a8\u673a\u8981\u6c42 \u76f8\u540c\u540e\u7f00 \u3002 KMP\u7528\u4e8e\u5355\u6a21\u5f0f\u5339\u914d\uff0cAC\u81ea\u52a8\u673a\u7528\u4e8e\u591a\u6a21\u5f0f\u5339\u914d\u3002 fail fail \u6307\u9488\u6307\u5411\u7684\u7ed3\u70b9\u53ef\u80fd\u5bf9\u5e94\u7740\u524d\u7f00\u4e0d\u540c\u7684\u6a21\u5f0f\u4e32\u3002 AC\u81ea\u52a8\u673a\u5728\u5339\u914d\u6587\u672c\u4e32\u65f6\uff0c\u540c\u4e00\u4f4d\u4e0a\u53ef\u80fd\u5339\u914d\u591a\u4e2a\u6a21\u5f0f\u4e32\u3002 \u56e0\u6b64 fail fail \u6307\u9488\u4f1a\u5728\u5b57\u5178\u6811\u4e0a\u7684\u7ed3\u70b9\u6765\u56de\u8df3\u8f6c\uff0cnext\u6307\u9488\u5219\u662f\u5728\u7ebf\u6027\u7ed3\u6784\u4e0a\u8df3\u8f6c\u3002","title":"failfail \u6307\u9488\u4e0enext\u6307\u9488\u7684\u6bd4\u8f83"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#ac_4","text":"\u4e3b\u8981\u6846\u67b6\uff1a #include <bits/stdc++.h> using namespace std ; const int N = 1e6 + 10 , M = 256 ; int trie [ N ][ M ]; // Trie\u6811 int cntword [ N ]; // \u6807\u8bb0\u662f\u5426\u4e3a\u6a21\u5f0f\u4e32\u7684\u7ed3\u5c3e int fail [ N ]; // fail\u6307\u9488 int cnt = 0 ; // Trie\u6811\u7ed3\u70b9\u7684\u4e0b\u6807 int n ; string s ; int main (){ cin >> n ; for ( int i = 0 ; i < n ; i ++ ){ cin >> s ; insert ( s ); // \u63d2\u5165\u6a21\u5f0f\u4e32 } build (); // \u6784\u5efafail\u6307\u9488 cin >> s ; cout << query ( s ); // \u5339\u914d\u51fd\u6570 return 0 ; } \u63a5\u4e0b\u6765\u5c06\u4f9d\u6b21\u4ecb\u7ecdinsert\u3001build\u548cquery\u51fd\u6570\uff1a insert - \u6784\u5efaTrie\u6811 void insert ( string s ){ int root = 0 ; for ( int i = 0 ; s [ i ]; i ++ ){ int next = s [ i ]; if ( ! trie [ root ][ next ]){ trie [ root ][ next ] =++ cnt ; } root = trie [ root ][ next ]; } cntword [ root ] ++ ; } \u4e0eTrie\u6811\u7684insert\u4e00\u6a21\u4e00\u6837\uff0c\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u3002 build - \u6784\u5efa fail fail \u6307\u9488 void build (){ queue < int > q ; for ( int i = 0 ; i < M ; i ++ ){ if ( trie [ 0 ][ i ]){ fail [ trie [ 0 ][ i ]] = 0 ; q . push ( trie [ 0 ][ i ]); } } while ( ! q . empty ()){ int now = q . front (); q . pop (); for ( int i = 0 ; i < M ; i ++ ){ if ( trie [ now ][ i ]){ fail [ trie [ now ][ i ]] = trie [ fail [ now ]][ i ]; q . push ( trie [ now ][ i ]); } else { trie [ now ][ i ] = trie [ fail [ now ]][ i ]; } } } } \u9996\u5148\u58f0\u660e\u961f\u5217 q q \u7528\u4e8eBFS\uff0c\u8fd9\u91cc\u7684\u5b57\u5178\u6811\u6839\u8282\u70b9\u4e3a0\uff0c\u6211\u4eec\u5c06\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e00\u4e00\u5165\u961f\u3002 \u7136\u540e\u5f00\u59cb\u8fdb\u884cBFS\uff0c\u6bcf\u6b21\u53d6\u51fa\u961f\u9996\u7ed3\u70b9 now now \uff0c\u6c42 now now \u7684\u5b50\u8282\u70b9\u7684 fail fail \u6307\u9488\u3002 \u63a5\u7740\u904d\u5386\u5b57\u7b26\u96c6\uff1a \u5982\u679c\u5b57\u7b26 i i \u5bf9\u5e94\u7684\u5b50\u7ed3\u70b9\u5b58\u5728\uff0c\u6211\u4eec\u5c31\u5c06\u8be5\u5b50\u7ed3\u70b9\u7684 fail fail \u6307\u9488\u8d4b\u503c\u4e3a fail[now] fail[now] \u7684\u5b57\u7b26 i i \u5bf9\u5e94\u7684\u7ed3\u70b9\u3002 \u5426\u5219\u5c06 fail[now] fail[now] \u7684\u5b57\u7b26 i i \u5bf9\u5e94\u7684\u5b50\u7ed3\u70b9\u7f16\u53f7\u8d4b\u503c\u7ed9 now now \u3002 \u4ee3\u7801\u4e2d\u5b58\u5728\u4e24\u5904\u4e0e\u4e4b\u524d\u7684\u7406\u8bba\u5206\u6790\u4e0d\u4e00\u81f4\u4e4b\u5904\uff1a \u9996\u5148\uff0c\u6309\u7167\u5206\u6790\uff0c\u5e94\u8be5\u4f7f\u7528while\u5faa\u73af\uff0c\u8ba9 fail fail \u6307\u9488\u4e0d\u505c\u8df3\u8f6c\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u5bf9\u5e94\u7ed3\u70b9\uff0c\u4f46\u6b64\u5904\u5e76\u975e\u5982\u6b64\u3002 \u5176\u6b21\uff0c\u6b64\u5904\u76f4\u63a5\u5c06 fail[now] fail[now] \u7684\u5b50\u7ed3\u70b9\u8d4b\u503c\u4e3a now now \u7684\u5b50\u7ed3\u70b9\u3002 \u8fd9\u4e24\u5904\u5730\u65b9\u7ed3\u5408\u5728\u4e00\u8d77\u5b8c\u6210\u4e86\u8def\u5f84\u538b\u7f29\uff0c\u80fd\u5728 O(1) O(1) \u7684\u65f6\u95f4\u5185\u5bf9\u5355\u4e2a\u7ed3\u70b9\u8fdb\u884c fail fail \u6307\u9488\u7684\u6784\u9020\u3002 query - \u5339\u914d\u51fd\u6570 int query ( string s ){ int now = 0 , ans = 0 ; for ( int i = 0 ; s [ i ]; i ++ ){ now = trie [ now ][( int ) s [ i ]]; for ( int j = now ; j && cntword [ j ] != -1 ; j = fail [ j ]){ ans += cntword [ j ]; cntword [ j ] = -1 ; } } return ans ; } \u58f0\u660e now now \u4f5c\u4e3aTrie\u4e0a\u5f53\u524d\u5339\u914d\u5230\u7684\u7ed3\u70b9\uff0c ans ans \u5373\u8fd4\u56de\u7684\u7b54\u6848 \u5faa\u73af\u904d\u5386\u6587\u672c\u4e32\uff0c now now \u5728Trie\u4e0a\u8ddf\u8e2a\u5f53\u524d\u5b57\u7b26\u3002 \u5229\u7528 fail fail \u6307\u9488\u627e\u51fa\u6240\u6709\u5339\u914d\u7684\u6a21\u5f0f\u4e32\uff0c\u7d2f\u52a0\u5230\u7b54\u6848\u4e2d\u3002 \u8fd9\u91cc\u7684 now now \u5e76\u4e00\u76f4\u5728\u5f80Trie\u540e\u8df3\u8f6c\uff0c\u800c\u662f\u5728\u56fe\u4e0a\u7a7f\u68ad\u8df3\u8f6c\u3002","title":"AC\u81ea\u52a8\u673a\u7684\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_27","text":"\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u4e09\u79cd\u5e38\u7528\u7684\u81ea\u52a8\u673a\uff0c\u4f46\u662f\u8fd9\u4e09\u79cd\u7b97\u6cd5\u548c\u201c\u81ea\u52a8\u673a\u201d\u4f3c\u4e4e\u6beb\u65e0\u5173\u8054\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u8ba4\u8bc6\u81ea\u52a8\u673a\u3002","title":"\u603b\u7ed3\u4e0e\u62d3\u5c55"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_28","text":"\u4e00\u4e2a\u786e\u5b9a\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\uff08DFA\uff09\u662f\u7531\u4ee5\u4e0b\u4e94\u4e2a\u90e8\u5206\uff1a \u5b57\u7b26\u96c6 \\sum \\sum \uff0c\u8be5\u81ea\u52a8\u673a\u53ea\u80fd\u8f93\u5165\u8fd9\u4e9b\u5b57\u7b26\u3002 \u72b6\u6001\u96c6\u5408 Q Q \u3002\u5982\u679c\u628a\u4e00\u4e2aDFA\u770b\u6210\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u90a3\u4e48DFA\u4e2d\u7684\u72b6\u6001\u5c31\u76f8\u5f53\u4e8e\u56fe\u4e0a\u7684\u9876\u70b9\u3002 \u8d77\u59cb\u72b6\u6001 s s \uff0c s\\in Q s\\in Q \uff0c\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u72b6\u6001\u3002 \u63a5\u53d7\u72b6\u6001 F F \uff0c F\\subseteq Q F\\subseteq Q \uff0c\u662f\u4e00\u7ec4\u7279\u6b8a\u7684\u72b6\u6001\u3002 \u8f6c\u79fb\u51fd\u6570 \\delta \\delta \uff0c \\delta \\delta \u662f\u4e00\u4e2a\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u7684\u51fd\u6570\uff0c\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u662f\u4e00\u4e2a\u72b6\u6001\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u96c6\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u628a\u4e00\u4e2aDFA\u770b\u6210\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u90a3\u4e48DFA\u4e2d\u7684\u8f6c\u79fb\u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\u9876\u70b9\u95f4\u7684\u8fb9\uff0c\u800c\u6bcf\u6761\u8fb9\u4e0a\u90fd\u6709\u4e00\u4e2a\u5b57\u7b26\u3002 \u7ec4\u6210\u7684\u4e94\u5143\u7ec4 (Q,\\sum,\\delta,s,F) (Q,\\sum,\\delta,s,F) DFA\u7684\u4f5c\u7528\u5c31\u662f\u8bc6\u522b\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a\u81ea\u52a8\u673a A A \uff0c\u82e5\u5b83\u80fd\u8bc6\u522b\uff08\u63a5\u53d7\uff09\u5b57\u7b26\u4e32 S S \uff0c\u90a3\u4e48 A(S)=True A(S)=True \uff0c\u5426\u5219 A(S)=False A(S)=False \u3002 \u5f53\u4e00\u4e2aDFA\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c\u4ece\u521d\u59cb\u72b6\u6001\u8d77\u6309\u7167\u8f6c\u79fb\u51fd\u6570\u4e00\u4e2a\u4e00\u4e2a\u5b57\u7b26\u5730\u8f6c\u79fb\u3002\u5982\u679c\u8bfb\u5165\u5b8c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u540e\u4f4d\u4e8e\u4e00\u4e2a\u63a5\u53d7\u72b6\u6001\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2aDFA \u63a5\u53d7 \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u53cd\u4e4b\u6211\u4eec\u79f0\u8fd9\u4e2aDFA \u4e0d\u63a5\u53d7 \u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002 \u5982\u679c\u4e00\u4e2a\u72b6\u6001 v v \u6ca1\u6709\u5b57\u7b26 c c \u7684\u8f6c\u79fb\uff0c\u90a3\u4e48\u6211\u4eec\u4ee4 \\delta(v,c)=null \\delta(v,c)=null \uff0c\u800c null null \u53ea\u80fd\u8f6c\u79fb\u5230 null null \uff0c\u4e14 null null \u4e0d\u5c5e\u4e8e\u63a5\u53d7\u72b6\u6001\u96c6\u5408\u3002\u65e0\u6cd5\u8f6c\u79fb\u5230\u4efb\u4f55\u4e00\u4e2a\u63a5\u53d7\u72b6\u6001\u7684\u72b6\u6001\u90fd\u53ef\u4ee5\u89c6\u4f5c null null \uff0c\u6216\u8005\u8bf4\uff0c null null \u4ee3\u6307\u6240\u6709\u65e0\u6cd5\u8f6c\u79fb\u5230\u4efb\u4f55\u4e00\u4e2a\u63a5\u53d7\u72b6\u6001\u7684\u72b6\u6001\u3002 \u6211\u4eec\u62d3\u5c55\u5b9a\u4e49\u8f6c\u79fb\u51fd\u6570 \\delta \\delta \uff0c\u4ee4\u5176\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1a \\delta(v,S)=\\delta(\\delta(v,S[1],S[2\\cdots|S|])) \\delta(v,S)=\\delta(\\delta(v,S[1],S[2\\cdots|S|])) \uff0c\u62d3\u5c55\u540e\u7684\u8f6c\u79fb\u51fd\u6570\u5c31\u53ef\u4ee5\u8868\u793a\u4ece\u4e00\u4e2a\u72b6\u6001\u8d77\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u540e\u8f6c\u79fb\u5230\u7684\u72b6\u6001\u3002\u90a3\u4e48\uff0c A(S)=[\\delta(s,S)\\in F] A(S)=[\\delta(s,S)\\in F] \u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u8fc7\u5934\u6765\u770b\u770b\u4e4b\u524d\u5b66\u4e60\u7684\u4e09\u79cd\u5e38\u7528\u81ea\u52a8\u673a\u3002","title":"\u81ea\u52a8\u673a\u7684\u5f62\u5f0f\u5316\u5b9a\u4e49"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#trie_6","text":"\u5bf9\u4e8eTrie\uff1a \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u3002 \u63a5\u53d7\u72b6\u6001\u4e3a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u63d2\u5165\u5230Trie\u6811\u65f6\u5230\u8fbe\u7684\u72b6\u6001\u3002 \u8f6c\u79fb\u51fd\u6570\u4e3aTrie\u4e0a\u7684\u8fb9\u3002","title":"Trie"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#kmp_5","text":"KMP\u7b97\u6cd5\u53ef\u4ee5\u89c6\u4f5c\u81ea\u52a8\u673a\uff0c\u57fa\u4e8e\u5b57\u7b26\u4e32 s s \u7684KMP\u81ea\u52a8\u673a\uff1a \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u4ee5 s s \u4e3a\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u3002 \u63a5\u53d7\u72b6\u6001\u4e3a |s| |s| \u3002 \u8f6c\u79fb\u51fd\u6570\u4e3a\uff1a \\delta(i,c)=\\begin{cases}i+1&s[i+1]=c\\\\ 0&s[1]\\ne c\\land i=0\\\\ \\delta(\\pi(i),c)&s[i+1]\\ne c\\land i>0 \\end{cases} \\delta(i,c)=\\begin{cases}i+1&s[i+1]=c\\\\ 0&s[1]\\ne c\\land i=0\\\\ \\delta(\\pi(i),c)&s[i+1]\\ne c\\land i>0 \\end{cases}","title":"KMP\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#ac_5","text":"\u5bf9\u4e8eAC\u81ea\u52a8\u673a\uff1a \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u4ee5\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u4e3a\u540e\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662fTrie+KMP\u3002","title":"AC\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#1","text":"","title":"\u62d3\u5c551\uff1a\u5e38\u7528\u81ea\u52a8\u673a\u7684\u6df1\u5165"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#trie_7","text":"\u68c0\u7d22\u5b57\u7b26\u4e32 \\surd \\surd AC\u81ea\u52a8\u673a \\surd \\surd \u7ef4\u62a4\u5f02\u6216\u6781\u503c \u7ef4\u62a4\u5f02\u6216\u548c 01-trie\u5408\u5e76 \u63d2\u5165&\u5220\u9664 \u5168\u5c40\u52a0\u4e00 \u53ef\u6301\u4e45\u5316\u5b57\u5178\u6811","title":"Trie"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#kmp_6","text":"\u5728\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u5b50\u4e32 \\surd \\surd AC\u81ea\u52a8\u673a \\surd \\surd \u7edf\u8ba1\u6bcf\u4e2a\u524d\u7f00\u7684\u51fa\u73b0\u6b21\u6570 \u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u6570\u91cf \u5b57\u7b26\u4e32\u538b\u7f29","title":"KMP\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#2","text":"Trie(\u5b57\u5178\u6811) \\surd \\surd KMP\u7b97\u6cd5 \\surd \\surd AC\u81ea\u52a8\u673a \\surd \\surd \u540e\u7f00\u81ea\u52a8\u673a(SAM) \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u6307\u5b9a\u5b57\u7b26\u4e32\u7684\u540e\u7f00 \u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a(\u5e7f\u4e49SAM) \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u7684\u540e\u7f00\uff0c\u5373Trie+SAM \u56de\u6587\u81ea\u52a8\u673a(PAM) \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u7684\u4e2d\u5fc3\u53ca\u53f3\u534a\u90e8\u5206 \u5e8f\u5217\u81ea\u52a8\u673a \u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u6307\u5b9a\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217 \\cdots \\cdots","title":"\u62d3\u5c552\uff1a\u5176\u4ed6\u81ea\u52a8\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%85%A5%E9%97%A8/#_29","text":"","title":"\u5168\u6587\u7ed3\u675f\uff0c\u8c22\u8c22\u9605\u8bfb"}]}